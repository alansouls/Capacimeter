
ProjetoMicro1.0.0.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003074  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08003134  08003134  00013134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003280  08003280  00013280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003284  08003284  00013284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08003288  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000016c  20000004  0800328c  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000170  0800328c  00020170  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   000184d3  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002d0e  00000000  00000000  000384ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000ae7f  00000000  00000000  0003b20d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000b88  00000000  00000000  00046090  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001038  00000000  00000000  00046c18  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00007229  00000000  00000000  00047c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004148  00000000  00000000  0004ee79  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00052fc1  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000026f0  00000000  00000000  00053040  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800311c 	.word	0x0800311c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	0800311c 	.word	0x0800311c

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_cdrcmple>:
 8000408:	4684      	mov	ip, r0
 800040a:	1c10      	adds	r0, r2, #0
 800040c:	4662      	mov	r2, ip
 800040e:	468c      	mov	ip, r1
 8000410:	1c19      	adds	r1, r3, #0
 8000412:	4663      	mov	r3, ip
 8000414:	e000      	b.n	8000418 <__aeabi_cdcmpeq>
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdcmpeq>:
 8000418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800041a:	f000 fd45 	bl	8000ea8 <__ledf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	d401      	bmi.n	8000426 <__aeabi_cdcmpeq+0xe>
 8000422:	2100      	movs	r1, #0
 8000424:	42c8      	cmn	r0, r1
 8000426:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000428 <__aeabi_dcmpeq>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f000 fc9f 	bl	8000d6c <__eqdf2>
 800042e:	4240      	negs	r0, r0
 8000430:	3001      	adds	r0, #1
 8000432:	bd10      	pop	{r4, pc}

08000434 <__aeabi_dcmplt>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f000 fd37 	bl	8000ea8 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	db01      	blt.n	8000442 <__aeabi_dcmplt+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmple>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 fd2d 	bl	8000ea8 <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dd01      	ble.n	8000456 <__aeabi_dcmple+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpgt>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f000 fcbf 	bl	8000de0 <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	dc01      	bgt.n	800046a <__aeabi_dcmpgt+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_dcmpge>:
 8000470:	b510      	push	{r4, lr}
 8000472:	f000 fcb5 	bl	8000de0 <__gedf2>
 8000476:	2800      	cmp	r0, #0
 8000478:	da01      	bge.n	800047e <__aeabi_dcmpge+0xe>
 800047a:	2000      	movs	r0, #0
 800047c:	bd10      	pop	{r4, pc}
 800047e:	2001      	movs	r0, #1
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__aeabi_fdiv>:
 8000484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000486:	4657      	mov	r7, sl
 8000488:	464e      	mov	r6, r9
 800048a:	46de      	mov	lr, fp
 800048c:	4645      	mov	r5, r8
 800048e:	b5e0      	push	{r5, r6, r7, lr}
 8000490:	0244      	lsls	r4, r0, #9
 8000492:	0043      	lsls	r3, r0, #1
 8000494:	0fc6      	lsrs	r6, r0, #31
 8000496:	b083      	sub	sp, #12
 8000498:	1c0f      	adds	r7, r1, #0
 800049a:	0a64      	lsrs	r4, r4, #9
 800049c:	0e1b      	lsrs	r3, r3, #24
 800049e:	46b2      	mov	sl, r6
 80004a0:	d053      	beq.n	800054a <__aeabi_fdiv+0xc6>
 80004a2:	2bff      	cmp	r3, #255	; 0xff
 80004a4:	d027      	beq.n	80004f6 <__aeabi_fdiv+0x72>
 80004a6:	2280      	movs	r2, #128	; 0x80
 80004a8:	00e4      	lsls	r4, r4, #3
 80004aa:	04d2      	lsls	r2, r2, #19
 80004ac:	4314      	orrs	r4, r2
 80004ae:	227f      	movs	r2, #127	; 0x7f
 80004b0:	4252      	negs	r2, r2
 80004b2:	4690      	mov	r8, r2
 80004b4:	4498      	add	r8, r3
 80004b6:	2300      	movs	r3, #0
 80004b8:	4699      	mov	r9, r3
 80004ba:	469b      	mov	fp, r3
 80004bc:	027d      	lsls	r5, r7, #9
 80004be:	0078      	lsls	r0, r7, #1
 80004c0:	0ffb      	lsrs	r3, r7, #31
 80004c2:	0a6d      	lsrs	r5, r5, #9
 80004c4:	0e00      	lsrs	r0, r0, #24
 80004c6:	9300      	str	r3, [sp, #0]
 80004c8:	d024      	beq.n	8000514 <__aeabi_fdiv+0x90>
 80004ca:	28ff      	cmp	r0, #255	; 0xff
 80004cc:	d046      	beq.n	800055c <__aeabi_fdiv+0xd8>
 80004ce:	2380      	movs	r3, #128	; 0x80
 80004d0:	2100      	movs	r1, #0
 80004d2:	00ed      	lsls	r5, r5, #3
 80004d4:	04db      	lsls	r3, r3, #19
 80004d6:	431d      	orrs	r5, r3
 80004d8:	387f      	subs	r0, #127	; 0x7f
 80004da:	4647      	mov	r7, r8
 80004dc:	1a38      	subs	r0, r7, r0
 80004de:	464f      	mov	r7, r9
 80004e0:	430f      	orrs	r7, r1
 80004e2:	00bf      	lsls	r7, r7, #2
 80004e4:	46b9      	mov	r9, r7
 80004e6:	0033      	movs	r3, r6
 80004e8:	9a00      	ldr	r2, [sp, #0]
 80004ea:	4f87      	ldr	r7, [pc, #540]	; (8000708 <__aeabi_fdiv+0x284>)
 80004ec:	4053      	eors	r3, r2
 80004ee:	464a      	mov	r2, r9
 80004f0:	58ba      	ldr	r2, [r7, r2]
 80004f2:	9301      	str	r3, [sp, #4]
 80004f4:	4697      	mov	pc, r2
 80004f6:	2c00      	cmp	r4, #0
 80004f8:	d14e      	bne.n	8000598 <__aeabi_fdiv+0x114>
 80004fa:	2308      	movs	r3, #8
 80004fc:	4699      	mov	r9, r3
 80004fe:	33f7      	adds	r3, #247	; 0xf7
 8000500:	4698      	mov	r8, r3
 8000502:	3bfd      	subs	r3, #253	; 0xfd
 8000504:	469b      	mov	fp, r3
 8000506:	027d      	lsls	r5, r7, #9
 8000508:	0078      	lsls	r0, r7, #1
 800050a:	0ffb      	lsrs	r3, r7, #31
 800050c:	0a6d      	lsrs	r5, r5, #9
 800050e:	0e00      	lsrs	r0, r0, #24
 8000510:	9300      	str	r3, [sp, #0]
 8000512:	d1da      	bne.n	80004ca <__aeabi_fdiv+0x46>
 8000514:	2d00      	cmp	r5, #0
 8000516:	d126      	bne.n	8000566 <__aeabi_fdiv+0xe2>
 8000518:	2000      	movs	r0, #0
 800051a:	2101      	movs	r1, #1
 800051c:	0033      	movs	r3, r6
 800051e:	9a00      	ldr	r2, [sp, #0]
 8000520:	4f7a      	ldr	r7, [pc, #488]	; (800070c <__aeabi_fdiv+0x288>)
 8000522:	4053      	eors	r3, r2
 8000524:	4642      	mov	r2, r8
 8000526:	1a10      	subs	r0, r2, r0
 8000528:	464a      	mov	r2, r9
 800052a:	430a      	orrs	r2, r1
 800052c:	0092      	lsls	r2, r2, #2
 800052e:	58ba      	ldr	r2, [r7, r2]
 8000530:	001d      	movs	r5, r3
 8000532:	4697      	mov	pc, r2
 8000534:	9b00      	ldr	r3, [sp, #0]
 8000536:	002c      	movs	r4, r5
 8000538:	469a      	mov	sl, r3
 800053a:	468b      	mov	fp, r1
 800053c:	465b      	mov	r3, fp
 800053e:	2b02      	cmp	r3, #2
 8000540:	d131      	bne.n	80005a6 <__aeabi_fdiv+0x122>
 8000542:	4653      	mov	r3, sl
 8000544:	21ff      	movs	r1, #255	; 0xff
 8000546:	2400      	movs	r4, #0
 8000548:	e038      	b.n	80005bc <__aeabi_fdiv+0x138>
 800054a:	2c00      	cmp	r4, #0
 800054c:	d117      	bne.n	800057e <__aeabi_fdiv+0xfa>
 800054e:	2304      	movs	r3, #4
 8000550:	4699      	mov	r9, r3
 8000552:	2300      	movs	r3, #0
 8000554:	4698      	mov	r8, r3
 8000556:	3301      	adds	r3, #1
 8000558:	469b      	mov	fp, r3
 800055a:	e7af      	b.n	80004bc <__aeabi_fdiv+0x38>
 800055c:	20ff      	movs	r0, #255	; 0xff
 800055e:	2d00      	cmp	r5, #0
 8000560:	d10b      	bne.n	800057a <__aeabi_fdiv+0xf6>
 8000562:	2102      	movs	r1, #2
 8000564:	e7da      	b.n	800051c <__aeabi_fdiv+0x98>
 8000566:	0028      	movs	r0, r5
 8000568:	f000 fd52 	bl	8001010 <__clzsi2>
 800056c:	1f43      	subs	r3, r0, #5
 800056e:	409d      	lsls	r5, r3
 8000570:	2376      	movs	r3, #118	; 0x76
 8000572:	425b      	negs	r3, r3
 8000574:	1a18      	subs	r0, r3, r0
 8000576:	2100      	movs	r1, #0
 8000578:	e7af      	b.n	80004da <__aeabi_fdiv+0x56>
 800057a:	2103      	movs	r1, #3
 800057c:	e7ad      	b.n	80004da <__aeabi_fdiv+0x56>
 800057e:	0020      	movs	r0, r4
 8000580:	f000 fd46 	bl	8001010 <__clzsi2>
 8000584:	1f43      	subs	r3, r0, #5
 8000586:	409c      	lsls	r4, r3
 8000588:	2376      	movs	r3, #118	; 0x76
 800058a:	425b      	negs	r3, r3
 800058c:	1a1b      	subs	r3, r3, r0
 800058e:	4698      	mov	r8, r3
 8000590:	2300      	movs	r3, #0
 8000592:	4699      	mov	r9, r3
 8000594:	469b      	mov	fp, r3
 8000596:	e791      	b.n	80004bc <__aeabi_fdiv+0x38>
 8000598:	230c      	movs	r3, #12
 800059a:	4699      	mov	r9, r3
 800059c:	33f3      	adds	r3, #243	; 0xf3
 800059e:	4698      	mov	r8, r3
 80005a0:	3bfc      	subs	r3, #252	; 0xfc
 80005a2:	469b      	mov	fp, r3
 80005a4:	e78a      	b.n	80004bc <__aeabi_fdiv+0x38>
 80005a6:	2b03      	cmp	r3, #3
 80005a8:	d100      	bne.n	80005ac <__aeabi_fdiv+0x128>
 80005aa:	e0a5      	b.n	80006f8 <__aeabi_fdiv+0x274>
 80005ac:	4655      	mov	r5, sl
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d000      	beq.n	80005b4 <__aeabi_fdiv+0x130>
 80005b2:	e081      	b.n	80006b8 <__aeabi_fdiv+0x234>
 80005b4:	2301      	movs	r3, #1
 80005b6:	2100      	movs	r1, #0
 80005b8:	2400      	movs	r4, #0
 80005ba:	402b      	ands	r3, r5
 80005bc:	0264      	lsls	r4, r4, #9
 80005be:	05c9      	lsls	r1, r1, #23
 80005c0:	0a60      	lsrs	r0, r4, #9
 80005c2:	07db      	lsls	r3, r3, #31
 80005c4:	4308      	orrs	r0, r1
 80005c6:	4318      	orrs	r0, r3
 80005c8:	b003      	add	sp, #12
 80005ca:	bc3c      	pop	{r2, r3, r4, r5}
 80005cc:	4690      	mov	r8, r2
 80005ce:	4699      	mov	r9, r3
 80005d0:	46a2      	mov	sl, r4
 80005d2:	46ab      	mov	fp, r5
 80005d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005d6:	2480      	movs	r4, #128	; 0x80
 80005d8:	2300      	movs	r3, #0
 80005da:	03e4      	lsls	r4, r4, #15
 80005dc:	21ff      	movs	r1, #255	; 0xff
 80005de:	e7ed      	b.n	80005bc <__aeabi_fdiv+0x138>
 80005e0:	21ff      	movs	r1, #255	; 0xff
 80005e2:	2400      	movs	r4, #0
 80005e4:	e7ea      	b.n	80005bc <__aeabi_fdiv+0x138>
 80005e6:	2301      	movs	r3, #1
 80005e8:	1a59      	subs	r1, r3, r1
 80005ea:	291b      	cmp	r1, #27
 80005ec:	dd66      	ble.n	80006bc <__aeabi_fdiv+0x238>
 80005ee:	9a01      	ldr	r2, [sp, #4]
 80005f0:	4013      	ands	r3, r2
 80005f2:	2100      	movs	r1, #0
 80005f4:	2400      	movs	r4, #0
 80005f6:	e7e1      	b.n	80005bc <__aeabi_fdiv+0x138>
 80005f8:	2380      	movs	r3, #128	; 0x80
 80005fa:	03db      	lsls	r3, r3, #15
 80005fc:	421c      	tst	r4, r3
 80005fe:	d038      	beq.n	8000672 <__aeabi_fdiv+0x1ee>
 8000600:	421d      	tst	r5, r3
 8000602:	d051      	beq.n	80006a8 <__aeabi_fdiv+0x224>
 8000604:	431c      	orrs	r4, r3
 8000606:	0264      	lsls	r4, r4, #9
 8000608:	0a64      	lsrs	r4, r4, #9
 800060a:	0033      	movs	r3, r6
 800060c:	21ff      	movs	r1, #255	; 0xff
 800060e:	e7d5      	b.n	80005bc <__aeabi_fdiv+0x138>
 8000610:	0163      	lsls	r3, r4, #5
 8000612:	016c      	lsls	r4, r5, #5
 8000614:	42a3      	cmp	r3, r4
 8000616:	d23b      	bcs.n	8000690 <__aeabi_fdiv+0x20c>
 8000618:	261b      	movs	r6, #27
 800061a:	2100      	movs	r1, #0
 800061c:	3801      	subs	r0, #1
 800061e:	2501      	movs	r5, #1
 8000620:	001f      	movs	r7, r3
 8000622:	0049      	lsls	r1, r1, #1
 8000624:	005b      	lsls	r3, r3, #1
 8000626:	2f00      	cmp	r7, #0
 8000628:	db01      	blt.n	800062e <__aeabi_fdiv+0x1aa>
 800062a:	429c      	cmp	r4, r3
 800062c:	d801      	bhi.n	8000632 <__aeabi_fdiv+0x1ae>
 800062e:	1b1b      	subs	r3, r3, r4
 8000630:	4329      	orrs	r1, r5
 8000632:	3e01      	subs	r6, #1
 8000634:	2e00      	cmp	r6, #0
 8000636:	d1f3      	bne.n	8000620 <__aeabi_fdiv+0x19c>
 8000638:	001c      	movs	r4, r3
 800063a:	1e63      	subs	r3, r4, #1
 800063c:	419c      	sbcs	r4, r3
 800063e:	430c      	orrs	r4, r1
 8000640:	0001      	movs	r1, r0
 8000642:	317f      	adds	r1, #127	; 0x7f
 8000644:	2900      	cmp	r1, #0
 8000646:	ddce      	ble.n	80005e6 <__aeabi_fdiv+0x162>
 8000648:	0763      	lsls	r3, r4, #29
 800064a:	d004      	beq.n	8000656 <__aeabi_fdiv+0x1d2>
 800064c:	230f      	movs	r3, #15
 800064e:	4023      	ands	r3, r4
 8000650:	2b04      	cmp	r3, #4
 8000652:	d000      	beq.n	8000656 <__aeabi_fdiv+0x1d2>
 8000654:	3404      	adds	r4, #4
 8000656:	0123      	lsls	r3, r4, #4
 8000658:	d503      	bpl.n	8000662 <__aeabi_fdiv+0x1de>
 800065a:	0001      	movs	r1, r0
 800065c:	4b2c      	ldr	r3, [pc, #176]	; (8000710 <__aeabi_fdiv+0x28c>)
 800065e:	3180      	adds	r1, #128	; 0x80
 8000660:	401c      	ands	r4, r3
 8000662:	29fe      	cmp	r1, #254	; 0xfe
 8000664:	dd0d      	ble.n	8000682 <__aeabi_fdiv+0x1fe>
 8000666:	2301      	movs	r3, #1
 8000668:	9a01      	ldr	r2, [sp, #4]
 800066a:	21ff      	movs	r1, #255	; 0xff
 800066c:	4013      	ands	r3, r2
 800066e:	2400      	movs	r4, #0
 8000670:	e7a4      	b.n	80005bc <__aeabi_fdiv+0x138>
 8000672:	2380      	movs	r3, #128	; 0x80
 8000674:	03db      	lsls	r3, r3, #15
 8000676:	431c      	orrs	r4, r3
 8000678:	0264      	lsls	r4, r4, #9
 800067a:	0a64      	lsrs	r4, r4, #9
 800067c:	0033      	movs	r3, r6
 800067e:	21ff      	movs	r1, #255	; 0xff
 8000680:	e79c      	b.n	80005bc <__aeabi_fdiv+0x138>
 8000682:	2301      	movs	r3, #1
 8000684:	9a01      	ldr	r2, [sp, #4]
 8000686:	01a4      	lsls	r4, r4, #6
 8000688:	0a64      	lsrs	r4, r4, #9
 800068a:	b2c9      	uxtb	r1, r1
 800068c:	4013      	ands	r3, r2
 800068e:	e795      	b.n	80005bc <__aeabi_fdiv+0x138>
 8000690:	1b1b      	subs	r3, r3, r4
 8000692:	261a      	movs	r6, #26
 8000694:	2101      	movs	r1, #1
 8000696:	e7c2      	b.n	800061e <__aeabi_fdiv+0x19a>
 8000698:	9b00      	ldr	r3, [sp, #0]
 800069a:	468b      	mov	fp, r1
 800069c:	469a      	mov	sl, r3
 800069e:	2400      	movs	r4, #0
 80006a0:	e74c      	b.n	800053c <__aeabi_fdiv+0xb8>
 80006a2:	0263      	lsls	r3, r4, #9
 80006a4:	d5e5      	bpl.n	8000672 <__aeabi_fdiv+0x1ee>
 80006a6:	2500      	movs	r5, #0
 80006a8:	2480      	movs	r4, #128	; 0x80
 80006aa:	03e4      	lsls	r4, r4, #15
 80006ac:	432c      	orrs	r4, r5
 80006ae:	0264      	lsls	r4, r4, #9
 80006b0:	0a64      	lsrs	r4, r4, #9
 80006b2:	9b00      	ldr	r3, [sp, #0]
 80006b4:	21ff      	movs	r1, #255	; 0xff
 80006b6:	e781      	b.n	80005bc <__aeabi_fdiv+0x138>
 80006b8:	9501      	str	r5, [sp, #4]
 80006ba:	e7c1      	b.n	8000640 <__aeabi_fdiv+0x1bc>
 80006bc:	0023      	movs	r3, r4
 80006be:	2020      	movs	r0, #32
 80006c0:	40cb      	lsrs	r3, r1
 80006c2:	1a41      	subs	r1, r0, r1
 80006c4:	408c      	lsls	r4, r1
 80006c6:	1e61      	subs	r1, r4, #1
 80006c8:	418c      	sbcs	r4, r1
 80006ca:	431c      	orrs	r4, r3
 80006cc:	0763      	lsls	r3, r4, #29
 80006ce:	d004      	beq.n	80006da <__aeabi_fdiv+0x256>
 80006d0:	230f      	movs	r3, #15
 80006d2:	4023      	ands	r3, r4
 80006d4:	2b04      	cmp	r3, #4
 80006d6:	d000      	beq.n	80006da <__aeabi_fdiv+0x256>
 80006d8:	3404      	adds	r4, #4
 80006da:	0163      	lsls	r3, r4, #5
 80006dc:	d505      	bpl.n	80006ea <__aeabi_fdiv+0x266>
 80006de:	2301      	movs	r3, #1
 80006e0:	9a01      	ldr	r2, [sp, #4]
 80006e2:	2101      	movs	r1, #1
 80006e4:	4013      	ands	r3, r2
 80006e6:	2400      	movs	r4, #0
 80006e8:	e768      	b.n	80005bc <__aeabi_fdiv+0x138>
 80006ea:	2301      	movs	r3, #1
 80006ec:	9a01      	ldr	r2, [sp, #4]
 80006ee:	01a4      	lsls	r4, r4, #6
 80006f0:	0a64      	lsrs	r4, r4, #9
 80006f2:	4013      	ands	r3, r2
 80006f4:	2100      	movs	r1, #0
 80006f6:	e761      	b.n	80005bc <__aeabi_fdiv+0x138>
 80006f8:	2380      	movs	r3, #128	; 0x80
 80006fa:	03db      	lsls	r3, r3, #15
 80006fc:	431c      	orrs	r4, r3
 80006fe:	0264      	lsls	r4, r4, #9
 8000700:	0a64      	lsrs	r4, r4, #9
 8000702:	4653      	mov	r3, sl
 8000704:	21ff      	movs	r1, #255	; 0xff
 8000706:	e759      	b.n	80005bc <__aeabi_fdiv+0x138>
 8000708:	08003154 	.word	0x08003154
 800070c:	08003194 	.word	0x08003194
 8000710:	f7ffffff 	.word	0xf7ffffff

08000714 <__aeabi_fmul>:
 8000714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000716:	4657      	mov	r7, sl
 8000718:	464e      	mov	r6, r9
 800071a:	4645      	mov	r5, r8
 800071c:	46de      	mov	lr, fp
 800071e:	b5e0      	push	{r5, r6, r7, lr}
 8000720:	0247      	lsls	r7, r0, #9
 8000722:	0046      	lsls	r6, r0, #1
 8000724:	4688      	mov	r8, r1
 8000726:	0a7f      	lsrs	r7, r7, #9
 8000728:	0e36      	lsrs	r6, r6, #24
 800072a:	0fc4      	lsrs	r4, r0, #31
 800072c:	2e00      	cmp	r6, #0
 800072e:	d047      	beq.n	80007c0 <__aeabi_fmul+0xac>
 8000730:	2eff      	cmp	r6, #255	; 0xff
 8000732:	d024      	beq.n	800077e <__aeabi_fmul+0x6a>
 8000734:	00fb      	lsls	r3, r7, #3
 8000736:	2780      	movs	r7, #128	; 0x80
 8000738:	04ff      	lsls	r7, r7, #19
 800073a:	431f      	orrs	r7, r3
 800073c:	2300      	movs	r3, #0
 800073e:	4699      	mov	r9, r3
 8000740:	469a      	mov	sl, r3
 8000742:	3e7f      	subs	r6, #127	; 0x7f
 8000744:	4643      	mov	r3, r8
 8000746:	025d      	lsls	r5, r3, #9
 8000748:	0058      	lsls	r0, r3, #1
 800074a:	0fdb      	lsrs	r3, r3, #31
 800074c:	0a6d      	lsrs	r5, r5, #9
 800074e:	0e00      	lsrs	r0, r0, #24
 8000750:	4698      	mov	r8, r3
 8000752:	d043      	beq.n	80007dc <__aeabi_fmul+0xc8>
 8000754:	28ff      	cmp	r0, #255	; 0xff
 8000756:	d03b      	beq.n	80007d0 <__aeabi_fmul+0xbc>
 8000758:	00eb      	lsls	r3, r5, #3
 800075a:	2580      	movs	r5, #128	; 0x80
 800075c:	2200      	movs	r2, #0
 800075e:	04ed      	lsls	r5, r5, #19
 8000760:	431d      	orrs	r5, r3
 8000762:	387f      	subs	r0, #127	; 0x7f
 8000764:	1836      	adds	r6, r6, r0
 8000766:	1c73      	adds	r3, r6, #1
 8000768:	4641      	mov	r1, r8
 800076a:	469b      	mov	fp, r3
 800076c:	464b      	mov	r3, r9
 800076e:	4061      	eors	r1, r4
 8000770:	4313      	orrs	r3, r2
 8000772:	2b0f      	cmp	r3, #15
 8000774:	d864      	bhi.n	8000840 <__aeabi_fmul+0x12c>
 8000776:	4875      	ldr	r0, [pc, #468]	; (800094c <__aeabi_fmul+0x238>)
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	58c3      	ldr	r3, [r0, r3]
 800077c:	469f      	mov	pc, r3
 800077e:	2f00      	cmp	r7, #0
 8000780:	d142      	bne.n	8000808 <__aeabi_fmul+0xf4>
 8000782:	2308      	movs	r3, #8
 8000784:	4699      	mov	r9, r3
 8000786:	3b06      	subs	r3, #6
 8000788:	26ff      	movs	r6, #255	; 0xff
 800078a:	469a      	mov	sl, r3
 800078c:	e7da      	b.n	8000744 <__aeabi_fmul+0x30>
 800078e:	4641      	mov	r1, r8
 8000790:	2a02      	cmp	r2, #2
 8000792:	d028      	beq.n	80007e6 <__aeabi_fmul+0xd2>
 8000794:	2a03      	cmp	r2, #3
 8000796:	d100      	bne.n	800079a <__aeabi_fmul+0x86>
 8000798:	e0ce      	b.n	8000938 <__aeabi_fmul+0x224>
 800079a:	2a01      	cmp	r2, #1
 800079c:	d000      	beq.n	80007a0 <__aeabi_fmul+0x8c>
 800079e:	e0ac      	b.n	80008fa <__aeabi_fmul+0x1e6>
 80007a0:	4011      	ands	r1, r2
 80007a2:	2000      	movs	r0, #0
 80007a4:	2200      	movs	r2, #0
 80007a6:	b2cc      	uxtb	r4, r1
 80007a8:	0240      	lsls	r0, r0, #9
 80007aa:	05d2      	lsls	r2, r2, #23
 80007ac:	0a40      	lsrs	r0, r0, #9
 80007ae:	07e4      	lsls	r4, r4, #31
 80007b0:	4310      	orrs	r0, r2
 80007b2:	4320      	orrs	r0, r4
 80007b4:	bc3c      	pop	{r2, r3, r4, r5}
 80007b6:	4690      	mov	r8, r2
 80007b8:	4699      	mov	r9, r3
 80007ba:	46a2      	mov	sl, r4
 80007bc:	46ab      	mov	fp, r5
 80007be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007c0:	2f00      	cmp	r7, #0
 80007c2:	d115      	bne.n	80007f0 <__aeabi_fmul+0xdc>
 80007c4:	2304      	movs	r3, #4
 80007c6:	4699      	mov	r9, r3
 80007c8:	3b03      	subs	r3, #3
 80007ca:	2600      	movs	r6, #0
 80007cc:	469a      	mov	sl, r3
 80007ce:	e7b9      	b.n	8000744 <__aeabi_fmul+0x30>
 80007d0:	20ff      	movs	r0, #255	; 0xff
 80007d2:	2202      	movs	r2, #2
 80007d4:	2d00      	cmp	r5, #0
 80007d6:	d0c5      	beq.n	8000764 <__aeabi_fmul+0x50>
 80007d8:	2203      	movs	r2, #3
 80007da:	e7c3      	b.n	8000764 <__aeabi_fmul+0x50>
 80007dc:	2d00      	cmp	r5, #0
 80007de:	d119      	bne.n	8000814 <__aeabi_fmul+0x100>
 80007e0:	2000      	movs	r0, #0
 80007e2:	2201      	movs	r2, #1
 80007e4:	e7be      	b.n	8000764 <__aeabi_fmul+0x50>
 80007e6:	2401      	movs	r4, #1
 80007e8:	22ff      	movs	r2, #255	; 0xff
 80007ea:	400c      	ands	r4, r1
 80007ec:	2000      	movs	r0, #0
 80007ee:	e7db      	b.n	80007a8 <__aeabi_fmul+0x94>
 80007f0:	0038      	movs	r0, r7
 80007f2:	f000 fc0d 	bl	8001010 <__clzsi2>
 80007f6:	2676      	movs	r6, #118	; 0x76
 80007f8:	1f43      	subs	r3, r0, #5
 80007fa:	409f      	lsls	r7, r3
 80007fc:	2300      	movs	r3, #0
 80007fe:	4276      	negs	r6, r6
 8000800:	1a36      	subs	r6, r6, r0
 8000802:	4699      	mov	r9, r3
 8000804:	469a      	mov	sl, r3
 8000806:	e79d      	b.n	8000744 <__aeabi_fmul+0x30>
 8000808:	230c      	movs	r3, #12
 800080a:	4699      	mov	r9, r3
 800080c:	3b09      	subs	r3, #9
 800080e:	26ff      	movs	r6, #255	; 0xff
 8000810:	469a      	mov	sl, r3
 8000812:	e797      	b.n	8000744 <__aeabi_fmul+0x30>
 8000814:	0028      	movs	r0, r5
 8000816:	f000 fbfb 	bl	8001010 <__clzsi2>
 800081a:	1f43      	subs	r3, r0, #5
 800081c:	409d      	lsls	r5, r3
 800081e:	2376      	movs	r3, #118	; 0x76
 8000820:	425b      	negs	r3, r3
 8000822:	1a18      	subs	r0, r3, r0
 8000824:	2200      	movs	r2, #0
 8000826:	e79d      	b.n	8000764 <__aeabi_fmul+0x50>
 8000828:	2080      	movs	r0, #128	; 0x80
 800082a:	2400      	movs	r4, #0
 800082c:	03c0      	lsls	r0, r0, #15
 800082e:	22ff      	movs	r2, #255	; 0xff
 8000830:	e7ba      	b.n	80007a8 <__aeabi_fmul+0x94>
 8000832:	003d      	movs	r5, r7
 8000834:	4652      	mov	r2, sl
 8000836:	e7ab      	b.n	8000790 <__aeabi_fmul+0x7c>
 8000838:	003d      	movs	r5, r7
 800083a:	0021      	movs	r1, r4
 800083c:	4652      	mov	r2, sl
 800083e:	e7a7      	b.n	8000790 <__aeabi_fmul+0x7c>
 8000840:	0c3b      	lsrs	r3, r7, #16
 8000842:	469c      	mov	ip, r3
 8000844:	042a      	lsls	r2, r5, #16
 8000846:	0c12      	lsrs	r2, r2, #16
 8000848:	0c2b      	lsrs	r3, r5, #16
 800084a:	0014      	movs	r4, r2
 800084c:	4660      	mov	r0, ip
 800084e:	4665      	mov	r5, ip
 8000850:	043f      	lsls	r7, r7, #16
 8000852:	0c3f      	lsrs	r7, r7, #16
 8000854:	437c      	muls	r4, r7
 8000856:	4342      	muls	r2, r0
 8000858:	435d      	muls	r5, r3
 800085a:	437b      	muls	r3, r7
 800085c:	0c27      	lsrs	r7, r4, #16
 800085e:	189b      	adds	r3, r3, r2
 8000860:	18ff      	adds	r7, r7, r3
 8000862:	42ba      	cmp	r2, r7
 8000864:	d903      	bls.n	800086e <__aeabi_fmul+0x15a>
 8000866:	2380      	movs	r3, #128	; 0x80
 8000868:	025b      	lsls	r3, r3, #9
 800086a:	469c      	mov	ip, r3
 800086c:	4465      	add	r5, ip
 800086e:	0424      	lsls	r4, r4, #16
 8000870:	043a      	lsls	r2, r7, #16
 8000872:	0c24      	lsrs	r4, r4, #16
 8000874:	1912      	adds	r2, r2, r4
 8000876:	0193      	lsls	r3, r2, #6
 8000878:	1e5c      	subs	r4, r3, #1
 800087a:	41a3      	sbcs	r3, r4
 800087c:	0c3f      	lsrs	r7, r7, #16
 800087e:	0e92      	lsrs	r2, r2, #26
 8000880:	197d      	adds	r5, r7, r5
 8000882:	431a      	orrs	r2, r3
 8000884:	01ad      	lsls	r5, r5, #6
 8000886:	4315      	orrs	r5, r2
 8000888:	012b      	lsls	r3, r5, #4
 800088a:	d504      	bpl.n	8000896 <__aeabi_fmul+0x182>
 800088c:	2301      	movs	r3, #1
 800088e:	465e      	mov	r6, fp
 8000890:	086a      	lsrs	r2, r5, #1
 8000892:	401d      	ands	r5, r3
 8000894:	4315      	orrs	r5, r2
 8000896:	0032      	movs	r2, r6
 8000898:	327f      	adds	r2, #127	; 0x7f
 800089a:	2a00      	cmp	r2, #0
 800089c:	dd25      	ble.n	80008ea <__aeabi_fmul+0x1d6>
 800089e:	076b      	lsls	r3, r5, #29
 80008a0:	d004      	beq.n	80008ac <__aeabi_fmul+0x198>
 80008a2:	230f      	movs	r3, #15
 80008a4:	402b      	ands	r3, r5
 80008a6:	2b04      	cmp	r3, #4
 80008a8:	d000      	beq.n	80008ac <__aeabi_fmul+0x198>
 80008aa:	3504      	adds	r5, #4
 80008ac:	012b      	lsls	r3, r5, #4
 80008ae:	d503      	bpl.n	80008b8 <__aeabi_fmul+0x1a4>
 80008b0:	0032      	movs	r2, r6
 80008b2:	4b27      	ldr	r3, [pc, #156]	; (8000950 <__aeabi_fmul+0x23c>)
 80008b4:	3280      	adds	r2, #128	; 0x80
 80008b6:	401d      	ands	r5, r3
 80008b8:	2afe      	cmp	r2, #254	; 0xfe
 80008ba:	dc94      	bgt.n	80007e6 <__aeabi_fmul+0xd2>
 80008bc:	2401      	movs	r4, #1
 80008be:	01a8      	lsls	r0, r5, #6
 80008c0:	0a40      	lsrs	r0, r0, #9
 80008c2:	b2d2      	uxtb	r2, r2
 80008c4:	400c      	ands	r4, r1
 80008c6:	e76f      	b.n	80007a8 <__aeabi_fmul+0x94>
 80008c8:	2080      	movs	r0, #128	; 0x80
 80008ca:	03c0      	lsls	r0, r0, #15
 80008cc:	4207      	tst	r7, r0
 80008ce:	d007      	beq.n	80008e0 <__aeabi_fmul+0x1cc>
 80008d0:	4205      	tst	r5, r0
 80008d2:	d105      	bne.n	80008e0 <__aeabi_fmul+0x1cc>
 80008d4:	4328      	orrs	r0, r5
 80008d6:	0240      	lsls	r0, r0, #9
 80008d8:	0a40      	lsrs	r0, r0, #9
 80008da:	4644      	mov	r4, r8
 80008dc:	22ff      	movs	r2, #255	; 0xff
 80008de:	e763      	b.n	80007a8 <__aeabi_fmul+0x94>
 80008e0:	4338      	orrs	r0, r7
 80008e2:	0240      	lsls	r0, r0, #9
 80008e4:	0a40      	lsrs	r0, r0, #9
 80008e6:	22ff      	movs	r2, #255	; 0xff
 80008e8:	e75e      	b.n	80007a8 <__aeabi_fmul+0x94>
 80008ea:	2401      	movs	r4, #1
 80008ec:	1aa3      	subs	r3, r4, r2
 80008ee:	2b1b      	cmp	r3, #27
 80008f0:	dd05      	ble.n	80008fe <__aeabi_fmul+0x1ea>
 80008f2:	400c      	ands	r4, r1
 80008f4:	2200      	movs	r2, #0
 80008f6:	2000      	movs	r0, #0
 80008f8:	e756      	b.n	80007a8 <__aeabi_fmul+0x94>
 80008fa:	465e      	mov	r6, fp
 80008fc:	e7cb      	b.n	8000896 <__aeabi_fmul+0x182>
 80008fe:	002a      	movs	r2, r5
 8000900:	2020      	movs	r0, #32
 8000902:	40da      	lsrs	r2, r3
 8000904:	1ac3      	subs	r3, r0, r3
 8000906:	409d      	lsls	r5, r3
 8000908:	002b      	movs	r3, r5
 800090a:	1e5d      	subs	r5, r3, #1
 800090c:	41ab      	sbcs	r3, r5
 800090e:	4313      	orrs	r3, r2
 8000910:	075a      	lsls	r2, r3, #29
 8000912:	d004      	beq.n	800091e <__aeabi_fmul+0x20a>
 8000914:	220f      	movs	r2, #15
 8000916:	401a      	ands	r2, r3
 8000918:	2a04      	cmp	r2, #4
 800091a:	d000      	beq.n	800091e <__aeabi_fmul+0x20a>
 800091c:	3304      	adds	r3, #4
 800091e:	015a      	lsls	r2, r3, #5
 8000920:	d504      	bpl.n	800092c <__aeabi_fmul+0x218>
 8000922:	2401      	movs	r4, #1
 8000924:	2201      	movs	r2, #1
 8000926:	400c      	ands	r4, r1
 8000928:	2000      	movs	r0, #0
 800092a:	e73d      	b.n	80007a8 <__aeabi_fmul+0x94>
 800092c:	2401      	movs	r4, #1
 800092e:	019b      	lsls	r3, r3, #6
 8000930:	0a58      	lsrs	r0, r3, #9
 8000932:	400c      	ands	r4, r1
 8000934:	2200      	movs	r2, #0
 8000936:	e737      	b.n	80007a8 <__aeabi_fmul+0x94>
 8000938:	2080      	movs	r0, #128	; 0x80
 800093a:	2401      	movs	r4, #1
 800093c:	03c0      	lsls	r0, r0, #15
 800093e:	4328      	orrs	r0, r5
 8000940:	0240      	lsls	r0, r0, #9
 8000942:	0a40      	lsrs	r0, r0, #9
 8000944:	400c      	ands	r4, r1
 8000946:	22ff      	movs	r2, #255	; 0xff
 8000948:	e72e      	b.n	80007a8 <__aeabi_fmul+0x94>
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	080031d4 	.word	0x080031d4
 8000950:	f7ffffff 	.word	0xf7ffffff

08000954 <__aeabi_fsub>:
 8000954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000956:	464f      	mov	r7, r9
 8000958:	46d6      	mov	lr, sl
 800095a:	4646      	mov	r6, r8
 800095c:	0044      	lsls	r4, r0, #1
 800095e:	b5c0      	push	{r6, r7, lr}
 8000960:	0fc2      	lsrs	r2, r0, #31
 8000962:	0247      	lsls	r7, r0, #9
 8000964:	0248      	lsls	r0, r1, #9
 8000966:	0a40      	lsrs	r0, r0, #9
 8000968:	4684      	mov	ip, r0
 800096a:	4666      	mov	r6, ip
 800096c:	0a7b      	lsrs	r3, r7, #9
 800096e:	0048      	lsls	r0, r1, #1
 8000970:	0fc9      	lsrs	r1, r1, #31
 8000972:	469a      	mov	sl, r3
 8000974:	0e24      	lsrs	r4, r4, #24
 8000976:	0015      	movs	r5, r2
 8000978:	00db      	lsls	r3, r3, #3
 800097a:	0e00      	lsrs	r0, r0, #24
 800097c:	4689      	mov	r9, r1
 800097e:	00f6      	lsls	r6, r6, #3
 8000980:	28ff      	cmp	r0, #255	; 0xff
 8000982:	d100      	bne.n	8000986 <__aeabi_fsub+0x32>
 8000984:	e08f      	b.n	8000aa6 <__aeabi_fsub+0x152>
 8000986:	2101      	movs	r1, #1
 8000988:	464f      	mov	r7, r9
 800098a:	404f      	eors	r7, r1
 800098c:	0039      	movs	r1, r7
 800098e:	4291      	cmp	r1, r2
 8000990:	d066      	beq.n	8000a60 <__aeabi_fsub+0x10c>
 8000992:	1a22      	subs	r2, r4, r0
 8000994:	2a00      	cmp	r2, #0
 8000996:	dc00      	bgt.n	800099a <__aeabi_fsub+0x46>
 8000998:	e09d      	b.n	8000ad6 <__aeabi_fsub+0x182>
 800099a:	2800      	cmp	r0, #0
 800099c:	d13d      	bne.n	8000a1a <__aeabi_fsub+0xc6>
 800099e:	2e00      	cmp	r6, #0
 80009a0:	d100      	bne.n	80009a4 <__aeabi_fsub+0x50>
 80009a2:	e08b      	b.n	8000abc <__aeabi_fsub+0x168>
 80009a4:	1e51      	subs	r1, r2, #1
 80009a6:	2900      	cmp	r1, #0
 80009a8:	d000      	beq.n	80009ac <__aeabi_fsub+0x58>
 80009aa:	e0b5      	b.n	8000b18 <__aeabi_fsub+0x1c4>
 80009ac:	2401      	movs	r4, #1
 80009ae:	1b9b      	subs	r3, r3, r6
 80009b0:	015a      	lsls	r2, r3, #5
 80009b2:	d544      	bpl.n	8000a3e <__aeabi_fsub+0xea>
 80009b4:	019b      	lsls	r3, r3, #6
 80009b6:	099f      	lsrs	r7, r3, #6
 80009b8:	0038      	movs	r0, r7
 80009ba:	f000 fb29 	bl	8001010 <__clzsi2>
 80009be:	3805      	subs	r0, #5
 80009c0:	4087      	lsls	r7, r0
 80009c2:	4284      	cmp	r4, r0
 80009c4:	dd00      	ble.n	80009c8 <__aeabi_fsub+0x74>
 80009c6:	e096      	b.n	8000af6 <__aeabi_fsub+0x1a2>
 80009c8:	1b04      	subs	r4, r0, r4
 80009ca:	003a      	movs	r2, r7
 80009cc:	2020      	movs	r0, #32
 80009ce:	3401      	adds	r4, #1
 80009d0:	40e2      	lsrs	r2, r4
 80009d2:	1b04      	subs	r4, r0, r4
 80009d4:	40a7      	lsls	r7, r4
 80009d6:	003b      	movs	r3, r7
 80009d8:	1e5f      	subs	r7, r3, #1
 80009da:	41bb      	sbcs	r3, r7
 80009dc:	2400      	movs	r4, #0
 80009de:	4313      	orrs	r3, r2
 80009e0:	075a      	lsls	r2, r3, #29
 80009e2:	d004      	beq.n	80009ee <__aeabi_fsub+0x9a>
 80009e4:	220f      	movs	r2, #15
 80009e6:	401a      	ands	r2, r3
 80009e8:	2a04      	cmp	r2, #4
 80009ea:	d000      	beq.n	80009ee <__aeabi_fsub+0x9a>
 80009ec:	3304      	adds	r3, #4
 80009ee:	015a      	lsls	r2, r3, #5
 80009f0:	d527      	bpl.n	8000a42 <__aeabi_fsub+0xee>
 80009f2:	3401      	adds	r4, #1
 80009f4:	2cff      	cmp	r4, #255	; 0xff
 80009f6:	d100      	bne.n	80009fa <__aeabi_fsub+0xa6>
 80009f8:	e079      	b.n	8000aee <__aeabi_fsub+0x19a>
 80009fa:	2201      	movs	r2, #1
 80009fc:	019b      	lsls	r3, r3, #6
 80009fe:	0a5b      	lsrs	r3, r3, #9
 8000a00:	b2e4      	uxtb	r4, r4
 8000a02:	402a      	ands	r2, r5
 8000a04:	025b      	lsls	r3, r3, #9
 8000a06:	05e4      	lsls	r4, r4, #23
 8000a08:	0a58      	lsrs	r0, r3, #9
 8000a0a:	07d2      	lsls	r2, r2, #31
 8000a0c:	4320      	orrs	r0, r4
 8000a0e:	4310      	orrs	r0, r2
 8000a10:	bc1c      	pop	{r2, r3, r4}
 8000a12:	4690      	mov	r8, r2
 8000a14:	4699      	mov	r9, r3
 8000a16:	46a2      	mov	sl, r4
 8000a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a1a:	2cff      	cmp	r4, #255	; 0xff
 8000a1c:	d0e0      	beq.n	80009e0 <__aeabi_fsub+0x8c>
 8000a1e:	2180      	movs	r1, #128	; 0x80
 8000a20:	04c9      	lsls	r1, r1, #19
 8000a22:	430e      	orrs	r6, r1
 8000a24:	2a1b      	cmp	r2, #27
 8000a26:	dc7b      	bgt.n	8000b20 <__aeabi_fsub+0x1cc>
 8000a28:	0031      	movs	r1, r6
 8000a2a:	2020      	movs	r0, #32
 8000a2c:	40d1      	lsrs	r1, r2
 8000a2e:	1a82      	subs	r2, r0, r2
 8000a30:	4096      	lsls	r6, r2
 8000a32:	1e72      	subs	r2, r6, #1
 8000a34:	4196      	sbcs	r6, r2
 8000a36:	430e      	orrs	r6, r1
 8000a38:	1b9b      	subs	r3, r3, r6
 8000a3a:	015a      	lsls	r2, r3, #5
 8000a3c:	d4ba      	bmi.n	80009b4 <__aeabi_fsub+0x60>
 8000a3e:	075a      	lsls	r2, r3, #29
 8000a40:	d1d0      	bne.n	80009e4 <__aeabi_fsub+0x90>
 8000a42:	2201      	movs	r2, #1
 8000a44:	08df      	lsrs	r7, r3, #3
 8000a46:	402a      	ands	r2, r5
 8000a48:	2cff      	cmp	r4, #255	; 0xff
 8000a4a:	d133      	bne.n	8000ab4 <__aeabi_fsub+0x160>
 8000a4c:	2f00      	cmp	r7, #0
 8000a4e:	d100      	bne.n	8000a52 <__aeabi_fsub+0xfe>
 8000a50:	e0a8      	b.n	8000ba4 <__aeabi_fsub+0x250>
 8000a52:	2380      	movs	r3, #128	; 0x80
 8000a54:	03db      	lsls	r3, r3, #15
 8000a56:	433b      	orrs	r3, r7
 8000a58:	025b      	lsls	r3, r3, #9
 8000a5a:	0a5b      	lsrs	r3, r3, #9
 8000a5c:	24ff      	movs	r4, #255	; 0xff
 8000a5e:	e7d1      	b.n	8000a04 <__aeabi_fsub+0xb0>
 8000a60:	1a21      	subs	r1, r4, r0
 8000a62:	2900      	cmp	r1, #0
 8000a64:	dd4c      	ble.n	8000b00 <__aeabi_fsub+0x1ac>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	d02a      	beq.n	8000ac0 <__aeabi_fsub+0x16c>
 8000a6a:	2cff      	cmp	r4, #255	; 0xff
 8000a6c:	d0b8      	beq.n	80009e0 <__aeabi_fsub+0x8c>
 8000a6e:	2080      	movs	r0, #128	; 0x80
 8000a70:	04c0      	lsls	r0, r0, #19
 8000a72:	4306      	orrs	r6, r0
 8000a74:	291b      	cmp	r1, #27
 8000a76:	dd00      	ble.n	8000a7a <__aeabi_fsub+0x126>
 8000a78:	e0af      	b.n	8000bda <__aeabi_fsub+0x286>
 8000a7a:	0030      	movs	r0, r6
 8000a7c:	2720      	movs	r7, #32
 8000a7e:	40c8      	lsrs	r0, r1
 8000a80:	1a79      	subs	r1, r7, r1
 8000a82:	408e      	lsls	r6, r1
 8000a84:	1e71      	subs	r1, r6, #1
 8000a86:	418e      	sbcs	r6, r1
 8000a88:	4306      	orrs	r6, r0
 8000a8a:	199b      	adds	r3, r3, r6
 8000a8c:	0159      	lsls	r1, r3, #5
 8000a8e:	d5d6      	bpl.n	8000a3e <__aeabi_fsub+0xea>
 8000a90:	3401      	adds	r4, #1
 8000a92:	2cff      	cmp	r4, #255	; 0xff
 8000a94:	d100      	bne.n	8000a98 <__aeabi_fsub+0x144>
 8000a96:	e085      	b.n	8000ba4 <__aeabi_fsub+0x250>
 8000a98:	2201      	movs	r2, #1
 8000a9a:	497a      	ldr	r1, [pc, #488]	; (8000c84 <__aeabi_fsub+0x330>)
 8000a9c:	401a      	ands	r2, r3
 8000a9e:	085b      	lsrs	r3, r3, #1
 8000aa0:	400b      	ands	r3, r1
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	e79c      	b.n	80009e0 <__aeabi_fsub+0x8c>
 8000aa6:	2e00      	cmp	r6, #0
 8000aa8:	d000      	beq.n	8000aac <__aeabi_fsub+0x158>
 8000aaa:	e770      	b.n	800098e <__aeabi_fsub+0x3a>
 8000aac:	e76b      	b.n	8000986 <__aeabi_fsub+0x32>
 8000aae:	1e3b      	subs	r3, r7, #0
 8000ab0:	d1c5      	bne.n	8000a3e <__aeabi_fsub+0xea>
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	027b      	lsls	r3, r7, #9
 8000ab6:	0a5b      	lsrs	r3, r3, #9
 8000ab8:	b2e4      	uxtb	r4, r4
 8000aba:	e7a3      	b.n	8000a04 <__aeabi_fsub+0xb0>
 8000abc:	0014      	movs	r4, r2
 8000abe:	e78f      	b.n	80009e0 <__aeabi_fsub+0x8c>
 8000ac0:	2e00      	cmp	r6, #0
 8000ac2:	d04d      	beq.n	8000b60 <__aeabi_fsub+0x20c>
 8000ac4:	1e48      	subs	r0, r1, #1
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	d157      	bne.n	8000b7a <__aeabi_fsub+0x226>
 8000aca:	199b      	adds	r3, r3, r6
 8000acc:	2401      	movs	r4, #1
 8000ace:	015a      	lsls	r2, r3, #5
 8000ad0:	d5b5      	bpl.n	8000a3e <__aeabi_fsub+0xea>
 8000ad2:	2402      	movs	r4, #2
 8000ad4:	e7e0      	b.n	8000a98 <__aeabi_fsub+0x144>
 8000ad6:	2a00      	cmp	r2, #0
 8000ad8:	d125      	bne.n	8000b26 <__aeabi_fsub+0x1d2>
 8000ada:	1c62      	adds	r2, r4, #1
 8000adc:	b2d2      	uxtb	r2, r2
 8000ade:	2a01      	cmp	r2, #1
 8000ae0:	dd72      	ble.n	8000bc8 <__aeabi_fsub+0x274>
 8000ae2:	1b9f      	subs	r7, r3, r6
 8000ae4:	017a      	lsls	r2, r7, #5
 8000ae6:	d535      	bpl.n	8000b54 <__aeabi_fsub+0x200>
 8000ae8:	1af7      	subs	r7, r6, r3
 8000aea:	000d      	movs	r5, r1
 8000aec:	e764      	b.n	80009b8 <__aeabi_fsub+0x64>
 8000aee:	2201      	movs	r2, #1
 8000af0:	2300      	movs	r3, #0
 8000af2:	402a      	ands	r2, r5
 8000af4:	e786      	b.n	8000a04 <__aeabi_fsub+0xb0>
 8000af6:	003b      	movs	r3, r7
 8000af8:	4a63      	ldr	r2, [pc, #396]	; (8000c88 <__aeabi_fsub+0x334>)
 8000afa:	1a24      	subs	r4, r4, r0
 8000afc:	4013      	ands	r3, r2
 8000afe:	e76f      	b.n	80009e0 <__aeabi_fsub+0x8c>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	d16c      	bne.n	8000bde <__aeabi_fsub+0x28a>
 8000b04:	1c61      	adds	r1, r4, #1
 8000b06:	b2c8      	uxtb	r0, r1
 8000b08:	2801      	cmp	r0, #1
 8000b0a:	dd4e      	ble.n	8000baa <__aeabi_fsub+0x256>
 8000b0c:	29ff      	cmp	r1, #255	; 0xff
 8000b0e:	d049      	beq.n	8000ba4 <__aeabi_fsub+0x250>
 8000b10:	199b      	adds	r3, r3, r6
 8000b12:	085b      	lsrs	r3, r3, #1
 8000b14:	000c      	movs	r4, r1
 8000b16:	e763      	b.n	80009e0 <__aeabi_fsub+0x8c>
 8000b18:	2aff      	cmp	r2, #255	; 0xff
 8000b1a:	d041      	beq.n	8000ba0 <__aeabi_fsub+0x24c>
 8000b1c:	000a      	movs	r2, r1
 8000b1e:	e781      	b.n	8000a24 <__aeabi_fsub+0xd0>
 8000b20:	2601      	movs	r6, #1
 8000b22:	1b9b      	subs	r3, r3, r6
 8000b24:	e789      	b.n	8000a3a <__aeabi_fsub+0xe6>
 8000b26:	2c00      	cmp	r4, #0
 8000b28:	d01c      	beq.n	8000b64 <__aeabi_fsub+0x210>
 8000b2a:	28ff      	cmp	r0, #255	; 0xff
 8000b2c:	d021      	beq.n	8000b72 <__aeabi_fsub+0x21e>
 8000b2e:	2480      	movs	r4, #128	; 0x80
 8000b30:	04e4      	lsls	r4, r4, #19
 8000b32:	4252      	negs	r2, r2
 8000b34:	4323      	orrs	r3, r4
 8000b36:	2a1b      	cmp	r2, #27
 8000b38:	dd00      	ble.n	8000b3c <__aeabi_fsub+0x1e8>
 8000b3a:	e096      	b.n	8000c6a <__aeabi_fsub+0x316>
 8000b3c:	001c      	movs	r4, r3
 8000b3e:	2520      	movs	r5, #32
 8000b40:	40d4      	lsrs	r4, r2
 8000b42:	1aaa      	subs	r2, r5, r2
 8000b44:	4093      	lsls	r3, r2
 8000b46:	1e5a      	subs	r2, r3, #1
 8000b48:	4193      	sbcs	r3, r2
 8000b4a:	4323      	orrs	r3, r4
 8000b4c:	1af3      	subs	r3, r6, r3
 8000b4e:	0004      	movs	r4, r0
 8000b50:	000d      	movs	r5, r1
 8000b52:	e72d      	b.n	80009b0 <__aeabi_fsub+0x5c>
 8000b54:	2f00      	cmp	r7, #0
 8000b56:	d000      	beq.n	8000b5a <__aeabi_fsub+0x206>
 8000b58:	e72e      	b.n	80009b8 <__aeabi_fsub+0x64>
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2400      	movs	r4, #0
 8000b5e:	e7a9      	b.n	8000ab4 <__aeabi_fsub+0x160>
 8000b60:	000c      	movs	r4, r1
 8000b62:	e73d      	b.n	80009e0 <__aeabi_fsub+0x8c>
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d058      	beq.n	8000c1a <__aeabi_fsub+0x2c6>
 8000b68:	43d2      	mvns	r2, r2
 8000b6a:	2a00      	cmp	r2, #0
 8000b6c:	d0ee      	beq.n	8000b4c <__aeabi_fsub+0x1f8>
 8000b6e:	28ff      	cmp	r0, #255	; 0xff
 8000b70:	d1e1      	bne.n	8000b36 <__aeabi_fsub+0x1e2>
 8000b72:	0033      	movs	r3, r6
 8000b74:	24ff      	movs	r4, #255	; 0xff
 8000b76:	000d      	movs	r5, r1
 8000b78:	e732      	b.n	80009e0 <__aeabi_fsub+0x8c>
 8000b7a:	29ff      	cmp	r1, #255	; 0xff
 8000b7c:	d010      	beq.n	8000ba0 <__aeabi_fsub+0x24c>
 8000b7e:	0001      	movs	r1, r0
 8000b80:	e778      	b.n	8000a74 <__aeabi_fsub+0x120>
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d06e      	beq.n	8000c64 <__aeabi_fsub+0x310>
 8000b86:	24ff      	movs	r4, #255	; 0xff
 8000b88:	2e00      	cmp	r6, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fsub+0x23a>
 8000b8c:	e728      	b.n	80009e0 <__aeabi_fsub+0x8c>
 8000b8e:	2280      	movs	r2, #128	; 0x80
 8000b90:	4651      	mov	r1, sl
 8000b92:	03d2      	lsls	r2, r2, #15
 8000b94:	4211      	tst	r1, r2
 8000b96:	d003      	beq.n	8000ba0 <__aeabi_fsub+0x24c>
 8000b98:	4661      	mov	r1, ip
 8000b9a:	4211      	tst	r1, r2
 8000b9c:	d100      	bne.n	8000ba0 <__aeabi_fsub+0x24c>
 8000b9e:	0033      	movs	r3, r6
 8000ba0:	24ff      	movs	r4, #255	; 0xff
 8000ba2:	e71d      	b.n	80009e0 <__aeabi_fsub+0x8c>
 8000ba4:	24ff      	movs	r4, #255	; 0xff
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	e72c      	b.n	8000a04 <__aeabi_fsub+0xb0>
 8000baa:	2c00      	cmp	r4, #0
 8000bac:	d1e9      	bne.n	8000b82 <__aeabi_fsub+0x22e>
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d063      	beq.n	8000c7a <__aeabi_fsub+0x326>
 8000bb2:	2e00      	cmp	r6, #0
 8000bb4:	d100      	bne.n	8000bb8 <__aeabi_fsub+0x264>
 8000bb6:	e713      	b.n	80009e0 <__aeabi_fsub+0x8c>
 8000bb8:	199b      	adds	r3, r3, r6
 8000bba:	015a      	lsls	r2, r3, #5
 8000bbc:	d400      	bmi.n	8000bc0 <__aeabi_fsub+0x26c>
 8000bbe:	e73e      	b.n	8000a3e <__aeabi_fsub+0xea>
 8000bc0:	4a31      	ldr	r2, [pc, #196]	; (8000c88 <__aeabi_fsub+0x334>)
 8000bc2:	000c      	movs	r4, r1
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	e70b      	b.n	80009e0 <__aeabi_fsub+0x8c>
 8000bc8:	2c00      	cmp	r4, #0
 8000bca:	d11e      	bne.n	8000c0a <__aeabi_fsub+0x2b6>
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d12f      	bne.n	8000c30 <__aeabi_fsub+0x2dc>
 8000bd0:	2e00      	cmp	r6, #0
 8000bd2:	d04f      	beq.n	8000c74 <__aeabi_fsub+0x320>
 8000bd4:	0033      	movs	r3, r6
 8000bd6:	000d      	movs	r5, r1
 8000bd8:	e702      	b.n	80009e0 <__aeabi_fsub+0x8c>
 8000bda:	2601      	movs	r6, #1
 8000bdc:	e755      	b.n	8000a8a <__aeabi_fsub+0x136>
 8000bde:	2c00      	cmp	r4, #0
 8000be0:	d11f      	bne.n	8000c22 <__aeabi_fsub+0x2ce>
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d043      	beq.n	8000c6e <__aeabi_fsub+0x31a>
 8000be6:	43c9      	mvns	r1, r1
 8000be8:	2900      	cmp	r1, #0
 8000bea:	d00b      	beq.n	8000c04 <__aeabi_fsub+0x2b0>
 8000bec:	28ff      	cmp	r0, #255	; 0xff
 8000bee:	d039      	beq.n	8000c64 <__aeabi_fsub+0x310>
 8000bf0:	291b      	cmp	r1, #27
 8000bf2:	dc44      	bgt.n	8000c7e <__aeabi_fsub+0x32a>
 8000bf4:	001c      	movs	r4, r3
 8000bf6:	2720      	movs	r7, #32
 8000bf8:	40cc      	lsrs	r4, r1
 8000bfa:	1a79      	subs	r1, r7, r1
 8000bfc:	408b      	lsls	r3, r1
 8000bfe:	1e59      	subs	r1, r3, #1
 8000c00:	418b      	sbcs	r3, r1
 8000c02:	4323      	orrs	r3, r4
 8000c04:	199b      	adds	r3, r3, r6
 8000c06:	0004      	movs	r4, r0
 8000c08:	e740      	b.n	8000a8c <__aeabi_fsub+0x138>
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d11a      	bne.n	8000c44 <__aeabi_fsub+0x2f0>
 8000c0e:	2e00      	cmp	r6, #0
 8000c10:	d124      	bne.n	8000c5c <__aeabi_fsub+0x308>
 8000c12:	2780      	movs	r7, #128	; 0x80
 8000c14:	2200      	movs	r2, #0
 8000c16:	03ff      	lsls	r7, r7, #15
 8000c18:	e71b      	b.n	8000a52 <__aeabi_fsub+0xfe>
 8000c1a:	0033      	movs	r3, r6
 8000c1c:	0004      	movs	r4, r0
 8000c1e:	000d      	movs	r5, r1
 8000c20:	e6de      	b.n	80009e0 <__aeabi_fsub+0x8c>
 8000c22:	28ff      	cmp	r0, #255	; 0xff
 8000c24:	d01e      	beq.n	8000c64 <__aeabi_fsub+0x310>
 8000c26:	2480      	movs	r4, #128	; 0x80
 8000c28:	04e4      	lsls	r4, r4, #19
 8000c2a:	4249      	negs	r1, r1
 8000c2c:	4323      	orrs	r3, r4
 8000c2e:	e7df      	b.n	8000bf0 <__aeabi_fsub+0x29c>
 8000c30:	2e00      	cmp	r6, #0
 8000c32:	d100      	bne.n	8000c36 <__aeabi_fsub+0x2e2>
 8000c34:	e6d4      	b.n	80009e0 <__aeabi_fsub+0x8c>
 8000c36:	1b9f      	subs	r7, r3, r6
 8000c38:	017a      	lsls	r2, r7, #5
 8000c3a:	d400      	bmi.n	8000c3e <__aeabi_fsub+0x2ea>
 8000c3c:	e737      	b.n	8000aae <__aeabi_fsub+0x15a>
 8000c3e:	1af3      	subs	r3, r6, r3
 8000c40:	000d      	movs	r5, r1
 8000c42:	e6cd      	b.n	80009e0 <__aeabi_fsub+0x8c>
 8000c44:	24ff      	movs	r4, #255	; 0xff
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	d100      	bne.n	8000c4c <__aeabi_fsub+0x2f8>
 8000c4a:	e6c9      	b.n	80009e0 <__aeabi_fsub+0x8c>
 8000c4c:	2280      	movs	r2, #128	; 0x80
 8000c4e:	4650      	mov	r0, sl
 8000c50:	03d2      	lsls	r2, r2, #15
 8000c52:	4210      	tst	r0, r2
 8000c54:	d0a4      	beq.n	8000ba0 <__aeabi_fsub+0x24c>
 8000c56:	4660      	mov	r0, ip
 8000c58:	4210      	tst	r0, r2
 8000c5a:	d1a1      	bne.n	8000ba0 <__aeabi_fsub+0x24c>
 8000c5c:	0033      	movs	r3, r6
 8000c5e:	000d      	movs	r5, r1
 8000c60:	24ff      	movs	r4, #255	; 0xff
 8000c62:	e6bd      	b.n	80009e0 <__aeabi_fsub+0x8c>
 8000c64:	0033      	movs	r3, r6
 8000c66:	24ff      	movs	r4, #255	; 0xff
 8000c68:	e6ba      	b.n	80009e0 <__aeabi_fsub+0x8c>
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e76e      	b.n	8000b4c <__aeabi_fsub+0x1f8>
 8000c6e:	0033      	movs	r3, r6
 8000c70:	0004      	movs	r4, r0
 8000c72:	e6b5      	b.n	80009e0 <__aeabi_fsub+0x8c>
 8000c74:	2700      	movs	r7, #0
 8000c76:	2200      	movs	r2, #0
 8000c78:	e71c      	b.n	8000ab4 <__aeabi_fsub+0x160>
 8000c7a:	0033      	movs	r3, r6
 8000c7c:	e6b0      	b.n	80009e0 <__aeabi_fsub+0x8c>
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e7c0      	b.n	8000c04 <__aeabi_fsub+0x2b0>
 8000c82:	46c0      	nop			; (mov r8, r8)
 8000c84:	7dffffff 	.word	0x7dffffff
 8000c88:	fbffffff 	.word	0xfbffffff

08000c8c <__aeabi_f2iz>:
 8000c8c:	0241      	lsls	r1, r0, #9
 8000c8e:	0043      	lsls	r3, r0, #1
 8000c90:	0fc2      	lsrs	r2, r0, #31
 8000c92:	0a49      	lsrs	r1, r1, #9
 8000c94:	0e1b      	lsrs	r3, r3, #24
 8000c96:	2000      	movs	r0, #0
 8000c98:	2b7e      	cmp	r3, #126	; 0x7e
 8000c9a:	dd0d      	ble.n	8000cb8 <__aeabi_f2iz+0x2c>
 8000c9c:	2b9d      	cmp	r3, #157	; 0x9d
 8000c9e:	dc0c      	bgt.n	8000cba <__aeabi_f2iz+0x2e>
 8000ca0:	2080      	movs	r0, #128	; 0x80
 8000ca2:	0400      	lsls	r0, r0, #16
 8000ca4:	4301      	orrs	r1, r0
 8000ca6:	2b95      	cmp	r3, #149	; 0x95
 8000ca8:	dc0a      	bgt.n	8000cc0 <__aeabi_f2iz+0x34>
 8000caa:	2096      	movs	r0, #150	; 0x96
 8000cac:	1ac3      	subs	r3, r0, r3
 8000cae:	40d9      	lsrs	r1, r3
 8000cb0:	4248      	negs	r0, r1
 8000cb2:	2a00      	cmp	r2, #0
 8000cb4:	d100      	bne.n	8000cb8 <__aeabi_f2iz+0x2c>
 8000cb6:	0008      	movs	r0, r1
 8000cb8:	4770      	bx	lr
 8000cba:	4b03      	ldr	r3, [pc, #12]	; (8000cc8 <__aeabi_f2iz+0x3c>)
 8000cbc:	18d0      	adds	r0, r2, r3
 8000cbe:	e7fb      	b.n	8000cb8 <__aeabi_f2iz+0x2c>
 8000cc0:	3b96      	subs	r3, #150	; 0x96
 8000cc2:	4099      	lsls	r1, r3
 8000cc4:	e7f4      	b.n	8000cb0 <__aeabi_f2iz+0x24>
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	7fffffff 	.word	0x7fffffff

08000ccc <__aeabi_i2f>:
 8000ccc:	b570      	push	{r4, r5, r6, lr}
 8000cce:	2800      	cmp	r0, #0
 8000cd0:	d030      	beq.n	8000d34 <__aeabi_i2f+0x68>
 8000cd2:	17c3      	asrs	r3, r0, #31
 8000cd4:	18c4      	adds	r4, r0, r3
 8000cd6:	405c      	eors	r4, r3
 8000cd8:	0fc5      	lsrs	r5, r0, #31
 8000cda:	0020      	movs	r0, r4
 8000cdc:	f000 f998 	bl	8001010 <__clzsi2>
 8000ce0:	239e      	movs	r3, #158	; 0x9e
 8000ce2:	1a1b      	subs	r3, r3, r0
 8000ce4:	2b96      	cmp	r3, #150	; 0x96
 8000ce6:	dc0d      	bgt.n	8000d04 <__aeabi_i2f+0x38>
 8000ce8:	2296      	movs	r2, #150	; 0x96
 8000cea:	1ad2      	subs	r2, r2, r3
 8000cec:	4094      	lsls	r4, r2
 8000cee:	002a      	movs	r2, r5
 8000cf0:	0264      	lsls	r4, r4, #9
 8000cf2:	0a64      	lsrs	r4, r4, #9
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	0264      	lsls	r4, r4, #9
 8000cf8:	05db      	lsls	r3, r3, #23
 8000cfa:	0a60      	lsrs	r0, r4, #9
 8000cfc:	07d2      	lsls	r2, r2, #31
 8000cfe:	4318      	orrs	r0, r3
 8000d00:	4310      	orrs	r0, r2
 8000d02:	bd70      	pop	{r4, r5, r6, pc}
 8000d04:	2b99      	cmp	r3, #153	; 0x99
 8000d06:	dc19      	bgt.n	8000d3c <__aeabi_i2f+0x70>
 8000d08:	2299      	movs	r2, #153	; 0x99
 8000d0a:	1ad2      	subs	r2, r2, r3
 8000d0c:	2a00      	cmp	r2, #0
 8000d0e:	dd29      	ble.n	8000d64 <__aeabi_i2f+0x98>
 8000d10:	4094      	lsls	r4, r2
 8000d12:	0022      	movs	r2, r4
 8000d14:	4c14      	ldr	r4, [pc, #80]	; (8000d68 <__aeabi_i2f+0x9c>)
 8000d16:	4014      	ands	r4, r2
 8000d18:	0751      	lsls	r1, r2, #29
 8000d1a:	d004      	beq.n	8000d26 <__aeabi_i2f+0x5a>
 8000d1c:	210f      	movs	r1, #15
 8000d1e:	400a      	ands	r2, r1
 8000d20:	2a04      	cmp	r2, #4
 8000d22:	d000      	beq.n	8000d26 <__aeabi_i2f+0x5a>
 8000d24:	3404      	adds	r4, #4
 8000d26:	0162      	lsls	r2, r4, #5
 8000d28:	d413      	bmi.n	8000d52 <__aeabi_i2f+0x86>
 8000d2a:	01a4      	lsls	r4, r4, #6
 8000d2c:	0a64      	lsrs	r4, r4, #9
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	002a      	movs	r2, r5
 8000d32:	e7e0      	b.n	8000cf6 <__aeabi_i2f+0x2a>
 8000d34:	2200      	movs	r2, #0
 8000d36:	2300      	movs	r3, #0
 8000d38:	2400      	movs	r4, #0
 8000d3a:	e7dc      	b.n	8000cf6 <__aeabi_i2f+0x2a>
 8000d3c:	2205      	movs	r2, #5
 8000d3e:	0021      	movs	r1, r4
 8000d40:	1a12      	subs	r2, r2, r0
 8000d42:	40d1      	lsrs	r1, r2
 8000d44:	22b9      	movs	r2, #185	; 0xb9
 8000d46:	1ad2      	subs	r2, r2, r3
 8000d48:	4094      	lsls	r4, r2
 8000d4a:	1e62      	subs	r2, r4, #1
 8000d4c:	4194      	sbcs	r4, r2
 8000d4e:	430c      	orrs	r4, r1
 8000d50:	e7da      	b.n	8000d08 <__aeabi_i2f+0x3c>
 8000d52:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <__aeabi_i2f+0x9c>)
 8000d54:	002a      	movs	r2, r5
 8000d56:	401c      	ands	r4, r3
 8000d58:	239f      	movs	r3, #159	; 0x9f
 8000d5a:	01a4      	lsls	r4, r4, #6
 8000d5c:	1a1b      	subs	r3, r3, r0
 8000d5e:	0a64      	lsrs	r4, r4, #9
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	e7c8      	b.n	8000cf6 <__aeabi_i2f+0x2a>
 8000d64:	0022      	movs	r2, r4
 8000d66:	e7d5      	b.n	8000d14 <__aeabi_i2f+0x48>
 8000d68:	fbffffff 	.word	0xfbffffff

08000d6c <__eqdf2>:
 8000d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d6e:	464f      	mov	r7, r9
 8000d70:	4646      	mov	r6, r8
 8000d72:	46d6      	mov	lr, sl
 8000d74:	005c      	lsls	r4, r3, #1
 8000d76:	b5c0      	push	{r6, r7, lr}
 8000d78:	031f      	lsls	r7, r3, #12
 8000d7a:	0fdb      	lsrs	r3, r3, #31
 8000d7c:	469a      	mov	sl, r3
 8000d7e:	4b17      	ldr	r3, [pc, #92]	; (8000ddc <__eqdf2+0x70>)
 8000d80:	030e      	lsls	r6, r1, #12
 8000d82:	004d      	lsls	r5, r1, #1
 8000d84:	4684      	mov	ip, r0
 8000d86:	4680      	mov	r8, r0
 8000d88:	0b36      	lsrs	r6, r6, #12
 8000d8a:	0d6d      	lsrs	r5, r5, #21
 8000d8c:	0fc9      	lsrs	r1, r1, #31
 8000d8e:	4691      	mov	r9, r2
 8000d90:	0b3f      	lsrs	r7, r7, #12
 8000d92:	0d64      	lsrs	r4, r4, #21
 8000d94:	2001      	movs	r0, #1
 8000d96:	429d      	cmp	r5, r3
 8000d98:	d008      	beq.n	8000dac <__eqdf2+0x40>
 8000d9a:	429c      	cmp	r4, r3
 8000d9c:	d001      	beq.n	8000da2 <__eqdf2+0x36>
 8000d9e:	42a5      	cmp	r5, r4
 8000da0:	d00b      	beq.n	8000dba <__eqdf2+0x4e>
 8000da2:	bc1c      	pop	{r2, r3, r4}
 8000da4:	4690      	mov	r8, r2
 8000da6:	4699      	mov	r9, r3
 8000da8:	46a2      	mov	sl, r4
 8000daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dac:	4663      	mov	r3, ip
 8000dae:	4333      	orrs	r3, r6
 8000db0:	d1f7      	bne.n	8000da2 <__eqdf2+0x36>
 8000db2:	42ac      	cmp	r4, r5
 8000db4:	d1f5      	bne.n	8000da2 <__eqdf2+0x36>
 8000db6:	433a      	orrs	r2, r7
 8000db8:	d1f3      	bne.n	8000da2 <__eqdf2+0x36>
 8000dba:	2001      	movs	r0, #1
 8000dbc:	42be      	cmp	r6, r7
 8000dbe:	d1f0      	bne.n	8000da2 <__eqdf2+0x36>
 8000dc0:	45c8      	cmp	r8, r9
 8000dc2:	d1ee      	bne.n	8000da2 <__eqdf2+0x36>
 8000dc4:	4551      	cmp	r1, sl
 8000dc6:	d007      	beq.n	8000dd8 <__eqdf2+0x6c>
 8000dc8:	2d00      	cmp	r5, #0
 8000dca:	d1ea      	bne.n	8000da2 <__eqdf2+0x36>
 8000dcc:	4663      	mov	r3, ip
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	0030      	movs	r0, r6
 8000dd2:	1e46      	subs	r6, r0, #1
 8000dd4:	41b0      	sbcs	r0, r6
 8000dd6:	e7e4      	b.n	8000da2 <__eqdf2+0x36>
 8000dd8:	2000      	movs	r0, #0
 8000dda:	e7e2      	b.n	8000da2 <__eqdf2+0x36>
 8000ddc:	000007ff 	.word	0x000007ff

08000de0 <__gedf2>:
 8000de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000de2:	4645      	mov	r5, r8
 8000de4:	46de      	mov	lr, fp
 8000de6:	4657      	mov	r7, sl
 8000de8:	464e      	mov	r6, r9
 8000dea:	b5e0      	push	{r5, r6, r7, lr}
 8000dec:	031f      	lsls	r7, r3, #12
 8000dee:	0b3d      	lsrs	r5, r7, #12
 8000df0:	4f2c      	ldr	r7, [pc, #176]	; (8000ea4 <__gedf2+0xc4>)
 8000df2:	030e      	lsls	r6, r1, #12
 8000df4:	004c      	lsls	r4, r1, #1
 8000df6:	46ab      	mov	fp, r5
 8000df8:	005d      	lsls	r5, r3, #1
 8000dfa:	4684      	mov	ip, r0
 8000dfc:	0b36      	lsrs	r6, r6, #12
 8000dfe:	0d64      	lsrs	r4, r4, #21
 8000e00:	0fc9      	lsrs	r1, r1, #31
 8000e02:	4690      	mov	r8, r2
 8000e04:	0d6d      	lsrs	r5, r5, #21
 8000e06:	0fdb      	lsrs	r3, r3, #31
 8000e08:	42bc      	cmp	r4, r7
 8000e0a:	d02a      	beq.n	8000e62 <__gedf2+0x82>
 8000e0c:	4f25      	ldr	r7, [pc, #148]	; (8000ea4 <__gedf2+0xc4>)
 8000e0e:	42bd      	cmp	r5, r7
 8000e10:	d02d      	beq.n	8000e6e <__gedf2+0x8e>
 8000e12:	2c00      	cmp	r4, #0
 8000e14:	d10f      	bne.n	8000e36 <__gedf2+0x56>
 8000e16:	4330      	orrs	r0, r6
 8000e18:	0007      	movs	r7, r0
 8000e1a:	4681      	mov	r9, r0
 8000e1c:	4278      	negs	r0, r7
 8000e1e:	4178      	adcs	r0, r7
 8000e20:	b2c0      	uxtb	r0, r0
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d117      	bne.n	8000e56 <__gedf2+0x76>
 8000e26:	465f      	mov	r7, fp
 8000e28:	433a      	orrs	r2, r7
 8000e2a:	d114      	bne.n	8000e56 <__gedf2+0x76>
 8000e2c:	464b      	mov	r3, r9
 8000e2e:	2000      	movs	r0, #0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d00a      	beq.n	8000e4a <__gedf2+0x6a>
 8000e34:	e006      	b.n	8000e44 <__gedf2+0x64>
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	d102      	bne.n	8000e40 <__gedf2+0x60>
 8000e3a:	4658      	mov	r0, fp
 8000e3c:	4302      	orrs	r2, r0
 8000e3e:	d001      	beq.n	8000e44 <__gedf2+0x64>
 8000e40:	4299      	cmp	r1, r3
 8000e42:	d018      	beq.n	8000e76 <__gedf2+0x96>
 8000e44:	4248      	negs	r0, r1
 8000e46:	2101      	movs	r1, #1
 8000e48:	4308      	orrs	r0, r1
 8000e4a:	bc3c      	pop	{r2, r3, r4, r5}
 8000e4c:	4690      	mov	r8, r2
 8000e4e:	4699      	mov	r9, r3
 8000e50:	46a2      	mov	sl, r4
 8000e52:	46ab      	mov	fp, r5
 8000e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e56:	2800      	cmp	r0, #0
 8000e58:	d0f2      	beq.n	8000e40 <__gedf2+0x60>
 8000e5a:	2001      	movs	r0, #1
 8000e5c:	3b01      	subs	r3, #1
 8000e5e:	4318      	orrs	r0, r3
 8000e60:	e7f3      	b.n	8000e4a <__gedf2+0x6a>
 8000e62:	0037      	movs	r7, r6
 8000e64:	4307      	orrs	r7, r0
 8000e66:	d0d1      	beq.n	8000e0c <__gedf2+0x2c>
 8000e68:	2002      	movs	r0, #2
 8000e6a:	4240      	negs	r0, r0
 8000e6c:	e7ed      	b.n	8000e4a <__gedf2+0x6a>
 8000e6e:	465f      	mov	r7, fp
 8000e70:	4317      	orrs	r7, r2
 8000e72:	d0ce      	beq.n	8000e12 <__gedf2+0x32>
 8000e74:	e7f8      	b.n	8000e68 <__gedf2+0x88>
 8000e76:	42ac      	cmp	r4, r5
 8000e78:	dce4      	bgt.n	8000e44 <__gedf2+0x64>
 8000e7a:	da03      	bge.n	8000e84 <__gedf2+0xa4>
 8000e7c:	1e48      	subs	r0, r1, #1
 8000e7e:	2101      	movs	r1, #1
 8000e80:	4308      	orrs	r0, r1
 8000e82:	e7e2      	b.n	8000e4a <__gedf2+0x6a>
 8000e84:	455e      	cmp	r6, fp
 8000e86:	d8dd      	bhi.n	8000e44 <__gedf2+0x64>
 8000e88:	d006      	beq.n	8000e98 <__gedf2+0xb8>
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	455e      	cmp	r6, fp
 8000e8e:	d2dc      	bcs.n	8000e4a <__gedf2+0x6a>
 8000e90:	2301      	movs	r3, #1
 8000e92:	1e48      	subs	r0, r1, #1
 8000e94:	4318      	orrs	r0, r3
 8000e96:	e7d8      	b.n	8000e4a <__gedf2+0x6a>
 8000e98:	45c4      	cmp	ip, r8
 8000e9a:	d8d3      	bhi.n	8000e44 <__gedf2+0x64>
 8000e9c:	2000      	movs	r0, #0
 8000e9e:	45c4      	cmp	ip, r8
 8000ea0:	d3f6      	bcc.n	8000e90 <__gedf2+0xb0>
 8000ea2:	e7d2      	b.n	8000e4a <__gedf2+0x6a>
 8000ea4:	000007ff 	.word	0x000007ff

08000ea8 <__ledf2>:
 8000ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eaa:	464e      	mov	r6, r9
 8000eac:	4645      	mov	r5, r8
 8000eae:	46de      	mov	lr, fp
 8000eb0:	4657      	mov	r7, sl
 8000eb2:	005c      	lsls	r4, r3, #1
 8000eb4:	b5e0      	push	{r5, r6, r7, lr}
 8000eb6:	031f      	lsls	r7, r3, #12
 8000eb8:	0fdb      	lsrs	r3, r3, #31
 8000eba:	4699      	mov	r9, r3
 8000ebc:	4b2a      	ldr	r3, [pc, #168]	; (8000f68 <__ledf2+0xc0>)
 8000ebe:	030e      	lsls	r6, r1, #12
 8000ec0:	004d      	lsls	r5, r1, #1
 8000ec2:	0fc9      	lsrs	r1, r1, #31
 8000ec4:	4684      	mov	ip, r0
 8000ec6:	0b36      	lsrs	r6, r6, #12
 8000ec8:	0d6d      	lsrs	r5, r5, #21
 8000eca:	468b      	mov	fp, r1
 8000ecc:	4690      	mov	r8, r2
 8000ece:	0b3f      	lsrs	r7, r7, #12
 8000ed0:	0d64      	lsrs	r4, r4, #21
 8000ed2:	429d      	cmp	r5, r3
 8000ed4:	d020      	beq.n	8000f18 <__ledf2+0x70>
 8000ed6:	4b24      	ldr	r3, [pc, #144]	; (8000f68 <__ledf2+0xc0>)
 8000ed8:	429c      	cmp	r4, r3
 8000eda:	d022      	beq.n	8000f22 <__ledf2+0x7a>
 8000edc:	2d00      	cmp	r5, #0
 8000ede:	d112      	bne.n	8000f06 <__ledf2+0x5e>
 8000ee0:	4330      	orrs	r0, r6
 8000ee2:	4243      	negs	r3, r0
 8000ee4:	4143      	adcs	r3, r0
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	2c00      	cmp	r4, #0
 8000eea:	d01f      	beq.n	8000f2c <__ledf2+0x84>
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d00c      	beq.n	8000f0a <__ledf2+0x62>
 8000ef0:	464b      	mov	r3, r9
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	3b01      	subs	r3, #1
 8000ef6:	4303      	orrs	r3, r0
 8000ef8:	0018      	movs	r0, r3
 8000efa:	bc3c      	pop	{r2, r3, r4, r5}
 8000efc:	4690      	mov	r8, r2
 8000efe:	4699      	mov	r9, r3
 8000f00:	46a2      	mov	sl, r4
 8000f02:	46ab      	mov	fp, r5
 8000f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f06:	2c00      	cmp	r4, #0
 8000f08:	d016      	beq.n	8000f38 <__ledf2+0x90>
 8000f0a:	45cb      	cmp	fp, r9
 8000f0c:	d017      	beq.n	8000f3e <__ledf2+0x96>
 8000f0e:	465b      	mov	r3, fp
 8000f10:	4259      	negs	r1, r3
 8000f12:	2301      	movs	r3, #1
 8000f14:	430b      	orrs	r3, r1
 8000f16:	e7ef      	b.n	8000ef8 <__ledf2+0x50>
 8000f18:	0031      	movs	r1, r6
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	4301      	orrs	r1, r0
 8000f1e:	d1eb      	bne.n	8000ef8 <__ledf2+0x50>
 8000f20:	e7d9      	b.n	8000ed6 <__ledf2+0x2e>
 8000f22:	0039      	movs	r1, r7
 8000f24:	2302      	movs	r3, #2
 8000f26:	4311      	orrs	r1, r2
 8000f28:	d1e6      	bne.n	8000ef8 <__ledf2+0x50>
 8000f2a:	e7d7      	b.n	8000edc <__ledf2+0x34>
 8000f2c:	433a      	orrs	r2, r7
 8000f2e:	d1dd      	bne.n	8000eec <__ledf2+0x44>
 8000f30:	2300      	movs	r3, #0
 8000f32:	2800      	cmp	r0, #0
 8000f34:	d0e0      	beq.n	8000ef8 <__ledf2+0x50>
 8000f36:	e7ea      	b.n	8000f0e <__ledf2+0x66>
 8000f38:	433a      	orrs	r2, r7
 8000f3a:	d1e6      	bne.n	8000f0a <__ledf2+0x62>
 8000f3c:	e7e7      	b.n	8000f0e <__ledf2+0x66>
 8000f3e:	42a5      	cmp	r5, r4
 8000f40:	dce5      	bgt.n	8000f0e <__ledf2+0x66>
 8000f42:	db05      	blt.n	8000f50 <__ledf2+0xa8>
 8000f44:	42be      	cmp	r6, r7
 8000f46:	d8e2      	bhi.n	8000f0e <__ledf2+0x66>
 8000f48:	d007      	beq.n	8000f5a <__ledf2+0xb2>
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	42be      	cmp	r6, r7
 8000f4e:	d2d3      	bcs.n	8000ef8 <__ledf2+0x50>
 8000f50:	4659      	mov	r1, fp
 8000f52:	2301      	movs	r3, #1
 8000f54:	3901      	subs	r1, #1
 8000f56:	430b      	orrs	r3, r1
 8000f58:	e7ce      	b.n	8000ef8 <__ledf2+0x50>
 8000f5a:	45c4      	cmp	ip, r8
 8000f5c:	d8d7      	bhi.n	8000f0e <__ledf2+0x66>
 8000f5e:	2300      	movs	r3, #0
 8000f60:	45c4      	cmp	ip, r8
 8000f62:	d3f5      	bcc.n	8000f50 <__ledf2+0xa8>
 8000f64:	e7c8      	b.n	8000ef8 <__ledf2+0x50>
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	000007ff 	.word	0x000007ff

08000f6c <__aeabi_f2d>:
 8000f6c:	0041      	lsls	r1, r0, #1
 8000f6e:	0e09      	lsrs	r1, r1, #24
 8000f70:	1c4b      	adds	r3, r1, #1
 8000f72:	b570      	push	{r4, r5, r6, lr}
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	0246      	lsls	r6, r0, #9
 8000f78:	0a75      	lsrs	r5, r6, #9
 8000f7a:	0fc4      	lsrs	r4, r0, #31
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	dd14      	ble.n	8000faa <__aeabi_f2d+0x3e>
 8000f80:	23e0      	movs	r3, #224	; 0xe0
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	076d      	lsls	r5, r5, #29
 8000f86:	0b36      	lsrs	r6, r6, #12
 8000f88:	18cb      	adds	r3, r1, r3
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	0d0a      	lsrs	r2, r1, #20
 8000f8e:	0028      	movs	r0, r5
 8000f90:	0512      	lsls	r2, r2, #20
 8000f92:	4d1c      	ldr	r5, [pc, #112]	; (8001004 <__aeabi_f2d+0x98>)
 8000f94:	4332      	orrs	r2, r6
 8000f96:	055b      	lsls	r3, r3, #21
 8000f98:	402a      	ands	r2, r5
 8000f9a:	085b      	lsrs	r3, r3, #1
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	07e4      	lsls	r4, r4, #31
 8000fa2:	085b      	lsrs	r3, r3, #1
 8000fa4:	4323      	orrs	r3, r4
 8000fa6:	0019      	movs	r1, r3
 8000fa8:	bd70      	pop	{r4, r5, r6, pc}
 8000faa:	2900      	cmp	r1, #0
 8000fac:	d114      	bne.n	8000fd8 <__aeabi_f2d+0x6c>
 8000fae:	2d00      	cmp	r5, #0
 8000fb0:	d01e      	beq.n	8000ff0 <__aeabi_f2d+0x84>
 8000fb2:	0028      	movs	r0, r5
 8000fb4:	f000 f82c 	bl	8001010 <__clzsi2>
 8000fb8:	280a      	cmp	r0, #10
 8000fba:	dc1c      	bgt.n	8000ff6 <__aeabi_f2d+0x8a>
 8000fbc:	230b      	movs	r3, #11
 8000fbe:	002a      	movs	r2, r5
 8000fc0:	1a1b      	subs	r3, r3, r0
 8000fc2:	40da      	lsrs	r2, r3
 8000fc4:	0003      	movs	r3, r0
 8000fc6:	3315      	adds	r3, #21
 8000fc8:	409d      	lsls	r5, r3
 8000fca:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <__aeabi_f2d+0x9c>)
 8000fcc:	0312      	lsls	r2, r2, #12
 8000fce:	1a1b      	subs	r3, r3, r0
 8000fd0:	055b      	lsls	r3, r3, #21
 8000fd2:	0b16      	lsrs	r6, r2, #12
 8000fd4:	0d5b      	lsrs	r3, r3, #21
 8000fd6:	e7d8      	b.n	8000f8a <__aeabi_f2d+0x1e>
 8000fd8:	2d00      	cmp	r5, #0
 8000fda:	d006      	beq.n	8000fea <__aeabi_f2d+0x7e>
 8000fdc:	0b32      	lsrs	r2, r6, #12
 8000fde:	2680      	movs	r6, #128	; 0x80
 8000fe0:	0336      	lsls	r6, r6, #12
 8000fe2:	076d      	lsls	r5, r5, #29
 8000fe4:	4316      	orrs	r6, r2
 8000fe6:	4b09      	ldr	r3, [pc, #36]	; (800100c <__aeabi_f2d+0xa0>)
 8000fe8:	e7cf      	b.n	8000f8a <__aeabi_f2d+0x1e>
 8000fea:	4b08      	ldr	r3, [pc, #32]	; (800100c <__aeabi_f2d+0xa0>)
 8000fec:	2600      	movs	r6, #0
 8000fee:	e7cc      	b.n	8000f8a <__aeabi_f2d+0x1e>
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	2600      	movs	r6, #0
 8000ff4:	e7c9      	b.n	8000f8a <__aeabi_f2d+0x1e>
 8000ff6:	0003      	movs	r3, r0
 8000ff8:	002a      	movs	r2, r5
 8000ffa:	3b0b      	subs	r3, #11
 8000ffc:	409a      	lsls	r2, r3
 8000ffe:	2500      	movs	r5, #0
 8001000:	e7e3      	b.n	8000fca <__aeabi_f2d+0x5e>
 8001002:	46c0      	nop			; (mov r8, r8)
 8001004:	800fffff 	.word	0x800fffff
 8001008:	00000389 	.word	0x00000389
 800100c:	000007ff 	.word	0x000007ff

08001010 <__clzsi2>:
 8001010:	211c      	movs	r1, #28
 8001012:	2301      	movs	r3, #1
 8001014:	041b      	lsls	r3, r3, #16
 8001016:	4298      	cmp	r0, r3
 8001018:	d301      	bcc.n	800101e <__clzsi2+0xe>
 800101a:	0c00      	lsrs	r0, r0, #16
 800101c:	3910      	subs	r1, #16
 800101e:	0a1b      	lsrs	r3, r3, #8
 8001020:	4298      	cmp	r0, r3
 8001022:	d301      	bcc.n	8001028 <__clzsi2+0x18>
 8001024:	0a00      	lsrs	r0, r0, #8
 8001026:	3908      	subs	r1, #8
 8001028:	091b      	lsrs	r3, r3, #4
 800102a:	4298      	cmp	r0, r3
 800102c:	d301      	bcc.n	8001032 <__clzsi2+0x22>
 800102e:	0900      	lsrs	r0, r0, #4
 8001030:	3904      	subs	r1, #4
 8001032:	a202      	add	r2, pc, #8	; (adr r2, 800103c <__clzsi2+0x2c>)
 8001034:	5c10      	ldrb	r0, [r2, r0]
 8001036:	1840      	adds	r0, r0, r1
 8001038:	4770      	bx	lr
 800103a:	46c0      	nop			; (mov r8, r8)
 800103c:	02020304 	.word	0x02020304
 8001040:	01010101 	.word	0x01010101
	...

0800104c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800104c:	b510      	push	{r4, lr}
 800104e:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8001050:	f000 ffac 	bl	8001fac <HAL_RCC_GetHCLKFreq>
 8001054:	21fa      	movs	r1, #250	; 0xfa
 8001056:	0089      	lsls	r1, r1, #2
 8001058:	f7ff f860 	bl	800011c <__udivsi3>
 800105c:	f000 f9fe 	bl	800145c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8001060:	2001      	movs	r0, #1
 8001062:	2200      	movs	r2, #0
 8001064:	0021      	movs	r1, r4
 8001066:	4240      	negs	r0, r0
 8001068:	f000 f9c8 	bl	80013fc <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800106c:	2000      	movs	r0, #0
 800106e:	bd10      	pop	{r4, pc}

08001070 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001070:	2310      	movs	r3, #16
 8001072:	4a06      	ldr	r2, [pc, #24]	; (800108c <HAL_Init+0x1c>)
{
 8001074:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001076:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8001078:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800107a:	430b      	orrs	r3, r1
 800107c:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800107e:	f7ff ffe5 	bl	800104c <HAL_InitTick>
  HAL_MspInit();
 8001082:	f001 ff11 	bl	8002ea8 <HAL_MspInit>
}
 8001086:	2000      	movs	r0, #0
 8001088:	bd10      	pop	{r4, pc}
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	40022000 	.word	0x40022000

08001090 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8001090:	4a02      	ldr	r2, [pc, #8]	; (800109c <HAL_IncTick+0xc>)
 8001092:	6813      	ldr	r3, [r2, #0]
 8001094:	3301      	adds	r3, #1
 8001096:	6013      	str	r3, [r2, #0]
}
 8001098:	4770      	bx	lr
 800109a:	46c0      	nop			; (mov r8, r8)
 800109c:	20000024 	.word	0x20000024

080010a0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80010a0:	4b01      	ldr	r3, [pc, #4]	; (80010a8 <HAL_GetTick+0x8>)
 80010a2:	6818      	ldr	r0, [r3, #0]
}
 80010a4:	4770      	bx	lr
 80010a6:	46c0      	nop			; (mov r8, r8)
 80010a8:	20000024 	.word	0x20000024

080010ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80010ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80010ae:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 80010b0:	f7ff fff6 	bl	80010a0 <HAL_GetTick>
  uint32_t wait = Delay;
 80010b4:	9c01      	ldr	r4, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 80010b6:	0005      	movs	r5, r0
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
     wait++;
 80010b8:	1c63      	adds	r3, r4, #1
 80010ba:	1e5a      	subs	r2, r3, #1
 80010bc:	4193      	sbcs	r3, r2
 80010be:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80010c0:	f7ff ffee 	bl	80010a0 <HAL_GetTick>
 80010c4:	1b40      	subs	r0, r0, r5
 80010c6:	42a0      	cmp	r0, r4
 80010c8:	d3fa      	bcc.n	80010c0 <HAL_Delay+0x14>
  {
  }
}
 80010ca:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

080010cc <ADC_Enable>:
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 80010cc:	2300      	movs	r3, #0
{
 80010ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80010d0:	2103      	movs	r1, #3
  __IO uint32_t wait_loop_index = 0U;
 80010d2:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80010d4:	6803      	ldr	r3, [r0, #0]
{
 80010d6:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80010d8:	689a      	ldr	r2, [r3, #8]
 80010da:	400a      	ands	r2, r1
 80010dc:	2a01      	cmp	r2, #1
 80010de:	d107      	bne.n	80010f0 <ADC_Enable+0x24>
 80010e0:	6819      	ldr	r1, [r3, #0]
 80010e2:	4211      	tst	r1, r2
 80010e4:	d001      	beq.n	80010ea <ADC_Enable+0x1e>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80010e6:	2000      	movs	r0, #0
}
 80010e8:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80010ea:	68da      	ldr	r2, [r3, #12]
 80010ec:	0412      	lsls	r2, r2, #16
 80010ee:	d4fa      	bmi.n	80010e6 <ADC_Enable+0x1a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80010f0:	6899      	ldr	r1, [r3, #8]
 80010f2:	4a19      	ldr	r2, [pc, #100]	; (8001158 <ADC_Enable+0x8c>)
 80010f4:	4211      	tst	r1, r2
 80010f6:	d008      	beq.n	800110a <ADC_Enable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010f8:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010fa:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010fc:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80010fe:	4313      	orrs	r3, r2
 8001100:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001102:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001104:	4303      	orrs	r3, r0
 8001106:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 8001108:	e7ee      	b.n	80010e8 <ADC_Enable+0x1c>
    __HAL_ADC_ENABLE(hadc);
 800110a:	2201      	movs	r2, #1
 800110c:	6899      	ldr	r1, [r3, #8]
 800110e:	430a      	orrs	r2, r1
 8001110:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001112:	4b12      	ldr	r3, [pc, #72]	; (800115c <ADC_Enable+0x90>)
 8001114:	4912      	ldr	r1, [pc, #72]	; (8001160 <ADC_Enable+0x94>)
 8001116:	6818      	ldr	r0, [r3, #0]
 8001118:	f7ff f800 	bl	800011c <__udivsi3>
 800111c:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 800111e:	9b01      	ldr	r3, [sp, #4]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d115      	bne.n	8001150 <ADC_Enable+0x84>
    tickstart = HAL_GetTick();
 8001124:	f7ff ffbc 	bl	80010a0 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001128:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 800112a:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800112c:	6823      	ldr	r3, [r4, #0]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	422b      	tst	r3, r5
 8001132:	d1d8      	bne.n	80010e6 <ADC_Enable+0x1a>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001134:	f7ff ffb4 	bl	80010a0 <HAL_GetTick>
 8001138:	1b80      	subs	r0, r0, r6
 800113a:	2802      	cmp	r0, #2
 800113c:	d9f6      	bls.n	800112c <ADC_Enable+0x60>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800113e:	2310      	movs	r3, #16
 8001140:	6c62      	ldr	r2, [r4, #68]	; 0x44
        return HAL_ERROR;
 8001142:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001144:	4313      	orrs	r3, r2
 8001146:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001148:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800114a:	432b      	orrs	r3, r5
 800114c:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 800114e:	e7cb      	b.n	80010e8 <ADC_Enable+0x1c>
      wait_loop_index--;
 8001150:	9b01      	ldr	r3, [sp, #4]
 8001152:	3b01      	subs	r3, #1
 8001154:	9301      	str	r3, [sp, #4]
 8001156:	e7e2      	b.n	800111e <ADC_Enable+0x52>
 8001158:	80000017 	.word	0x80000017
 800115c:	20000000 	.word	0x20000000
 8001160:	000f4240 	.word	0x000f4240

08001164 <HAL_ADC_Init>:
{
 8001164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001166:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001168:	2001      	movs	r0, #1
  if(hadc == NULL)
 800116a:	2c00      	cmp	r4, #0
 800116c:	d072      	beq.n	8001254 <HAL_ADC_Init+0xf0>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800116e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001170:	2b00      	cmp	r3, #0
 8001172:	d106      	bne.n	8001182 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 8001174:	0022      	movs	r2, r4
 8001176:	3240      	adds	r2, #64	; 0x40
    ADC_CLEAR_ERRORCODE(hadc);
 8001178:	64a3      	str	r3, [r4, #72]	; 0x48
    HAL_ADC_MspInit(hadc);
 800117a:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 800117c:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 800117e:	f001 febb 	bl	8002ef8 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001182:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001184:	06db      	lsls	r3, r3, #27
 8001186:	d500      	bpl.n	800118a <HAL_ADC_Init+0x26>
 8001188:	e079      	b.n	800127e <HAL_ADC_Init+0x11a>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800118a:	2204      	movs	r2, #4
 800118c:	6823      	ldr	r3, [r4, #0]
 800118e:	6898      	ldr	r0, [r3, #8]
 8001190:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001192:	d000      	beq.n	8001196 <HAL_ADC_Init+0x32>
 8001194:	e073      	b.n	800127e <HAL_ADC_Init+0x11a>
    ADC_STATE_CLR_SET(hadc->State,
 8001196:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001198:	4942      	ldr	r1, [pc, #264]	; (80012a4 <HAL_ADC_Init+0x140>)
 800119a:	4011      	ands	r1, r2
 800119c:	2202      	movs	r2, #2
 800119e:	430a      	orrs	r2, r1
    if (ADC_IS_ENABLE(hadc) == RESET)
 80011a0:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 80011a2:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 80011a4:	689a      	ldr	r2, [r3, #8]
 80011a6:	400a      	ands	r2, r1
 80011a8:	2a01      	cmp	r2, #1
 80011aa:	d000      	beq.n	80011ae <HAL_ADC_Init+0x4a>
 80011ac:	e06d      	b.n	800128a <HAL_ADC_Init+0x126>
 80011ae:	6819      	ldr	r1, [r3, #0]
 80011b0:	4211      	tst	r1, r2
 80011b2:	d102      	bne.n	80011ba <HAL_ADC_Init+0x56>
 80011b4:	68da      	ldr	r2, [r3, #12]
 80011b6:	0412      	lsls	r2, r2, #16
 80011b8:	d567      	bpl.n	800128a <HAL_ADC_Init+0x126>
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80011ba:	68da      	ldr	r2, [r3, #12]
 80011bc:	493a      	ldr	r1, [pc, #232]	; (80012a8 <HAL_ADC_Init+0x144>)
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 80011be:	6a25      	ldr	r5, [r4, #32]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80011c0:	400a      	ands	r2, r1
 80011c2:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80011c4:	69a2      	ldr	r2, [r4, #24]
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 80011c6:	036f      	lsls	r7, r5, #13
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80011c8:	0391      	lsls	r1, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 80011ca:	69e2      	ldr	r2, [r4, #28]
 80011cc:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80011ce:	4311      	orrs	r1, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 80011d0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80011d2:	3a01      	subs	r2, #1
 80011d4:	1e56      	subs	r6, r2, #1
 80011d6:	41b2      	sbcs	r2, r6
 80011d8:	0316      	lsls	r6, r2, #12
 80011da:	68e2      	ldr	r2, [r4, #12]
 80011dc:	4311      	orrs	r1, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80011de:	6922      	ldr	r2, [r4, #16]
 80011e0:	430f      	orrs	r7, r1
 80011e2:	2a02      	cmp	r2, #2
 80011e4:	d100      	bne.n	80011e8 <HAL_ADC_Init+0x84>
 80011e6:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 80011e8:	6b22      	ldr	r2, [r4, #48]	; 0x30
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011ea:	6a61      	ldr	r1, [r4, #36]	; 0x24
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 80011ec:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80011ee:	433a      	orrs	r2, r7
 80011f0:	4332      	orrs	r2, r6
 80011f2:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011f4:	2901      	cmp	r1, #1
 80011f6:	d104      	bne.n	8001202 <HAL_ADC_Init+0x9e>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80011f8:	2d00      	cmp	r5, #0
 80011fa:	d12c      	bne.n	8001256 <HAL_ADC_Init+0xf2>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80011fc:	2180      	movs	r1, #128	; 0x80
 80011fe:	0249      	lsls	r1, r1, #9
 8001200:	430a      	orrs	r2, r1
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001202:	20c2      	movs	r0, #194	; 0xc2
 8001204:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001206:	30ff      	adds	r0, #255	; 0xff
 8001208:	4281      	cmp	r1, r0
 800120a:	d002      	beq.n	8001212 <HAL_ADC_Init+0xae>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800120c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800120e:	4301      	orrs	r1, r0
 8001210:	430a      	orrs	r2, r1
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001212:	2080      	movs	r0, #128	; 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001214:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001216:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001218:	4311      	orrs	r1, r2
 800121a:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800121c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800121e:	4281      	cmp	r1, r0
 8001220:	d002      	beq.n	8001228 <HAL_ADC_Init+0xc4>
 8001222:	1e48      	subs	r0, r1, #1
 8001224:	2806      	cmp	r0, #6
 8001226:	d807      	bhi.n	8001238 <HAL_ADC_Init+0xd4>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001228:	2507      	movs	r5, #7
 800122a:	6958      	ldr	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800122c:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800122e:	43a8      	bics	r0, r5
 8001230:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001232:	6958      	ldr	r0, [r3, #20]
 8001234:	4301      	orrs	r1, r0
 8001236:	6159      	str	r1, [r3, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	491c      	ldr	r1, [pc, #112]	; (80012ac <HAL_ADC_Init+0x148>)
 800123c:	400b      	ands	r3, r1
 800123e:	429a      	cmp	r2, r3
 8001240:	d111      	bne.n	8001266 <HAL_ADC_Init+0x102>
      ADC_CLEAR_ERRORCODE(hadc);
 8001242:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8001244:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8001246:	64a0      	str	r0, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 8001248:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800124a:	4393      	bics	r3, r2
 800124c:	001a      	movs	r2, r3
 800124e:	2301      	movs	r3, #1
 8001250:	4313      	orrs	r3, r2
 8001252:	6463      	str	r3, [r4, #68]	; 0x44
}
 8001254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001256:	2020      	movs	r0, #32
 8001258:	6c65      	ldr	r5, [r4, #68]	; 0x44
 800125a:	4328      	orrs	r0, r5
 800125c:	6460      	str	r0, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800125e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001260:	4301      	orrs	r1, r0
 8001262:	64a1      	str	r1, [r4, #72]	; 0x48
 8001264:	e7cd      	b.n	8001202 <HAL_ADC_Init+0x9e>
      ADC_STATE_CLR_SET(hadc->State,
 8001266:	2212      	movs	r2, #18
 8001268:	6c63      	ldr	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800126a:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 800126c:	4393      	bics	r3, r2
 800126e:	001a      	movs	r2, r3
 8001270:	2310      	movs	r3, #16
 8001272:	4313      	orrs	r3, r2
 8001274:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001276:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001278:	4303      	orrs	r3, r0
 800127a:	64a3      	str	r3, [r4, #72]	; 0x48
 800127c:	e7ea      	b.n	8001254 <HAL_ADC_Init+0xf0>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800127e:	2310      	movs	r3, #16
 8001280:	6c62      	ldr	r2, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8001282:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001284:	4313      	orrs	r3, r2
 8001286:	6463      	str	r3, [r4, #68]	; 0x44
 8001288:	e7e4      	b.n	8001254 <HAL_ADC_Init+0xf0>
      MODIFY_REG(hadc->Instance->CFGR1,
 800128a:	2118      	movs	r1, #24
 800128c:	68da      	ldr	r2, [r3, #12]
 800128e:	438a      	bics	r2, r1
 8001290:	68a1      	ldr	r1, [r4, #8]
 8001292:	430a      	orrs	r2, r1
 8001294:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001296:	6919      	ldr	r1, [r3, #16]
 8001298:	6862      	ldr	r2, [r4, #4]
 800129a:	0089      	lsls	r1, r1, #2
 800129c:	0889      	lsrs	r1, r1, #2
 800129e:	4311      	orrs	r1, r2
 80012a0:	6119      	str	r1, [r3, #16]
 80012a2:	e78a      	b.n	80011ba <HAL_ADC_Init+0x56>
 80012a4:	fffffefd 	.word	0xfffffefd
 80012a8:	fffe0219 	.word	0xfffe0219
 80012ac:	833fffe7 	.word	0x833fffe7

080012b0 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012b0:	6803      	ldr	r3, [r0, #0]
{
 80012b2:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012b4:	689b      	ldr	r3, [r3, #8]
{
 80012b6:	0004      	movs	r4, r0
    tmp_hal_status = HAL_BUSY;
 80012b8:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012ba:	075b      	lsls	r3, r3, #29
 80012bc:	d41a      	bmi.n	80012f4 <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 80012be:	0025      	movs	r5, r4
 80012c0:	3540      	adds	r5, #64	; 0x40
 80012c2:	782b      	ldrb	r3, [r5, #0]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d015      	beq.n	80012f4 <HAL_ADC_Start+0x44>
 80012c8:	2301      	movs	r3, #1
 80012ca:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80012cc:	69e3      	ldr	r3, [r4, #28]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d111      	bne.n	80012f6 <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 80012d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80012d4:	4a0b      	ldr	r2, [pc, #44]	; (8001304 <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 80012d6:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 80012d8:	401a      	ands	r2, r3
 80012da:	2380      	movs	r3, #128	; 0x80
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80012e0:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 80012e2:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80012e4:	6823      	ldr	r3, [r4, #0]
      ADC_CLEAR_ERRORCODE(hadc);
 80012e6:	64a0      	str	r0, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 80012e8:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80012ea:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80012ec:	6899      	ldr	r1, [r3, #8]
 80012ee:	3a18      	subs	r2, #24
 80012f0:	430a      	orrs	r2, r1
 80012f2:	609a      	str	r2, [r3, #8]
}
 80012f4:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 80012f6:	0020      	movs	r0, r4
 80012f8:	f7ff fee8 	bl	80010cc <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80012fc:	2800      	cmp	r0, #0
 80012fe:	d1f9      	bne.n	80012f4 <HAL_ADC_Start+0x44>
 8001300:	e7e7      	b.n	80012d2 <HAL_ADC_Start+0x22>
 8001302:	46c0      	nop			; (mov r8, r8)
 8001304:	fffff0fe 	.word	0xfffff0fe

08001308 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8001308:	6803      	ldr	r3, [r0, #0]
 800130a:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 800130c:	4770      	bx	lr
	...

08001310 <HAL_ADC_ConfigChannel>:
{
 8001310:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0U;
 8001312:	2300      	movs	r3, #0
  __HAL_LOCK(hadc);
 8001314:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 8001316:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001318:	3440      	adds	r4, #64	; 0x40
 800131a:	7823      	ldrb	r3, [r4, #0]
{
 800131c:	0005      	movs	r5, r0
  __HAL_LOCK(hadc);
 800131e:	2002      	movs	r0, #2
 8001320:	2b01      	cmp	r3, #1
 8001322:	d02b      	beq.n	800137c <HAL_ADC_ConfigChannel+0x6c>
 8001324:	2301      	movs	r3, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001326:	682a      	ldr	r2, [r5, #0]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001328:	6bae      	ldr	r6, [r5, #56]	; 0x38
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800132a:	6890      	ldr	r0, [r2, #8]
  __HAL_LOCK(hadc);
 800132c:	7023      	strb	r3, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800132e:	0740      	lsls	r0, r0, #29
 8001330:	d452      	bmi.n	80013d8 <HAL_ADC_ConfigChannel+0xc8>
    if (sConfig->Rank != ADC_RANK_NONE)
 8001332:	482c      	ldr	r0, [pc, #176]	; (80013e4 <HAL_ADC_ConfigChannel+0xd4>)
 8001334:	684f      	ldr	r7, [r1, #4]
 8001336:	680d      	ldr	r5, [r1, #0]
 8001338:	4287      	cmp	r7, r0
 800133a:	d03b      	beq.n	80013b4 <HAL_ADC_ConfigChannel+0xa4>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800133c:	40ab      	lsls	r3, r5
 800133e:	0018      	movs	r0, r3
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001340:	2380      	movs	r3, #128	; 0x80
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001342:	6a97      	ldr	r7, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001344:	055b      	lsls	r3, r3, #21
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001346:	4338      	orrs	r0, r7
 8001348:	6290      	str	r0, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800134a:	429e      	cmp	r6, r3
 800134c:	d00f      	beq.n	800136e <HAL_ADC_ConfigChannel+0x5e>
 800134e:	3e01      	subs	r6, #1
 8001350:	2e06      	cmp	r6, #6
 8001352:	d90c      	bls.n	800136e <HAL_ADC_ConfigChannel+0x5e>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001354:	688b      	ldr	r3, [r1, #8]
 8001356:	2107      	movs	r1, #7
 8001358:	6950      	ldr	r0, [r2, #20]
 800135a:	4008      	ands	r0, r1
 800135c:	4283      	cmp	r3, r0
 800135e:	d006      	beq.n	800136e <HAL_ADC_ConfigChannel+0x5e>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001360:	6950      	ldr	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001362:	400b      	ands	r3, r1
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001364:	4388      	bics	r0, r1
 8001366:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001368:	6950      	ldr	r0, [r2, #20]
 800136a:	4303      	orrs	r3, r0
 800136c:	6153      	str	r3, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800136e:	002b      	movs	r3, r5
 8001370:	3b10      	subs	r3, #16
 8001372:	2b01      	cmp	r3, #1
 8001374:	d903      	bls.n	800137e <HAL_ADC_ConfigChannel+0x6e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001376:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8001378:	2300      	movs	r3, #0
 800137a:	7023      	strb	r3, [r4, #0]
}
 800137c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800137e:	4b1a      	ldr	r3, [pc, #104]	; (80013e8 <HAL_ADC_ConfigChannel+0xd8>)
 8001380:	2280      	movs	r2, #128	; 0x80
 8001382:	6819      	ldr	r1, [r3, #0]
 8001384:	2d10      	cmp	r5, #16
 8001386:	d013      	beq.n	80013b0 <HAL_ADC_ConfigChannel+0xa0>
 8001388:	03d2      	lsls	r2, r2, #15
 800138a:	430a      	orrs	r2, r1
 800138c:	601a      	str	r2, [r3, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800138e:	2d10      	cmp	r5, #16
 8001390:	d1f1      	bne.n	8001376 <HAL_ADC_ConfigChannel+0x66>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001392:	4b16      	ldr	r3, [pc, #88]	; (80013ec <HAL_ADC_ConfigChannel+0xdc>)
 8001394:	4916      	ldr	r1, [pc, #88]	; (80013f0 <HAL_ADC_ConfigChannel+0xe0>)
 8001396:	6818      	ldr	r0, [r3, #0]
 8001398:	f7fe fec0 	bl	800011c <__udivsi3>
 800139c:	230a      	movs	r3, #10
 800139e:	4358      	muls	r0, r3
 80013a0:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0U)
 80013a2:	9b01      	ldr	r3, [sp, #4]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d0e6      	beq.n	8001376 <HAL_ADC_ConfigChannel+0x66>
            wait_loop_index--;
 80013a8:	9b01      	ldr	r3, [sp, #4]
 80013aa:	3b01      	subs	r3, #1
 80013ac:	9301      	str	r3, [sp, #4]
 80013ae:	e7f8      	b.n	80013a2 <HAL_ADC_ConfigChannel+0x92>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80013b0:	0412      	lsls	r2, r2, #16
 80013b2:	e7ea      	b.n	800138a <HAL_ADC_ConfigChannel+0x7a>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80013b4:	40ab      	lsls	r3, r5
 80013b6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80013b8:	4399      	bics	r1, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80013ba:	002b      	movs	r3, r5
 80013bc:	3b10      	subs	r3, #16
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80013be:	6291      	str	r1, [r2, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d8d8      	bhi.n	8001376 <HAL_ADC_ConfigChannel+0x66>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80013c4:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <HAL_ADC_ConfigChannel+0xd8>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	2d10      	cmp	r5, #16
 80013ca:	d003      	beq.n	80013d4 <HAL_ADC_ConfigChannel+0xc4>
 80013cc:	4909      	ldr	r1, [pc, #36]	; (80013f4 <HAL_ADC_ConfigChannel+0xe4>)
 80013ce:	400a      	ands	r2, r1
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	e7d0      	b.n	8001376 <HAL_ADC_ConfigChannel+0x66>
 80013d4:	4908      	ldr	r1, [pc, #32]	; (80013f8 <HAL_ADC_ConfigChannel+0xe8>)
 80013d6:	e7fa      	b.n	80013ce <HAL_ADC_ConfigChannel+0xbe>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013d8:	2220      	movs	r2, #32
 80013da:	6c69      	ldr	r1, [r5, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 80013dc:	0018      	movs	r0, r3
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013de:	430a      	orrs	r2, r1
 80013e0:	646a      	str	r2, [r5, #68]	; 0x44
 80013e2:	e7c9      	b.n	8001378 <HAL_ADC_ConfigChannel+0x68>
 80013e4:	00001001 	.word	0x00001001
 80013e8:	40012708 	.word	0x40012708
 80013ec:	20000000 	.word	0x20000000
 80013f0:	000f4240 	.word	0x000f4240
 80013f4:	ffbfffff 	.word	0xffbfffff
 80013f8:	ff7fffff 	.word	0xff7fffff

080013fc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013fc:	b570      	push	{r4, r5, r6, lr}
 80013fe:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8001400:	2800      	cmp	r0, #0
 8001402:	da14      	bge.n	800142e <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001404:	230f      	movs	r3, #15
 8001406:	b2c0      	uxtb	r0, r0
 8001408:	4003      	ands	r3, r0
 800140a:	3b08      	subs	r3, #8
 800140c:	4a11      	ldr	r2, [pc, #68]	; (8001454 <HAL_NVIC_SetPriority+0x58>)
 800140e:	089b      	lsrs	r3, r3, #2
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	189b      	adds	r3, r3, r2
 8001414:	2203      	movs	r2, #3
 8001416:	4010      	ands	r0, r2
 8001418:	4090      	lsls	r0, r2
 800141a:	32fc      	adds	r2, #252	; 0xfc
 800141c:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800141e:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001420:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001422:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001424:	69dc      	ldr	r4, [r3, #28]
 8001426:	43ac      	bics	r4, r5
 8001428:	4321      	orrs	r1, r4
 800142a:	61d9      	str	r1, [r3, #28]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800142c:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800142e:	2503      	movs	r5, #3
 8001430:	0883      	lsrs	r3, r0, #2
 8001432:	4028      	ands	r0, r5
 8001434:	40a8      	lsls	r0, r5
 8001436:	35fc      	adds	r5, #252	; 0xfc
 8001438:	002e      	movs	r6, r5
 800143a:	4a07      	ldr	r2, [pc, #28]	; (8001458 <HAL_NVIC_SetPriority+0x5c>)
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	189b      	adds	r3, r3, r2
 8001440:	22c0      	movs	r2, #192	; 0xc0
 8001442:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001444:	4029      	ands	r1, r5
 8001446:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001448:	0092      	lsls	r2, r2, #2
 800144a:	589c      	ldr	r4, [r3, r2]
 800144c:	43b4      	bics	r4, r6
 800144e:	4321      	orrs	r1, r4
 8001450:	5099      	str	r1, [r3, r2]
 8001452:	e7eb      	b.n	800142c <HAL_NVIC_SetPriority+0x30>
 8001454:	e000ed00 	.word	0xe000ed00
 8001458:	e000e100 	.word	0xe000e100

0800145c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800145c:	4a09      	ldr	r2, [pc, #36]	; (8001484 <HAL_SYSTICK_Config+0x28>)
 800145e:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8001460:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001462:	4293      	cmp	r3, r2
 8001464:	d80d      	bhi.n	8001482 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001466:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001468:	4a07      	ldr	r2, [pc, #28]	; (8001488 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800146a:	4808      	ldr	r0, [pc, #32]	; (800148c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800146c:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800146e:	6a03      	ldr	r3, [r0, #32]
 8001470:	0609      	lsls	r1, r1, #24
 8001472:	021b      	lsls	r3, r3, #8
 8001474:	0a1b      	lsrs	r3, r3, #8
 8001476:	430b      	orrs	r3, r1
 8001478:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800147a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800147c:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800147e:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001480:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001482:	4770      	bx	lr
 8001484:	00ffffff 	.word	0x00ffffff
 8001488:	e000e010 	.word	0xe000e010
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001490:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <HAL_SYSTICK_CLKSourceConfig+0x18>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001492:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001494:	2804      	cmp	r0, #4
 8001496:	d102      	bne.n	800149e <HAL_SYSTICK_CLKSourceConfig+0xe>
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001498:	4310      	orrs	r0, r2
 800149a:	6018      	str	r0, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800149c:	4770      	bx	lr
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800149e:	2104      	movs	r1, #4
 80014a0:	438a      	bics	r2, r1
 80014a2:	601a      	str	r2, [r3, #0]
}
 80014a4:	e7fa      	b.n	800149c <HAL_SYSTICK_CLKSourceConfig+0xc>
 80014a6:	46c0      	nop			; (mov r8, r8)
 80014a8:	e000e010 	.word	0xe000e010

080014ac <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80014ac:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 80014ae:	f001 fcf3 	bl	8002e98 <HAL_SYSTICK_Callback>
}
 80014b2:	bd10      	pop	{r4, pc}

080014b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80014b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80014b6:	680b      	ldr	r3, [r1, #0]
{ 
 80014b8:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != RESET)
 80014ba:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00U;
 80014bc:	2300      	movs	r3, #0
{ 
 80014be:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80014c0:	9a02      	ldr	r2, [sp, #8]
 80014c2:	40da      	lsrs	r2, r3
 80014c4:	d101      	bne.n	80014ca <HAL_GPIO_Init+0x16>
      }
    }
    
    position++;
  } 
}
 80014c6:	b007      	add	sp, #28
 80014c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80014ca:	2201      	movs	r2, #1
 80014cc:	409a      	lsls	r2, r3
 80014ce:	9203      	str	r2, [sp, #12]
 80014d0:	9903      	ldr	r1, [sp, #12]
 80014d2:	9a02      	ldr	r2, [sp, #8]
 80014d4:	400a      	ands	r2, r1
 80014d6:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 80014d8:	d100      	bne.n	80014dc <HAL_GPIO_Init+0x28>
 80014da:	e08c      	b.n	80015f6 <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80014dc:	9a01      	ldr	r2, [sp, #4]
 80014de:	2110      	movs	r1, #16
 80014e0:	6852      	ldr	r2, [r2, #4]
 80014e2:	0016      	movs	r6, r2
 80014e4:	438e      	bics	r6, r1
 80014e6:	2e02      	cmp	r6, #2
 80014e8:	d10e      	bne.n	8001508 <HAL_GPIO_Init+0x54>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80014ea:	2507      	movs	r5, #7
 80014ec:	401d      	ands	r5, r3
 80014ee:	00ad      	lsls	r5, r5, #2
 80014f0:	3901      	subs	r1, #1
 80014f2:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3];
 80014f4:	08dc      	lsrs	r4, r3, #3
 80014f6:	00a4      	lsls	r4, r4, #2
 80014f8:	1904      	adds	r4, r0, r4
 80014fa:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80014fc:	438f      	bics	r7, r1
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 80014fe:	9901      	ldr	r1, [sp, #4]
 8001500:	6909      	ldr	r1, [r1, #16]
 8001502:	40a9      	lsls	r1, r5
 8001504:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 8001506:	6227      	str	r7, [r4, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8001508:	2403      	movs	r4, #3
 800150a:	005f      	lsls	r7, r3, #1
 800150c:	40bc      	lsls	r4, r7
 800150e:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 8001510:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001512:	3e01      	subs	r6, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8001514:	4025      	ands	r5, r4
 8001516:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001518:	2503      	movs	r5, #3
 800151a:	4015      	ands	r5, r2
 800151c:	40bd      	lsls	r5, r7
 800151e:	4661      	mov	r1, ip
 8001520:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 8001522:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001524:	2e01      	cmp	r6, #1
 8001526:	d80f      	bhi.n	8001548 <HAL_GPIO_Init+0x94>
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8001528:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR; 
 800152a:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 800152c:	68cd      	ldr	r5, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800152e:	4026      	ands	r6, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8001530:	40bd      	lsls	r5, r7
 8001532:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8001534:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8001536:	6846      	ldr	r6, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001538:	9903      	ldr	r1, [sp, #12]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800153a:	0915      	lsrs	r5, r2, #4
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800153c:	438e      	bics	r6, r1
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800153e:	2101      	movs	r1, #1
 8001540:	400d      	ands	r5, r1
 8001542:	409d      	lsls	r5, r3
 8001544:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8001546:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 8001548:	68c5      	ldr	r5, [r0, #12]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800154a:	9901      	ldr	r1, [sp, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 800154c:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800154e:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001550:	2180      	movs	r1, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8001552:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001554:	0549      	lsls	r1, r1, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8001556:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8001558:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800155a:	420a      	tst	r2, r1
 800155c:	d04b      	beq.n	80015f6 <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800155e:	2101      	movs	r1, #1
 8001560:	4c26      	ldr	r4, [pc, #152]	; (80015fc <HAL_GPIO_Init+0x148>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001562:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001564:	69a5      	ldr	r5, [r4, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001566:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001568:	430d      	orrs	r5, r1
 800156a:	61a5      	str	r5, [r4, #24]
 800156c:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 800156e:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001570:	400c      	ands	r4, r1
 8001572:	9405      	str	r4, [sp, #20]
 8001574:	9c05      	ldr	r4, [sp, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001576:	240f      	movs	r4, #15
 8001578:	4921      	ldr	r1, [pc, #132]	; (8001600 <HAL_GPIO_Init+0x14c>)
 800157a:	00ad      	lsls	r5, r5, #2
 800157c:	00b6      	lsls	r6, r6, #2
 800157e:	186d      	adds	r5, r5, r1
 8001580:	40b4      	lsls	r4, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001582:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2];
 8001584:	68af      	ldr	r7, [r5, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001586:	05c9      	lsls	r1, r1, #23
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001588:	43a7      	bics	r7, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800158a:	2400      	movs	r4, #0
 800158c:	4288      	cmp	r0, r1
 800158e:	d00c      	beq.n	80015aa <HAL_GPIO_Init+0xf6>
 8001590:	491c      	ldr	r1, [pc, #112]	; (8001604 <HAL_GPIO_Init+0x150>)
 8001592:	3401      	adds	r4, #1
 8001594:	4288      	cmp	r0, r1
 8001596:	d008      	beq.n	80015aa <HAL_GPIO_Init+0xf6>
 8001598:	491b      	ldr	r1, [pc, #108]	; (8001608 <HAL_GPIO_Init+0x154>)
 800159a:	3401      	adds	r4, #1
 800159c:	4288      	cmp	r0, r1
 800159e:	d004      	beq.n	80015aa <HAL_GPIO_Init+0xf6>
 80015a0:	491a      	ldr	r1, [pc, #104]	; (800160c <HAL_GPIO_Init+0x158>)
 80015a2:	3403      	adds	r4, #3
 80015a4:	4288      	cmp	r0, r1
 80015a6:	d100      	bne.n	80015aa <HAL_GPIO_Init+0xf6>
 80015a8:	3c02      	subs	r4, #2
 80015aa:	40b4      	lsls	r4, r6
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80015ac:	9900      	ldr	r1, [sp, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015ae:	433c      	orrs	r4, r7
          SET_BIT(temp, iocurrent); 
 80015b0:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2] = temp;
 80015b2:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 80015b4:	4c16      	ldr	r4, [pc, #88]	; (8001610 <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80015b6:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 80015b8:	6827      	ldr	r7, [r4, #0]
          SET_BIT(temp, iocurrent); 
 80015ba:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015bc:	03d1      	lsls	r1, r2, #15
 80015be:	d401      	bmi.n	80015c4 <HAL_GPIO_Init+0x110>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80015c0:	003e      	movs	r6, r7
 80015c2:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 80015c4:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 80015c6:	6867      	ldr	r7, [r4, #4]
          SET_BIT(temp, iocurrent); 
 80015c8:	9e00      	ldr	r6, [sp, #0]
 80015ca:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015cc:	0391      	lsls	r1, r2, #14
 80015ce:	d401      	bmi.n	80015d4 <HAL_GPIO_Init+0x120>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80015d0:	003e      	movs	r6, r7
 80015d2:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 80015d4:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 80015d6:	68a7      	ldr	r7, [r4, #8]
          SET_BIT(temp, iocurrent); 
 80015d8:	9e00      	ldr	r6, [sp, #0]
 80015da:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015dc:	02d1      	lsls	r1, r2, #11
 80015de:	d401      	bmi.n	80015e4 <HAL_GPIO_Init+0x130>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80015e0:	003e      	movs	r6, r7
 80015e2:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 80015e4:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 80015e6:	68e6      	ldr	r6, [r4, #12]
          SET_BIT(temp, iocurrent); 
 80015e8:	9f00      	ldr	r7, [sp, #0]
 80015ea:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015ec:	0292      	lsls	r2, r2, #10
 80015ee:	d401      	bmi.n	80015f4 <HAL_GPIO_Init+0x140>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80015f0:	402e      	ands	r6, r5
 80015f2:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 80015f4:	60e7      	str	r7, [r4, #12]
    position++;
 80015f6:	3301      	adds	r3, #1
 80015f8:	e762      	b.n	80014c0 <HAL_GPIO_Init+0xc>
 80015fa:	46c0      	nop			; (mov r8, r8)
 80015fc:	40021000 	.word	0x40021000
 8001600:	40010000 	.word	0x40010000
 8001604:	48000400 	.word	0x48000400
 8001608:	48000800 	.word	0x48000800
 800160c:	48000c00 	.word	0x48000c00
 8001610:	40010400 	.word	0x40010400

08001614 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001614:	6900      	ldr	r0, [r0, #16]
 8001616:	4008      	ands	r0, r1
 8001618:	1e41      	subs	r1, r0, #1
 800161a:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 800161c:	b2c0      	uxtb	r0, r0
  }
 800161e:	4770      	bx	lr

08001620 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001620:	2a00      	cmp	r2, #0
 8001622:	d001      	beq.n	8001628 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001624:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001626:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001628:	6281      	str	r1, [r0, #40]	; 0x28
}
 800162a:	e7fc      	b.n	8001626 <HAL_GPIO_WritePin+0x6>

0800162c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800162c:	6803      	ldr	r3, [r0, #0]
 800162e:	699a      	ldr	r2, [r3, #24]
 8001630:	0792      	lsls	r2, r2, #30
 8001632:	d501      	bpl.n	8001638 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001634:	2200      	movs	r2, #0
 8001636:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001638:	2201      	movs	r2, #1
 800163a:	6999      	ldr	r1, [r3, #24]
 800163c:	4211      	tst	r1, r2
 800163e:	d102      	bne.n	8001646 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001640:	6999      	ldr	r1, [r3, #24]
 8001642:	430a      	orrs	r2, r1
 8001644:	619a      	str	r2, [r3, #24]
  }
}
 8001646:	4770      	bx	lr

08001648 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001648:	b530      	push	{r4, r5, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 800164a:	6804      	ldr	r4, [r0, #0]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 800164c:	4806      	ldr	r0, [pc, #24]	; (8001668 <I2C_TransferConfig+0x20>)
  tmpreg = hi2c->Instance->CR2;
 800164e:	6865      	ldr	r5, [r4, #4]

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8001650:	0589      	lsls	r1, r1, #22
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001652:	4028      	ands	r0, r5
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8001654:	9d03      	ldr	r5, [sp, #12]
 8001656:	0d89      	lsrs	r1, r1, #22
 8001658:	432b      	orrs	r3, r5
 800165a:	4319      	orrs	r1, r3
 800165c:	0412      	lsls	r2, r2, #16
 800165e:	430a      	orrs	r2, r1
 8001660:	4302      	orrs	r2, r0
                       (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 8001662:	6062      	str	r2, [r4, #4]
}
 8001664:	bd30      	pop	{r4, r5, pc}
 8001666:	46c0      	nop			; (mov r8, r8)
 8001668:	fc009800 	.word	0xfc009800

0800166c <I2C_WaitOnFlagUntilTimeout>:
{
 800166c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800166e:	0004      	movs	r4, r0
 8001670:	000e      	movs	r6, r1
 8001672:	0017      	movs	r7, r2
 8001674:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001676:	6822      	ldr	r2, [r4, #0]
 8001678:	6993      	ldr	r3, [r2, #24]
 800167a:	4033      	ands	r3, r6
 800167c:	1b9b      	subs	r3, r3, r6
 800167e:	4259      	negs	r1, r3
 8001680:	414b      	adcs	r3, r1
 8001682:	42bb      	cmp	r3, r7
 8001684:	d001      	beq.n	800168a <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8001686:	2000      	movs	r0, #0
 8001688:	e00e      	b.n	80016a8 <I2C_WaitOnFlagUntilTimeout+0x3c>
    if (Timeout != HAL_MAX_DELAY)
 800168a:	1c6b      	adds	r3, r5, #1
 800168c:	d0f4      	beq.n	8001678 <I2C_WaitOnFlagUntilTimeout+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800168e:	2d00      	cmp	r5, #0
 8001690:	d10b      	bne.n	80016aa <I2C_WaitOnFlagUntilTimeout+0x3e>
        hi2c->State = HAL_I2C_STATE_READY;
 8001692:	0023      	movs	r3, r4
 8001694:	2220      	movs	r2, #32
 8001696:	3341      	adds	r3, #65	; 0x41
 8001698:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800169a:	0022      	movs	r2, r4
 800169c:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 800169e:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80016a0:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 80016a2:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80016a4:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 80016a6:	7023      	strb	r3, [r4, #0]
}
 80016a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80016aa:	f7ff fcf9 	bl	80010a0 <HAL_GetTick>
 80016ae:	9b06      	ldr	r3, [sp, #24]
 80016b0:	1ac0      	subs	r0, r0, r3
 80016b2:	4285      	cmp	r5, r0
 80016b4:	d2df      	bcs.n	8001676 <I2C_WaitOnFlagUntilTimeout+0xa>
 80016b6:	e7ec      	b.n	8001692 <I2C_WaitOnFlagUntilTimeout+0x26>

080016b8 <I2C_IsAcknowledgeFailed>:
{
 80016b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80016ba:	6803      	ldr	r3, [r0, #0]
{
 80016bc:	0004      	movs	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80016be:	6998      	ldr	r0, [r3, #24]
 80016c0:	2310      	movs	r3, #16
{
 80016c2:	000e      	movs	r6, r1
 80016c4:	0017      	movs	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80016c6:	4018      	ands	r0, r3
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016c8:	2520      	movs	r5, #32
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80016ca:	2800      	cmp	r0, #0
 80016cc:	d115      	bne.n	80016fa <I2C_IsAcknowledgeFailed+0x42>
}
 80016ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (Timeout != HAL_MAX_DELAY)
 80016d0:	1c72      	adds	r2, r6, #1
 80016d2:	d013      	beq.n	80016fc <I2C_IsAcknowledgeFailed+0x44>
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80016d4:	2e00      	cmp	r6, #0
 80016d6:	d10b      	bne.n	80016f0 <I2C_IsAcknowledgeFailed+0x38>
          hi2c->State = HAL_I2C_STATE_READY;
 80016d8:	0023      	movs	r3, r4
 80016da:	2220      	movs	r2, #32
 80016dc:	3341      	adds	r3, #65	; 0x41
 80016de:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80016e0:	0022      	movs	r2, r4
 80016e2:	2300      	movs	r3, #0
 80016e4:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 80016e6:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80016e8:	7013      	strb	r3, [r2, #0]
          return HAL_TIMEOUT;
 80016ea:	2003      	movs	r0, #3
          __HAL_UNLOCK(hi2c);
 80016ec:	7023      	strb	r3, [r4, #0]
 80016ee:	e7ee      	b.n	80016ce <I2C_IsAcknowledgeFailed+0x16>
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80016f0:	f7ff fcd6 	bl	80010a0 <HAL_GetTick>
 80016f4:	1bc0      	subs	r0, r0, r7
 80016f6:	4286      	cmp	r6, r0
 80016f8:	d3ee      	bcc.n	80016d8 <I2C_IsAcknowledgeFailed+0x20>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016fa:	6823      	ldr	r3, [r4, #0]
 80016fc:	699a      	ldr	r2, [r3, #24]
 80016fe:	422a      	tst	r2, r5
 8001700:	d0e6      	beq.n	80016d0 <I2C_IsAcknowledgeFailed+0x18>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001702:	2210      	movs	r2, #16
    I2C_Flush_TXDR(hi2c);
 8001704:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001706:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001708:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800170a:	f7ff ff8f 	bl	800162c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800170e:	6822      	ldr	r2, [r4, #0]
 8001710:	4908      	ldr	r1, [pc, #32]	; (8001734 <I2C_IsAcknowledgeFailed+0x7c>)
 8001712:	6853      	ldr	r3, [r2, #4]
    return HAL_ERROR;
 8001714:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8001716:	400b      	ands	r3, r1
 8001718:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800171a:	2304      	movs	r3, #4
 800171c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800171e:	0023      	movs	r3, r4
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001720:	0022      	movs	r2, r4
    hi2c->State = HAL_I2C_STATE_READY;
 8001722:	3341      	adds	r3, #65	; 0x41
 8001724:	701d      	strb	r5, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001726:	2300      	movs	r3, #0
 8001728:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 800172a:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800172c:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 800172e:	7023      	strb	r3, [r4, #0]
 8001730:	e7cd      	b.n	80016ce <I2C_IsAcknowledgeFailed+0x16>
 8001732:	46c0      	nop			; (mov r8, r8)
 8001734:	fe00e800 	.word	0xfe00e800

08001738 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8001738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800173a:	0004      	movs	r4, r0
 800173c:	000d      	movs	r5, r1
 800173e:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001740:	2702      	movs	r7, #2
 8001742:	6823      	ldr	r3, [r4, #0]
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	423b      	tst	r3, r7
 8001748:	d001      	beq.n	800174e <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 800174a:	2000      	movs	r0, #0
 800174c:	e018      	b.n	8001780 <I2C_WaitOnTXISFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800174e:	0032      	movs	r2, r6
 8001750:	0029      	movs	r1, r5
 8001752:	0020      	movs	r0, r4
 8001754:	f7ff ffb0 	bl	80016b8 <I2C_IsAcknowledgeFailed>
 8001758:	2800      	cmp	r0, #0
 800175a:	d118      	bne.n	800178e <I2C_WaitOnTXISFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 800175c:	1c6b      	adds	r3, r5, #1
 800175e:	d0f0      	beq.n	8001742 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001760:	2d00      	cmp	r5, #0
 8001762:	d10e      	bne.n	8001782 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001764:	2220      	movs	r2, #32
 8001766:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8001768:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800176a:	4313      	orrs	r3, r2
 800176c:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800176e:	0023      	movs	r3, r4
 8001770:	3341      	adds	r3, #65	; 0x41
 8001772:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001774:	0022      	movs	r2, r4
 8001776:	2300      	movs	r3, #0
 8001778:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 800177a:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800177c:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 800177e:	7023      	strb	r3, [r4, #0]
}
 8001780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001782:	f7ff fc8d 	bl	80010a0 <HAL_GetTick>
 8001786:	1b80      	subs	r0, r0, r6
 8001788:	4285      	cmp	r5, r0
 800178a:	d2da      	bcs.n	8001742 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
 800178c:	e7ea      	b.n	8001764 <I2C_WaitOnTXISFlagUntilTimeout+0x2c>
      return HAL_ERROR;
 800178e:	2001      	movs	r0, #1
 8001790:	e7f6      	b.n	8001780 <I2C_WaitOnTXISFlagUntilTimeout+0x48>

08001792 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8001792:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001794:	0004      	movs	r4, r0
 8001796:	000d      	movs	r5, r1
 8001798:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800179a:	2720      	movs	r7, #32
 800179c:	6823      	ldr	r3, [r4, #0]
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	423b      	tst	r3, r7
 80017a2:	d001      	beq.n	80017a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 80017a4:	2000      	movs	r0, #0
 80017a6:	e016      	b.n	80017d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80017a8:	0032      	movs	r2, r6
 80017aa:	0029      	movs	r1, r5
 80017ac:	0020      	movs	r0, r4
 80017ae:	f7ff ff83 	bl	80016b8 <I2C_IsAcknowledgeFailed>
 80017b2:	2800      	cmp	r0, #0
 80017b4:	d116      	bne.n	80017e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x52>
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80017b6:	2d00      	cmp	r5, #0
 80017b8:	d10e      	bne.n	80017d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017ba:	2220      	movs	r2, #32
 80017bc:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80017be:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017c0:	4313      	orrs	r3, r2
 80017c2:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80017c4:	0023      	movs	r3, r4
 80017c6:	3341      	adds	r3, #65	; 0x41
 80017c8:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80017ca:	0022      	movs	r2, r4
 80017cc:	2300      	movs	r3, #0
 80017ce:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 80017d0:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80017d2:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 80017d4:	7023      	strb	r3, [r4, #0]
}
 80017d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80017d8:	f7ff fc62 	bl	80010a0 <HAL_GetTick>
 80017dc:	1b80      	subs	r0, r0, r6
 80017de:	4285      	cmp	r5, r0
 80017e0:	d2dc      	bcs.n	800179c <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
 80017e2:	e7ea      	b.n	80017ba <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
      return HAL_ERROR;
 80017e4:	2001      	movs	r0, #1
 80017e6:	e7f6      	b.n	80017d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x44>

080017e8 <HAL_I2C_Init>:
{
 80017e8:	b570      	push	{r4, r5, r6, lr}
 80017ea:	0004      	movs	r4, r0
    return HAL_ERROR;
 80017ec:	2001      	movs	r0, #1
  if (hi2c == NULL)
 80017ee:	2c00      	cmp	r4, #0
 80017f0:	d03f      	beq.n	8001872 <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017f2:	0025      	movs	r5, r4
 80017f4:	3541      	adds	r5, #65	; 0x41
 80017f6:	782b      	ldrb	r3, [r5, #0]
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d105      	bne.n	800180a <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 80017fe:	0022      	movs	r2, r4
 8001800:	3240      	adds	r2, #64	; 0x40
 8001802:	7013      	strb	r3, [r2, #0]
    HAL_I2C_MspInit(hi2c);
 8001804:	0020      	movs	r0, r4
 8001806:	f001 fb97 	bl	8002f38 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800180a:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 800180c:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 800180e:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8001810:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001812:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	68a6      	ldr	r6, [r4, #8]
 8001818:	438a      	bics	r2, r1
 800181a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800181c:	6861      	ldr	r1, [r4, #4]
 800181e:	4a1a      	ldr	r2, [pc, #104]	; (8001888 <HAL_I2C_Init+0xa0>)
 8001820:	400a      	ands	r2, r1
 8001822:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001824:	6899      	ldr	r1, [r3, #8]
 8001826:	4a19      	ldr	r2, [pc, #100]	; (800188c <HAL_I2C_Init+0xa4>)
 8001828:	4011      	ands	r1, r2
 800182a:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800182c:	2801      	cmp	r0, #1
 800182e:	d121      	bne.n	8001874 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001830:	2180      	movs	r1, #128	; 0x80
 8001832:	0209      	lsls	r1, r1, #8
 8001834:	4331      	orrs	r1, r6
 8001836:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001838:	6858      	ldr	r0, [r3, #4]
 800183a:	4915      	ldr	r1, [pc, #84]	; (8001890 <HAL_I2C_Init+0xa8>)
 800183c:	4301      	orrs	r1, r0
 800183e:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001840:	68d9      	ldr	r1, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001842:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001844:	400a      	ands	r2, r1
 8001846:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001848:	6961      	ldr	r1, [r4, #20]
 800184a:	6922      	ldr	r2, [r4, #16]
 800184c:	430a      	orrs	r2, r1
 800184e:	69a1      	ldr	r1, [r4, #24]
 8001850:	0209      	lsls	r1, r1, #8
 8001852:	430a      	orrs	r2, r1
 8001854:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001856:	6a21      	ldr	r1, [r4, #32]
 8001858:	69e2      	ldr	r2, [r4, #28]
 800185a:	430a      	orrs	r2, r1
 800185c:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800185e:	2201      	movs	r2, #1
 8001860:	6819      	ldr	r1, [r3, #0]
 8001862:	430a      	orrs	r2, r1
 8001864:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8001866:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001868:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800186a:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 800186c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800186e:	3442      	adds	r4, #66	; 0x42
 8001870:	7020      	strb	r0, [r4, #0]
}
 8001872:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001874:	2184      	movs	r1, #132	; 0x84
 8001876:	0209      	lsls	r1, r1, #8
 8001878:	4331      	orrs	r1, r6
 800187a:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800187c:	2802      	cmp	r0, #2
 800187e:	d1db      	bne.n	8001838 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001880:	2180      	movs	r1, #128	; 0x80
 8001882:	0109      	lsls	r1, r1, #4
 8001884:	6059      	str	r1, [r3, #4]
 8001886:	e7d7      	b.n	8001838 <HAL_I2C_Init+0x50>
 8001888:	f0ffffff 	.word	0xf0ffffff
 800188c:	ffff7fff 	.word	0xffff7fff
 8001890:	02008000 	.word	0x02008000

08001894 <HAL_I2C_Master_Transmit>:
{
 8001894:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001896:	0005      	movs	r5, r0
{
 8001898:	b087      	sub	sp, #28
 800189a:	9103      	str	r1, [sp, #12]
 800189c:	9204      	str	r2, [sp, #16]
 800189e:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80018a0:	3541      	adds	r5, #65	; 0x41
 80018a2:	782b      	ldrb	r3, [r5, #0]
{
 80018a4:	0004      	movs	r4, r0
    return HAL_BUSY;
 80018a6:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80018a8:	2b20      	cmp	r3, #32
 80018aa:	d157      	bne.n	800195c <HAL_I2C_Master_Transmit+0xc8>
    __HAL_LOCK(hi2c);
 80018ac:	0023      	movs	r3, r4
 80018ae:	3340      	adds	r3, #64	; 0x40
 80018b0:	781a      	ldrb	r2, [r3, #0]
 80018b2:	2a01      	cmp	r2, #1
 80018b4:	d052      	beq.n	800195c <HAL_I2C_Master_Transmit+0xc8>
 80018b6:	2601      	movs	r6, #1
 80018b8:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 80018ba:	f7ff fbf1 	bl	80010a0 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80018be:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 80018c0:	0007      	movs	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80018c2:	9000      	str	r0, [sp, #0]
 80018c4:	2319      	movs	r3, #25
 80018c6:	0032      	movs	r2, r6
 80018c8:	0209      	lsls	r1, r1, #8
 80018ca:	0020      	movs	r0, r4
 80018cc:	f7ff fece 	bl	800166c <I2C_WaitOnFlagUntilTimeout>
 80018d0:	2800      	cmp	r0, #0
 80018d2:	d142      	bne.n	800195a <HAL_I2C_Master_Transmit+0xc6>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80018d4:	2321      	movs	r3, #33	; 0x21
 80018d6:	702b      	strb	r3, [r5, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80018d8:	3b11      	subs	r3, #17
 80018da:	19ad      	adds	r5, r5, r6
 80018dc:	702b      	strb	r3, [r5, #0]
    hi2c->pBuffPtr  = pData;
 80018de:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018e0:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80018e2:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80018e4:	466b      	mov	r3, sp
 80018e6:	8a9b      	ldrh	r3, [r3, #20]
    hi2c->XferISR   = NULL;
 80018e8:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 80018ea:	8563      	strh	r3, [r4, #42]	; 0x2a
 80018ec:	2380      	movs	r3, #128	; 0x80
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018ee:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80018f0:	019b      	lsls	r3, r3, #6
 80018f2:	2aff      	cmp	r2, #255	; 0xff
 80018f4:	d921      	bls.n	800193a <HAL_I2C_Master_Transmit+0xa6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80018f6:	22ff      	movs	r2, #255	; 0xff
 80018f8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80018fa:	9300      	str	r3, [sp, #0]
 80018fc:	2380      	movs	r3, #128	; 0x80
 80018fe:	045b      	lsls	r3, r3, #17
 8001900:	9903      	ldr	r1, [sp, #12]
 8001902:	0020      	movs	r0, r4
 8001904:	f7ff fea0 	bl	8001648 <I2C_TransferConfig>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001908:	26ff      	movs	r6, #255	; 0xff
    while (hi2c->XferCount > 0U)
 800190a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800190c:	003a      	movs	r2, r7
 800190e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001910:	0020      	movs	r0, r4
    while (hi2c->XferCount > 0U)
 8001912:	2b00      	cmp	r3, #0
 8001914:	d119      	bne.n	800194a <HAL_I2C_Master_Transmit+0xb6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001916:	f7ff ff3c 	bl	8001792 <I2C_WaitOnSTOPFlagUntilTimeout>
 800191a:	2800      	cmp	r0, #0
 800191c:	d119      	bne.n	8001952 <HAL_I2C_Master_Transmit+0xbe>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800191e:	2120      	movs	r1, #32
 8001920:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8001922:	4e27      	ldr	r6, [pc, #156]	; (80019c0 <HAL_I2C_Master_Transmit+0x12c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001924:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001926:	685a      	ldr	r2, [r3, #4]
 8001928:	4032      	ands	r2, r6
 800192a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800192c:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 800192e:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8001930:	3341      	adds	r3, #65	; 0x41
 8001932:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001934:	7028      	strb	r0, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8001936:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8001938:	e010      	b.n	800195c <HAL_I2C_Master_Transmit+0xc8>
      hi2c->XferSize = hi2c->XferCount;
 800193a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800193c:	b292      	uxth	r2, r2
 800193e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	2380      	movs	r3, #128	; 0x80
 8001944:	b2d2      	uxtb	r2, r2
 8001946:	049b      	lsls	r3, r3, #18
 8001948:	e7da      	b.n	8001900 <HAL_I2C_Master_Transmit+0x6c>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800194a:	f7ff fef5 	bl	8001738 <I2C_WaitOnTXISFlagUntilTimeout>
 800194e:	2800      	cmp	r0, #0
 8001950:	d006      	beq.n	8001960 <HAL_I2C_Master_Transmit+0xcc>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001952:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 8001954:	2001      	movs	r0, #1
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001956:	2b04      	cmp	r3, #4
 8001958:	d000      	beq.n	800195c <HAL_I2C_Master_Transmit+0xc8>
          return HAL_TIMEOUT;
 800195a:	2003      	movs	r0, #3
}
 800195c:	b007      	add	sp, #28
 800195e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8001960:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001962:	6822      	ldr	r2, [r4, #0]
 8001964:	1c59      	adds	r1, r3, #1
 8001966:	6261      	str	r1, [r4, #36]	; 0x24
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 800196c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800196e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001970:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8001972:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8001974:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8001976:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8001978:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800197a:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 800197c:	2a00      	cmp	r2, #0
 800197e:	d1c4      	bne.n	800190a <HAL_I2C_Master_Transmit+0x76>
 8001980:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001982:	2b00      	cmp	r3, #0
 8001984:	d0c1      	beq.n	800190a <HAL_I2C_Master_Transmit+0x76>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001986:	9700      	str	r7, [sp, #0]
 8001988:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800198a:	2180      	movs	r1, #128	; 0x80
 800198c:	0020      	movs	r0, r4
 800198e:	f7ff fe6d 	bl	800166c <I2C_WaitOnFlagUntilTimeout>
 8001992:	2800      	cmp	r0, #0
 8001994:	d1e1      	bne.n	800195a <HAL_I2C_Master_Transmit+0xc6>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001996:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001998:	2bff      	cmp	r3, #255	; 0xff
 800199a:	d909      	bls.n	80019b0 <HAL_I2C_Master_Transmit+0x11c>
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800199c:	2380      	movs	r3, #128	; 0x80
 800199e:	22ff      	movs	r2, #255	; 0xff
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80019a0:	8526      	strh	r6, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80019a2:	045b      	lsls	r3, r3, #17
 80019a4:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80019a6:	9903      	ldr	r1, [sp, #12]
 80019a8:	0020      	movs	r0, r4
 80019aa:	f7ff fe4d 	bl	8001648 <I2C_TransferConfig>
 80019ae:	e7ac      	b.n	800190a <HAL_I2C_Master_Transmit+0x76>
 80019b0:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 80019b2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80019b4:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 80019b6:	b292      	uxth	r2, r2
 80019b8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80019ba:	b2d2      	uxtb	r2, r2
 80019bc:	9000      	str	r0, [sp, #0]
 80019be:	e7f2      	b.n	80019a6 <HAL_I2C_Master_Transmit+0x112>
 80019c0:	fe00e800 	.word	0xfe00e800

080019c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80019c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019c6:	0004      	movs	r4, r0
 80019c8:	3441      	adds	r4, #65	; 0x41
 80019ca:	7822      	ldrb	r2, [r4, #0]
{
 80019cc:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80019ce:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80019d0:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80019d2:	2a20      	cmp	r2, #32
 80019d4:	d118      	bne.n	8001a08 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 80019d6:	001d      	movs	r5, r3
 80019d8:	3540      	adds	r5, #64	; 0x40
 80019da:	782e      	ldrb	r6, [r5, #0]
 80019dc:	2e01      	cmp	r6, #1
 80019de:	d013      	beq.n	8001a08 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 80019e0:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80019e2:	3022      	adds	r0, #34	; 0x22
 80019e4:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 80019e6:	681e      	ldr	r6, [r3, #0]
 80019e8:	3823      	subs	r0, #35	; 0x23
 80019ea:	4386      	bics	r6, r0
 80019ec:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80019ee:	681e      	ldr	r6, [r3, #0]
 80019f0:	4f06      	ldr	r7, [pc, #24]	; (8001a0c <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 80019f2:	403e      	ands	r6, r7
 80019f4:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 80019f6:	681e      	ldr	r6, [r3, #0]
 80019f8:	4331      	orrs	r1, r6
 80019fa:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80019fc:	6819      	ldr	r1, [r3, #0]
 80019fe:	4308      	orrs	r0, r1
 8001a00:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8001a02:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001a04:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8001a06:	7028      	strb	r0, [r5, #0]
  }
}
 8001a08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a0a:	46c0      	nop			; (mov r8, r8)
 8001a0c:	ffffefff 	.word	0xffffefff

08001a10 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a10:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a12:	0005      	movs	r5, r0
 8001a14:	3541      	adds	r5, #65	; 0x41
 8001a16:	782a      	ldrb	r2, [r5, #0]
{
 8001a18:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a1a:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001a1c:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a1e:	2a20      	cmp	r2, #32
 8001a20:	d117      	bne.n	8001a52 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8001a22:	001c      	movs	r4, r3
 8001a24:	3440      	adds	r4, #64	; 0x40
 8001a26:	7826      	ldrb	r6, [r4, #0]
 8001a28:	2e01      	cmp	r6, #1
 8001a2a:	d012      	beq.n	8001a52 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 8001a2c:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a2e:	3022      	adds	r0, #34	; 0x22
 8001a30:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 8001a32:	681e      	ldr	r6, [r3, #0]
 8001a34:	3823      	subs	r0, #35	; 0x23
 8001a36:	4386      	bics	r6, r0
 8001a38:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8001a3a:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8001a3c:	4f05      	ldr	r7, [pc, #20]	; (8001a54 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 8001a3e:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8001a40:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8001a42:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8001a44:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8001a46:	6819      	ldr	r1, [r3, #0]
 8001a48:	4308      	orrs	r0, r1
 8001a4a:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8001a4c:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001a4e:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8001a50:	7020      	strb	r0, [r4, #0]
  }
}
 8001a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a54:	fffff0ff 	.word	0xfffff0ff

08001a58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a58:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a5a:	6803      	ldr	r3, [r0, #0]
{
 8001a5c:	b085      	sub	sp, #20
 8001a5e:	0005      	movs	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a60:	07db      	lsls	r3, r3, #31
 8001a62:	d42f      	bmi.n	8001ac4 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a64:	682b      	ldr	r3, [r5, #0]
 8001a66:	079b      	lsls	r3, r3, #30
 8001a68:	d500      	bpl.n	8001a6c <HAL_RCC_OscConfig+0x14>
 8001a6a:	e081      	b.n	8001b70 <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a6c:	682b      	ldr	r3, [r5, #0]
 8001a6e:	071b      	lsls	r3, r3, #28
 8001a70:	d500      	bpl.n	8001a74 <HAL_RCC_OscConfig+0x1c>
 8001a72:	e0bc      	b.n	8001bee <HAL_RCC_OscConfig+0x196>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a74:	682b      	ldr	r3, [r5, #0]
 8001a76:	075b      	lsls	r3, r3, #29
 8001a78:	d500      	bpl.n	8001a7c <HAL_RCC_OscConfig+0x24>
 8001a7a:	e0df      	b.n	8001c3c <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001a7c:	682b      	ldr	r3, [r5, #0]
 8001a7e:	06db      	lsls	r3, r3, #27
 8001a80:	d51a      	bpl.n	8001ab8 <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001a82:	696a      	ldr	r2, [r5, #20]
 8001a84:	4cb5      	ldr	r4, [pc, #724]	; (8001d5c <HAL_RCC_OscConfig+0x304>)
 8001a86:	2304      	movs	r3, #4
 8001a88:	2a01      	cmp	r2, #1
 8001a8a:	d000      	beq.n	8001a8e <HAL_RCC_OscConfig+0x36>
 8001a8c:	e14b      	b.n	8001d26 <HAL_RCC_OscConfig+0x2ce>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a8e:	6b61      	ldr	r1, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001a90:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a92:	430b      	orrs	r3, r1
 8001a94:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8001a96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	6362      	str	r2, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001a9c:	f7ff fb00 	bl	80010a0 <HAL_GetTick>
 8001aa0:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001aa2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001aa4:	4233      	tst	r3, r6
 8001aa6:	d100      	bne.n	8001aaa <HAL_RCC_OscConfig+0x52>
 8001aa8:	e136      	b.n	8001d18 <HAL_RCC_OscConfig+0x2c0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001aaa:	21f8      	movs	r1, #248	; 0xf8
 8001aac:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001aae:	69ab      	ldr	r3, [r5, #24]
 8001ab0:	438a      	bics	r2, r1
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	6363      	str	r3, [r4, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ab8:	6a29      	ldr	r1, [r5, #32]
 8001aba:	2900      	cmp	r1, #0
 8001abc:	d000      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x68>
 8001abe:	e159      	b.n	8001d74 <HAL_RCC_OscConfig+0x31c>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001ac0:	2000      	movs	r0, #0
 8001ac2:	e013      	b.n	8001aec <HAL_RCC_OscConfig+0x94>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ac4:	210c      	movs	r1, #12
 8001ac6:	4ca5      	ldr	r4, [pc, #660]	; (8001d5c <HAL_RCC_OscConfig+0x304>)
 8001ac8:	6862      	ldr	r2, [r4, #4]
 8001aca:	400a      	ands	r2, r1
 8001acc:	2a04      	cmp	r2, #4
 8001ace:	d006      	beq.n	8001ade <HAL_RCC_OscConfig+0x86>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ad0:	6863      	ldr	r3, [r4, #4]
 8001ad2:	400b      	ands	r3, r1
 8001ad4:	2b08      	cmp	r3, #8
 8001ad6:	d10b      	bne.n	8001af0 <HAL_RCC_OscConfig+0x98>
 8001ad8:	6863      	ldr	r3, [r4, #4]
 8001ada:	03db      	lsls	r3, r3, #15
 8001adc:	d508      	bpl.n	8001af0 <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ade:	6823      	ldr	r3, [r4, #0]
 8001ae0:	039b      	lsls	r3, r3, #14
 8001ae2:	d5bf      	bpl.n	8001a64 <HAL_RCC_OscConfig+0xc>
 8001ae4:	686b      	ldr	r3, [r5, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1bc      	bne.n	8001a64 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001aea:	2001      	movs	r0, #1
}
 8001aec:	b005      	add	sp, #20
 8001aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001af0:	686b      	ldr	r3, [r5, #4]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d113      	bne.n	8001b1e <HAL_RCC_OscConfig+0xc6>
 8001af6:	2380      	movs	r3, #128	; 0x80
 8001af8:	6822      	ldr	r2, [r4, #0]
 8001afa:	025b      	lsls	r3, r3, #9
 8001afc:	4313      	orrs	r3, r2
 8001afe:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001b00:	f7ff face 	bl	80010a0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b04:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8001b06:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b08:	02b6      	lsls	r6, r6, #10
 8001b0a:	6823      	ldr	r3, [r4, #0]
 8001b0c:	4233      	tst	r3, r6
 8001b0e:	d1a9      	bne.n	8001a64 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b10:	f7ff fac6 	bl	80010a0 <HAL_GetTick>
 8001b14:	1bc0      	subs	r0, r0, r7
 8001b16:	2864      	cmp	r0, #100	; 0x64
 8001b18:	d9f7      	bls.n	8001b0a <HAL_RCC_OscConfig+0xb2>
            return HAL_TIMEOUT;
 8001b1a:	2003      	movs	r0, #3
 8001b1c:	e7e6      	b.n	8001aec <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d116      	bne.n	8001b50 <HAL_RCC_OscConfig+0xf8>
 8001b22:	6823      	ldr	r3, [r4, #0]
 8001b24:	4a8e      	ldr	r2, [pc, #568]	; (8001d60 <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b26:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b28:	4013      	ands	r3, r2
 8001b2a:	6023      	str	r3, [r4, #0]
 8001b2c:	6823      	ldr	r3, [r4, #0]
 8001b2e:	4a8d      	ldr	r2, [pc, #564]	; (8001d64 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b30:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b32:	4013      	ands	r3, r2
 8001b34:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001b36:	f7ff fab3 	bl	80010a0 <HAL_GetTick>
 8001b3a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b3c:	6823      	ldr	r3, [r4, #0]
 8001b3e:	4233      	tst	r3, r6
 8001b40:	d100      	bne.n	8001b44 <HAL_RCC_OscConfig+0xec>
 8001b42:	e78f      	b.n	8001a64 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b44:	f7ff faac 	bl	80010a0 <HAL_GetTick>
 8001b48:	1bc0      	subs	r0, r0, r7
 8001b4a:	2864      	cmp	r0, #100	; 0x64
 8001b4c:	d9f6      	bls.n	8001b3c <HAL_RCC_OscConfig+0xe4>
 8001b4e:	e7e4      	b.n	8001b1a <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b50:	2b05      	cmp	r3, #5
 8001b52:	d105      	bne.n	8001b60 <HAL_RCC_OscConfig+0x108>
 8001b54:	2380      	movs	r3, #128	; 0x80
 8001b56:	6822      	ldr	r2, [r4, #0]
 8001b58:	02db      	lsls	r3, r3, #11
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	6023      	str	r3, [r4, #0]
 8001b5e:	e7ca      	b.n	8001af6 <HAL_RCC_OscConfig+0x9e>
 8001b60:	6823      	ldr	r3, [r4, #0]
 8001b62:	4a7f      	ldr	r2, [pc, #508]	; (8001d60 <HAL_RCC_OscConfig+0x308>)
 8001b64:	4013      	ands	r3, r2
 8001b66:	6023      	str	r3, [r4, #0]
 8001b68:	6823      	ldr	r3, [r4, #0]
 8001b6a:	4a7e      	ldr	r2, [pc, #504]	; (8001d64 <HAL_RCC_OscConfig+0x30c>)
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	e7c6      	b.n	8001afe <HAL_RCC_OscConfig+0xa6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b70:	220c      	movs	r2, #12
 8001b72:	4c7a      	ldr	r4, [pc, #488]	; (8001d5c <HAL_RCC_OscConfig+0x304>)
 8001b74:	6863      	ldr	r3, [r4, #4]
 8001b76:	4213      	tst	r3, r2
 8001b78:	d006      	beq.n	8001b88 <HAL_RCC_OscConfig+0x130>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b7a:	6863      	ldr	r3, [r4, #4]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	2b08      	cmp	r3, #8
 8001b80:	d110      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x14c>
 8001b82:	6863      	ldr	r3, [r4, #4]
 8001b84:	03db      	lsls	r3, r3, #15
 8001b86:	d40d      	bmi.n	8001ba4 <HAL_RCC_OscConfig+0x14c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b88:	6823      	ldr	r3, [r4, #0]
 8001b8a:	079b      	lsls	r3, r3, #30
 8001b8c:	d502      	bpl.n	8001b94 <HAL_RCC_OscConfig+0x13c>
 8001b8e:	68eb      	ldr	r3, [r5, #12]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d1aa      	bne.n	8001aea <HAL_RCC_OscConfig+0x92>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b94:	21f8      	movs	r1, #248	; 0xf8
 8001b96:	6822      	ldr	r2, [r4, #0]
 8001b98:	692b      	ldr	r3, [r5, #16]
 8001b9a:	438a      	bics	r2, r1
 8001b9c:	00db      	lsls	r3, r3, #3
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	6023      	str	r3, [r4, #0]
 8001ba2:	e763      	b.n	8001a6c <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ba4:	68ea      	ldr	r2, [r5, #12]
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	2a00      	cmp	r2, #0
 8001baa:	d00f      	beq.n	8001bcc <HAL_RCC_OscConfig+0x174>
        __HAL_RCC_HSI_ENABLE();
 8001bac:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bae:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001bb4:	f7ff fa74 	bl	80010a0 <HAL_GetTick>
 8001bb8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bba:	6823      	ldr	r3, [r4, #0]
 8001bbc:	4233      	tst	r3, r6
 8001bbe:	d1e9      	bne.n	8001b94 <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bc0:	f7ff fa6e 	bl	80010a0 <HAL_GetTick>
 8001bc4:	1bc0      	subs	r0, r0, r7
 8001bc6:	2802      	cmp	r0, #2
 8001bc8:	d9f7      	bls.n	8001bba <HAL_RCC_OscConfig+0x162>
 8001bca:	e7a6      	b.n	8001b1a <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_HSI_DISABLE();
 8001bcc:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bce:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8001bd0:	439a      	bics	r2, r3
 8001bd2:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 8001bd4:	f7ff fa64 	bl	80010a0 <HAL_GetTick>
 8001bd8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bda:	6823      	ldr	r3, [r4, #0]
 8001bdc:	4233      	tst	r3, r6
 8001bde:	d100      	bne.n	8001be2 <HAL_RCC_OscConfig+0x18a>
 8001be0:	e744      	b.n	8001a6c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001be2:	f7ff fa5d 	bl	80010a0 <HAL_GetTick>
 8001be6:	1bc0      	subs	r0, r0, r7
 8001be8:	2802      	cmp	r0, #2
 8001bea:	d9f6      	bls.n	8001bda <HAL_RCC_OscConfig+0x182>
 8001bec:	e795      	b.n	8001b1a <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bee:	69ea      	ldr	r2, [r5, #28]
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	4c5a      	ldr	r4, [pc, #360]	; (8001d5c <HAL_RCC_OscConfig+0x304>)
 8001bf4:	2a00      	cmp	r2, #0
 8001bf6:	d010      	beq.n	8001c1a <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 8001bf8:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bfa:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	6263      	str	r3, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8001c00:	f7ff fa4e 	bl	80010a0 <HAL_GetTick>
 8001c04:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c08:	4233      	tst	r3, r6
 8001c0a:	d000      	beq.n	8001c0e <HAL_RCC_OscConfig+0x1b6>
 8001c0c:	e732      	b.n	8001a74 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c0e:	f7ff fa47 	bl	80010a0 <HAL_GetTick>
 8001c12:	1bc0      	subs	r0, r0, r7
 8001c14:	2802      	cmp	r0, #2
 8001c16:	d9f6      	bls.n	8001c06 <HAL_RCC_OscConfig+0x1ae>
 8001c18:	e77f      	b.n	8001b1a <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_LSI_DISABLE();
 8001c1a:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c1c:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8001c1e:	439a      	bics	r2, r3
 8001c20:	6262      	str	r2, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8001c22:	f7ff fa3d 	bl	80010a0 <HAL_GetTick>
 8001c26:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c2a:	4233      	tst	r3, r6
 8001c2c:	d100      	bne.n	8001c30 <HAL_RCC_OscConfig+0x1d8>
 8001c2e:	e721      	b.n	8001a74 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c30:	f7ff fa36 	bl	80010a0 <HAL_GetTick>
 8001c34:	1bc0      	subs	r0, r0, r7
 8001c36:	2802      	cmp	r0, #2
 8001c38:	d9f6      	bls.n	8001c28 <HAL_RCC_OscConfig+0x1d0>
 8001c3a:	e76e      	b.n	8001b1a <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c3c:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001c3e:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c40:	4c46      	ldr	r4, [pc, #280]	; (8001d5c <HAL_RCC_OscConfig+0x304>)
 8001c42:	0552      	lsls	r2, r2, #21
 8001c44:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001c46:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c48:	4213      	tst	r3, r2
 8001c4a:	d108      	bne.n	8001c5e <HAL_RCC_OscConfig+0x206>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c4c:	69e3      	ldr	r3, [r4, #28]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	61e3      	str	r3, [r4, #28]
 8001c52:	69e3      	ldr	r3, [r4, #28]
 8001c54:	4013      	ands	r3, r2
 8001c56:	9303      	str	r3, [sp, #12]
 8001c58:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c5e:	2780      	movs	r7, #128	; 0x80
 8001c60:	4e41      	ldr	r6, [pc, #260]	; (8001d68 <HAL_RCC_OscConfig+0x310>)
 8001c62:	007f      	lsls	r7, r7, #1
 8001c64:	6833      	ldr	r3, [r6, #0]
 8001c66:	423b      	tst	r3, r7
 8001c68:	d006      	beq.n	8001c78 <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c6a:	68ab      	ldr	r3, [r5, #8]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d113      	bne.n	8001c98 <HAL_RCC_OscConfig+0x240>
 8001c70:	6a22      	ldr	r2, [r4, #32]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	6223      	str	r3, [r4, #32]
 8001c76:	e030      	b.n	8001cda <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c78:	6833      	ldr	r3, [r6, #0]
 8001c7a:	433b      	orrs	r3, r7
 8001c7c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001c7e:	f7ff fa0f 	bl	80010a0 <HAL_GetTick>
 8001c82:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c84:	6833      	ldr	r3, [r6, #0]
 8001c86:	423b      	tst	r3, r7
 8001c88:	d1ef      	bne.n	8001c6a <HAL_RCC_OscConfig+0x212>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c8a:	f7ff fa09 	bl	80010a0 <HAL_GetTick>
 8001c8e:	9b01      	ldr	r3, [sp, #4]
 8001c90:	1ac0      	subs	r0, r0, r3
 8001c92:	2864      	cmp	r0, #100	; 0x64
 8001c94:	d9f6      	bls.n	8001c84 <HAL_RCC_OscConfig+0x22c>
 8001c96:	e740      	b.n	8001b1a <HAL_RCC_OscConfig+0xc2>
 8001c98:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d114      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x270>
 8001c9e:	6a23      	ldr	r3, [r4, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ca0:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ca2:	4393      	bics	r3, r2
 8001ca4:	6223      	str	r3, [r4, #32]
 8001ca6:	6a23      	ldr	r3, [r4, #32]
 8001ca8:	3203      	adds	r2, #3
 8001caa:	4393      	bics	r3, r2
 8001cac:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001cae:	f7ff f9f7 	bl	80010a0 <HAL_GetTick>
 8001cb2:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cb4:	6a23      	ldr	r3, [r4, #32]
 8001cb6:	423b      	tst	r3, r7
 8001cb8:	d025      	beq.n	8001d06 <HAL_RCC_OscConfig+0x2ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cba:	f7ff f9f1 	bl	80010a0 <HAL_GetTick>
 8001cbe:	4b2b      	ldr	r3, [pc, #172]	; (8001d6c <HAL_RCC_OscConfig+0x314>)
 8001cc0:	1b80      	subs	r0, r0, r6
 8001cc2:	4298      	cmp	r0, r3
 8001cc4:	d9f6      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x25c>
 8001cc6:	e728      	b.n	8001b1a <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cc8:	2b05      	cmp	r3, #5
 8001cca:	d10b      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x28c>
 8001ccc:	6a21      	ldr	r1, [r4, #32]
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	430b      	orrs	r3, r1
 8001cd2:	6223      	str	r3, [r4, #32]
 8001cd4:	6a23      	ldr	r3, [r4, #32]
 8001cd6:	431a      	orrs	r2, r3
 8001cd8:	6222      	str	r2, [r4, #32]
      tickstart = HAL_GetTick();
 8001cda:	f7ff f9e1 	bl	80010a0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cde:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8001ce0:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ce2:	e00d      	b.n	8001d00 <HAL_RCC_OscConfig+0x2a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ce4:	6a23      	ldr	r3, [r4, #32]
 8001ce6:	4393      	bics	r3, r2
 8001ce8:	2204      	movs	r2, #4
 8001cea:	6223      	str	r3, [r4, #32]
 8001cec:	6a23      	ldr	r3, [r4, #32]
 8001cee:	4393      	bics	r3, r2
 8001cf0:	e7c0      	b.n	8001c74 <HAL_RCC_OscConfig+0x21c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cf2:	f7ff f9d5 	bl	80010a0 <HAL_GetTick>
 8001cf6:	4b1d      	ldr	r3, [pc, #116]	; (8001d6c <HAL_RCC_OscConfig+0x314>)
 8001cf8:	1b80      	subs	r0, r0, r6
 8001cfa:	4298      	cmp	r0, r3
 8001cfc:	d900      	bls.n	8001d00 <HAL_RCC_OscConfig+0x2a8>
 8001cfe:	e70c      	b.n	8001b1a <HAL_RCC_OscConfig+0xc2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d00:	6a23      	ldr	r3, [r4, #32]
 8001d02:	423b      	tst	r3, r7
 8001d04:	d0f5      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x29a>
    if(pwrclkchanged == SET)
 8001d06:	9b00      	ldr	r3, [sp, #0]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d000      	beq.n	8001d0e <HAL_RCC_OscConfig+0x2b6>
 8001d0c:	e6b6      	b.n	8001a7c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d0e:	69e3      	ldr	r3, [r4, #28]
 8001d10:	4a17      	ldr	r2, [pc, #92]	; (8001d70 <HAL_RCC_OscConfig+0x318>)
 8001d12:	4013      	ands	r3, r2
 8001d14:	61e3      	str	r3, [r4, #28]
 8001d16:	e6b1      	b.n	8001a7c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001d18:	f7ff f9c2 	bl	80010a0 <HAL_GetTick>
 8001d1c:	1bc0      	subs	r0, r0, r7
 8001d1e:	2802      	cmp	r0, #2
 8001d20:	d800      	bhi.n	8001d24 <HAL_RCC_OscConfig+0x2cc>
 8001d22:	e6be      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4a>
 8001d24:	e6f9      	b.n	8001b1a <HAL_RCC_OscConfig+0xc2>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001d26:	3205      	adds	r2, #5
 8001d28:	d103      	bne.n	8001d32 <HAL_RCC_OscConfig+0x2da>
      __HAL_RCC_HSI14ADC_ENABLE();
 8001d2a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001d2c:	439a      	bics	r2, r3
 8001d2e:	6362      	str	r2, [r4, #52]	; 0x34
 8001d30:	e6bb      	b.n	8001aaa <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001d32:	6b62      	ldr	r2, [r4, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001d34:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001d36:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8001d38:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8001d3a:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8001d3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001d3e:	4393      	bics	r3, r2
 8001d40:	6363      	str	r3, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001d42:	f7ff f9ad 	bl	80010a0 <HAL_GetTick>
 8001d46:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001d48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001d4a:	4233      	tst	r3, r6
 8001d4c:	d100      	bne.n	8001d50 <HAL_RCC_OscConfig+0x2f8>
 8001d4e:	e6b3      	b.n	8001ab8 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001d50:	f7ff f9a6 	bl	80010a0 <HAL_GetTick>
 8001d54:	1bc0      	subs	r0, r0, r7
 8001d56:	2802      	cmp	r0, #2
 8001d58:	d9f6      	bls.n	8001d48 <HAL_RCC_OscConfig+0x2f0>
 8001d5a:	e6de      	b.n	8001b1a <HAL_RCC_OscConfig+0xc2>
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	fffeffff 	.word	0xfffeffff
 8001d64:	fffbffff 	.word	0xfffbffff
 8001d68:	40007000 	.word	0x40007000
 8001d6c:	00001388 	.word	0x00001388
 8001d70:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d74:	220c      	movs	r2, #12
 8001d76:	4c26      	ldr	r4, [pc, #152]	; (8001e10 <HAL_RCC_OscConfig+0x3b8>)
      return HAL_ERROR;
 8001d78:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d7a:	6863      	ldr	r3, [r4, #4]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	2b08      	cmp	r3, #8
 8001d80:	d100      	bne.n	8001d84 <HAL_RCC_OscConfig+0x32c>
 8001d82:	e6b3      	b.n	8001aec <HAL_RCC_OscConfig+0x94>
        __HAL_RCC_PLL_DISABLE();
 8001d84:	6823      	ldr	r3, [r4, #0]
 8001d86:	4a23      	ldr	r2, [pc, #140]	; (8001e14 <HAL_RCC_OscConfig+0x3bc>)
 8001d88:	4013      	ands	r3, r2
 8001d8a:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d8c:	2902      	cmp	r1, #2
 8001d8e:	d12f      	bne.n	8001df0 <HAL_RCC_OscConfig+0x398>
        tickstart = HAL_GetTick();
 8001d90:	f7ff f986 	bl	80010a0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d94:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8001d96:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d98:	04b6      	lsls	r6, r6, #18
 8001d9a:	6823      	ldr	r3, [r4, #0]
 8001d9c:	4233      	tst	r3, r6
 8001d9e:	d121      	bne.n	8001de4 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001da0:	220f      	movs	r2, #15
 8001da2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001da4:	4393      	bics	r3, r2
 8001da6:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001da8:	4313      	orrs	r3, r2
 8001daa:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001dac:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001dae:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001db0:	6862      	ldr	r2, [r4, #4]
 8001db2:	430b      	orrs	r3, r1
 8001db4:	4918      	ldr	r1, [pc, #96]	; (8001e18 <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001db6:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001db8:	400a      	ands	r2, r1
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001dbe:	2380      	movs	r3, #128	; 0x80
 8001dc0:	6822      	ldr	r2, [r4, #0]
 8001dc2:	045b      	lsls	r3, r3, #17
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001dc8:	f7ff f96a 	bl	80010a0 <HAL_GetTick>
 8001dcc:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dce:	04ad      	lsls	r5, r5, #18
 8001dd0:	6823      	ldr	r3, [r4, #0]
 8001dd2:	422b      	tst	r3, r5
 8001dd4:	d000      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x380>
 8001dd6:	e673      	b.n	8001ac0 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dd8:	f7ff f962 	bl	80010a0 <HAL_GetTick>
 8001ddc:	1b80      	subs	r0, r0, r6
 8001dde:	2802      	cmp	r0, #2
 8001de0:	d9f6      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x378>
 8001de2:	e69a      	b.n	8001b1a <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001de4:	f7ff f95c 	bl	80010a0 <HAL_GetTick>
 8001de8:	1bc0      	subs	r0, r0, r7
 8001dea:	2802      	cmp	r0, #2
 8001dec:	d9d5      	bls.n	8001d9a <HAL_RCC_OscConfig+0x342>
 8001dee:	e694      	b.n	8001b1a <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8001df0:	f7ff f956 	bl	80010a0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001df4:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8001df6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001df8:	04ad      	lsls	r5, r5, #18
 8001dfa:	6823      	ldr	r3, [r4, #0]
 8001dfc:	422b      	tst	r3, r5
 8001dfe:	d100      	bne.n	8001e02 <HAL_RCC_OscConfig+0x3aa>
 8001e00:	e65e      	b.n	8001ac0 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e02:	f7ff f94d 	bl	80010a0 <HAL_GetTick>
 8001e06:	1b80      	subs	r0, r0, r6
 8001e08:	2802      	cmp	r0, #2
 8001e0a:	d9f6      	bls.n	8001dfa <HAL_RCC_OscConfig+0x3a2>
 8001e0c:	e685      	b.n	8001b1a <HAL_RCC_OscConfig+0xc2>
 8001e0e:	46c0      	nop			; (mov r8, r8)
 8001e10:	40021000 	.word	0x40021000
 8001e14:	feffffff 	.word	0xfeffffff
 8001e18:	ffc2ffff 	.word	0xffc2ffff

08001e1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e1c:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001e1e:	4c14      	ldr	r4, [pc, #80]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x54>)
{
 8001e20:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001e22:	2210      	movs	r2, #16
 8001e24:	0021      	movs	r1, r4
 8001e26:	4668      	mov	r0, sp
 8001e28:	f001 f96e 	bl	8003108 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001e2c:	0021      	movs	r1, r4
 8001e2e:	ad04      	add	r5, sp, #16
 8001e30:	2210      	movs	r2, #16
 8001e32:	3110      	adds	r1, #16
 8001e34:	0028      	movs	r0, r5
 8001e36:	f001 f967 	bl	8003108 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e3a:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8001e3c:	4e0d      	ldr	r6, [pc, #52]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x58>)
 8001e3e:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001e40:	401a      	ands	r2, r3
 8001e42:	2a08      	cmp	r2, #8
 8001e44:	d111      	bne.n	8001e6a <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001e46:	200f      	movs	r0, #15
 8001e48:	466a      	mov	r2, sp
 8001e4a:	0c99      	lsrs	r1, r3, #18
 8001e4c:	4001      	ands	r1, r0
 8001e4e:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001e50:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8001e52:	4002      	ands	r2, r0
 8001e54:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001e56:	03db      	lsls	r3, r3, #15
 8001e58:	d505      	bpl.n	8001e66 <HAL_RCC_GetSysClockFreq+0x4a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001e5a:	4807      	ldr	r0, [pc, #28]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x5c>)
 8001e5c:	f7fe f95e 	bl	800011c <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8001e60:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001e62:	b008      	add	sp, #32
 8001e64:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8001e66:	4805      	ldr	r0, [pc, #20]	; (8001e7c <HAL_RCC_GetSysClockFreq+0x60>)
 8001e68:	e7fa      	b.n	8001e60 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
 8001e6a:	4803      	ldr	r0, [pc, #12]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 8001e6c:	e7f9      	b.n	8001e62 <HAL_RCC_GetSysClockFreq+0x46>
 8001e6e:	46c0      	nop			; (mov r8, r8)
 8001e70:	08003134 	.word	0x08003134
 8001e74:	40021000 	.word	0x40021000
 8001e78:	007a1200 	.word	0x007a1200
 8001e7c:	003d0900 	.word	0x003d0900

08001e80 <HAL_RCC_ClockConfig>:
{
 8001e80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001e82:	2201      	movs	r2, #1
 8001e84:	4c43      	ldr	r4, [pc, #268]	; (8001f94 <HAL_RCC_ClockConfig+0x114>)
{
 8001e86:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001e88:	6823      	ldr	r3, [r4, #0]
{
 8001e8a:	000f      	movs	r7, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	428b      	cmp	r3, r1
 8001e90:	d31c      	bcc.n	8001ecc <HAL_RCC_ClockConfig+0x4c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e92:	6832      	ldr	r2, [r6, #0]
 8001e94:	0793      	lsls	r3, r2, #30
 8001e96:	d423      	bmi.n	8001ee0 <HAL_RCC_ClockConfig+0x60>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e98:	07d3      	lsls	r3, r2, #31
 8001e9a:	d429      	bmi.n	8001ef0 <HAL_RCC_ClockConfig+0x70>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	6822      	ldr	r2, [r4, #0]
 8001ea0:	401a      	ands	r2, r3
 8001ea2:	4297      	cmp	r7, r2
 8001ea4:	d367      	bcc.n	8001f76 <HAL_RCC_ClockConfig+0xf6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea6:	6833      	ldr	r3, [r6, #0]
 8001ea8:	4c3b      	ldr	r4, [pc, #236]	; (8001f98 <HAL_RCC_ClockConfig+0x118>)
 8001eaa:	075b      	lsls	r3, r3, #29
 8001eac:	d46a      	bmi.n	8001f84 <HAL_RCC_ClockConfig+0x104>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001eae:	f7ff ffb5 	bl	8001e1c <HAL_RCC_GetSysClockFreq>
 8001eb2:	6863      	ldr	r3, [r4, #4]
 8001eb4:	4a39      	ldr	r2, [pc, #228]	; (8001f9c <HAL_RCC_ClockConfig+0x11c>)
 8001eb6:	061b      	lsls	r3, r3, #24
 8001eb8:	0f1b      	lsrs	r3, r3, #28
 8001eba:	5cd3      	ldrb	r3, [r2, r3]
 8001ebc:	40d8      	lsrs	r0, r3
 8001ebe:	4b38      	ldr	r3, [pc, #224]	; (8001fa0 <HAL_RCC_ClockConfig+0x120>)
 8001ec0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001ec2:	2000      	movs	r0, #0
 8001ec4:	f7ff f8c2 	bl	800104c <HAL_InitTick>
  return HAL_OK;
 8001ec8:	2000      	movs	r0, #0
 8001eca:	e008      	b.n	8001ede <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ecc:	6823      	ldr	r3, [r4, #0]
 8001ece:	4393      	bics	r3, r2
 8001ed0:	430b      	orrs	r3, r1
 8001ed2:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ed4:	6823      	ldr	r3, [r4, #0]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	4299      	cmp	r1, r3
 8001eda:	d0da      	beq.n	8001e92 <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8001edc:	2001      	movs	r0, #1
}
 8001ede:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ee0:	20f0      	movs	r0, #240	; 0xf0
 8001ee2:	492d      	ldr	r1, [pc, #180]	; (8001f98 <HAL_RCC_ClockConfig+0x118>)
 8001ee4:	684b      	ldr	r3, [r1, #4]
 8001ee6:	4383      	bics	r3, r0
 8001ee8:	68b0      	ldr	r0, [r6, #8]
 8001eea:	4303      	orrs	r3, r0
 8001eec:	604b      	str	r3, [r1, #4]
 8001eee:	e7d3      	b.n	8001e98 <HAL_RCC_ClockConfig+0x18>
 8001ef0:	4d29      	ldr	r5, [pc, #164]	; (8001f98 <HAL_RCC_ClockConfig+0x118>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ef2:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef4:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ef6:	2a01      	cmp	r2, #1
 8001ef8:	d11a      	bne.n	8001f30 <HAL_RCC_ClockConfig+0xb0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001efa:	039b      	lsls	r3, r3, #14
 8001efc:	d5ee      	bpl.n	8001edc <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001efe:	2103      	movs	r1, #3
 8001f00:	686b      	ldr	r3, [r5, #4]
 8001f02:	438b      	bics	r3, r1
 8001f04:	4313      	orrs	r3, r2
 8001f06:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001f08:	f7ff f8ca 	bl	80010a0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f0c:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001f0e:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d115      	bne.n	8001f40 <HAL_RCC_ClockConfig+0xc0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f14:	220c      	movs	r2, #12
 8001f16:	686b      	ldr	r3, [r5, #4]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	2b04      	cmp	r3, #4
 8001f1c:	d0be      	beq.n	8001e9c <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f1e:	f7ff f8bf 	bl	80010a0 <HAL_GetTick>
 8001f22:	9b01      	ldr	r3, [sp, #4]
 8001f24:	1ac0      	subs	r0, r0, r3
 8001f26:	4b1f      	ldr	r3, [pc, #124]	; (8001fa4 <HAL_RCC_ClockConfig+0x124>)
 8001f28:	4298      	cmp	r0, r3
 8001f2a:	d9f3      	bls.n	8001f14 <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 8001f2c:	2003      	movs	r0, #3
 8001f2e:	e7d6      	b.n	8001ede <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f30:	2a02      	cmp	r2, #2
 8001f32:	d102      	bne.n	8001f3a <HAL_RCC_ClockConfig+0xba>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f34:	019b      	lsls	r3, r3, #6
 8001f36:	d4e2      	bmi.n	8001efe <HAL_RCC_ClockConfig+0x7e>
 8001f38:	e7d0      	b.n	8001edc <HAL_RCC_ClockConfig+0x5c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f3a:	079b      	lsls	r3, r3, #30
 8001f3c:	d4df      	bmi.n	8001efe <HAL_RCC_ClockConfig+0x7e>
 8001f3e:	e7cd      	b.n	8001edc <HAL_RCC_ClockConfig+0x5c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d012      	beq.n	8001f6a <HAL_RCC_ClockConfig+0xea>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f44:	220c      	movs	r2, #12
 8001f46:	686b      	ldr	r3, [r5, #4]
 8001f48:	4213      	tst	r3, r2
 8001f4a:	d0a7      	beq.n	8001e9c <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f4c:	f7ff f8a8 	bl	80010a0 <HAL_GetTick>
 8001f50:	9b01      	ldr	r3, [sp, #4]
 8001f52:	1ac0      	subs	r0, r0, r3
 8001f54:	4b13      	ldr	r3, [pc, #76]	; (8001fa4 <HAL_RCC_ClockConfig+0x124>)
 8001f56:	4298      	cmp	r0, r3
 8001f58:	d9f4      	bls.n	8001f44 <HAL_RCC_ClockConfig+0xc4>
 8001f5a:	e7e7      	b.n	8001f2c <HAL_RCC_ClockConfig+0xac>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f5c:	f7ff f8a0 	bl	80010a0 <HAL_GetTick>
 8001f60:	9b01      	ldr	r3, [sp, #4]
 8001f62:	1ac0      	subs	r0, r0, r3
 8001f64:	4b0f      	ldr	r3, [pc, #60]	; (8001fa4 <HAL_RCC_ClockConfig+0x124>)
 8001f66:	4298      	cmp	r0, r3
 8001f68:	d8e0      	bhi.n	8001f2c <HAL_RCC_ClockConfig+0xac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f6a:	220c      	movs	r2, #12
 8001f6c:	686b      	ldr	r3, [r5, #4]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	2b08      	cmp	r3, #8
 8001f72:	d1f3      	bne.n	8001f5c <HAL_RCC_ClockConfig+0xdc>
 8001f74:	e792      	b.n	8001e9c <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f76:	6822      	ldr	r2, [r4, #0]
 8001f78:	439a      	bics	r2, r3
 8001f7a:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f7c:	6822      	ldr	r2, [r4, #0]
 8001f7e:	421a      	tst	r2, r3
 8001f80:	d1ac      	bne.n	8001edc <HAL_RCC_ClockConfig+0x5c>
 8001f82:	e790      	b.n	8001ea6 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001f84:	6863      	ldr	r3, [r4, #4]
 8001f86:	4a08      	ldr	r2, [pc, #32]	; (8001fa8 <HAL_RCC_ClockConfig+0x128>)
 8001f88:	4013      	ands	r3, r2
 8001f8a:	68f2      	ldr	r2, [r6, #12]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	6063      	str	r3, [r4, #4]
 8001f90:	e78d      	b.n	8001eae <HAL_RCC_ClockConfig+0x2e>
 8001f92:	46c0      	nop			; (mov r8, r8)
 8001f94:	40022000 	.word	0x40022000
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	08003268 	.word	0x08003268
 8001fa0:	20000000 	.word	0x20000000
 8001fa4:	00001388 	.word	0x00001388
 8001fa8:	fffff8ff 	.word	0xfffff8ff

08001fac <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8001fac:	4b01      	ldr	r3, [pc, #4]	; (8001fb4 <HAL_RCC_GetHCLKFreq+0x8>)
 8001fae:	6818      	ldr	r0, [r3, #0]
}
 8001fb0:	4770      	bx	lr
 8001fb2:	46c0      	nop			; (mov r8, r8)
 8001fb4:	20000000 	.word	0x20000000

08001fb8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001fb8:	4b04      	ldr	r3, [pc, #16]	; (8001fcc <HAL_RCC_GetPCLK1Freq+0x14>)
 8001fba:	4a05      	ldr	r2, [pc, #20]	; (8001fd0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	055b      	lsls	r3, r3, #21
 8001fc0:	0f5b      	lsrs	r3, r3, #29
 8001fc2:	5cd3      	ldrb	r3, [r2, r3]
 8001fc4:	4a03      	ldr	r2, [pc, #12]	; (8001fd4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001fc6:	6810      	ldr	r0, [r2, #0]
 8001fc8:	40d8      	lsrs	r0, r3
}    
 8001fca:	4770      	bx	lr
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	08003278 	.word	0x08003278
 8001fd4:	20000000 	.word	0x20000000

08001fd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fd8:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001fda:	6803      	ldr	r3, [r0, #0]
{
 8001fdc:	b085      	sub	sp, #20
 8001fde:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001fe0:	03db      	lsls	r3, r3, #15
 8001fe2:	d528      	bpl.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fe4:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001fe6:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fe8:	4c37      	ldr	r4, [pc, #220]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8001fea:	0552      	lsls	r2, r2, #21
 8001fec:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001fee:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ff0:	4213      	tst	r3, r2
 8001ff2:	d108      	bne.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ff4:	69e3      	ldr	r3, [r4, #28]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	61e3      	str	r3, [r4, #28]
 8001ffa:	69e3      	ldr	r3, [r4, #28]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	9303      	str	r3, [sp, #12]
 8002000:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8002002:	2301      	movs	r3, #1
 8002004:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002006:	2780      	movs	r7, #128	; 0x80
 8002008:	4e30      	ldr	r6, [pc, #192]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 800200a:	007f      	lsls	r7, r7, #1
 800200c:	6833      	ldr	r3, [r6, #0]
 800200e:	423b      	tst	r3, r7
 8002010:	d026      	beq.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x88>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002012:	22c0      	movs	r2, #192	; 0xc0
 8002014:	6a23      	ldr	r3, [r4, #32]
 8002016:	0092      	lsls	r2, r2, #2
 8002018:	4013      	ands	r3, r2
 800201a:	4e2d      	ldr	r6, [pc, #180]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800201c:	d132      	bne.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0xac>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800201e:	6a23      	ldr	r3, [r4, #32]
 8002020:	401e      	ands	r6, r3
 8002022:	686b      	ldr	r3, [r5, #4]
 8002024:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002026:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002028:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 800202a:	2b01      	cmp	r3, #1
 800202c:	d103      	bne.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800202e:	69e3      	ldr	r3, [r4, #28]
 8002030:	4a28      	ldr	r2, [pc, #160]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8002032:	4013      	ands	r3, r2
 8002034:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002036:	682a      	ldr	r2, [r5, #0]
 8002038:	07d3      	lsls	r3, r2, #31
 800203a:	d506      	bpl.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800203c:	2003      	movs	r0, #3
 800203e:	4922      	ldr	r1, [pc, #136]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8002040:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8002042:	4383      	bics	r3, r0
 8002044:	68a8      	ldr	r0, [r5, #8]
 8002046:	4303      	orrs	r3, r0
 8002048:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800204a:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800204c:	0693      	lsls	r3, r2, #26
 800204e:	d517      	bpl.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002050:	2110      	movs	r1, #16
 8002052:	4a1d      	ldr	r2, [pc, #116]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8002054:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002056:	438b      	bics	r3, r1
 8002058:	68e9      	ldr	r1, [r5, #12]
 800205a:	430b      	orrs	r3, r1
 800205c:	6313      	str	r3, [r2, #48]	; 0x30
 800205e:	e00f      	b.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0xa8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002060:	6833      	ldr	r3, [r6, #0]
 8002062:	433b      	orrs	r3, r7
 8002064:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002066:	f7ff f81b 	bl	80010a0 <HAL_GetTick>
 800206a:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800206c:	6833      	ldr	r3, [r6, #0]
 800206e:	423b      	tst	r3, r7
 8002070:	d1cf      	bne.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002072:	f7ff f815 	bl	80010a0 <HAL_GetTick>
 8002076:	9b01      	ldr	r3, [sp, #4]
 8002078:	1ac0      	subs	r0, r0, r3
 800207a:	2864      	cmp	r0, #100	; 0x64
 800207c:	d9f6      	bls.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x94>
          return HAL_TIMEOUT;
 800207e:	2003      	movs	r0, #3
}
 8002080:	b005      	add	sp, #20
 8002082:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002084:	6869      	ldr	r1, [r5, #4]
 8002086:	400a      	ands	r2, r1
 8002088:	4293      	cmp	r3, r2
 800208a:	d0c8      	beq.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 800208c:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800208e:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8002090:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002092:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 8002094:	025b      	lsls	r3, r3, #9
 8002096:	4303      	orrs	r3, r0
 8002098:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800209a:	6a23      	ldr	r3, [r4, #32]
 800209c:	480e      	ldr	r0, [pc, #56]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800209e:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020a0:	4003      	ands	r3, r0
 80020a2:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 80020a4:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80020a6:	07d3      	lsls	r3, r2, #31
 80020a8:	d5b9      	bpl.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 80020aa:	f7fe fff9 	bl	80010a0 <HAL_GetTick>
 80020ae:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020b0:	2202      	movs	r2, #2
 80020b2:	6a23      	ldr	r3, [r4, #32]
 80020b4:	4213      	tst	r3, r2
 80020b6:	d1b2      	bne.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020b8:	f7fe fff2 	bl	80010a0 <HAL_GetTick>
 80020bc:	4b07      	ldr	r3, [pc, #28]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x104>)
 80020be:	1bc0      	subs	r0, r0, r7
 80020c0:	4298      	cmp	r0, r3
 80020c2:	d9f5      	bls.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80020c4:	e7db      	b.n	800207e <HAL_RCCEx_PeriphCLKConfig+0xa6>
 80020c6:	46c0      	nop			; (mov r8, r8)
 80020c8:	40021000 	.word	0x40021000
 80020cc:	40007000 	.word	0x40007000
 80020d0:	fffffcff 	.word	0xfffffcff
 80020d4:	efffffff 	.word	0xefffffff
 80020d8:	fffeffff 	.word	0xfffeffff
 80020dc:	00001388 	.word	0x00001388

080020e0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020e0:	4a19      	ldr	r2, [pc, #100]	; (8002148 <TIM_Base_SetConfig+0x68>)
{
 80020e2:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 80020e4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020e6:	4290      	cmp	r0, r2
 80020e8:	d002      	beq.n	80020f0 <TIM_Base_SetConfig+0x10>
 80020ea:	4c18      	ldr	r4, [pc, #96]	; (800214c <TIM_Base_SetConfig+0x6c>)
 80020ec:	42a0      	cmp	r0, r4
 80020ee:	d108      	bne.n	8002102 <TIM_Base_SetConfig+0x22>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020f0:	2470      	movs	r4, #112	; 0x70
 80020f2:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 80020f4:	684c      	ldr	r4, [r1, #4]
 80020f6:	4323      	orrs	r3, r4
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020f8:	4290      	cmp	r0, r2
 80020fa:	d00b      	beq.n	8002114 <TIM_Base_SetConfig+0x34>
 80020fc:	4c13      	ldr	r4, [pc, #76]	; (800214c <TIM_Base_SetConfig+0x6c>)
 80020fe:	42a0      	cmp	r0, r4
 8002100:	d008      	beq.n	8002114 <TIM_Base_SetConfig+0x34>
 8002102:	4c13      	ldr	r4, [pc, #76]	; (8002150 <TIM_Base_SetConfig+0x70>)
 8002104:	42a0      	cmp	r0, r4
 8002106:	d005      	beq.n	8002114 <TIM_Base_SetConfig+0x34>
 8002108:	4c12      	ldr	r4, [pc, #72]	; (8002154 <TIM_Base_SetConfig+0x74>)
 800210a:	42a0      	cmp	r0, r4
 800210c:	d002      	beq.n	8002114 <TIM_Base_SetConfig+0x34>
 800210e:	4c12      	ldr	r4, [pc, #72]	; (8002158 <TIM_Base_SetConfig+0x78>)
 8002110:	42a0      	cmp	r0, r4
 8002112:	d103      	bne.n	800211c <TIM_Base_SetConfig+0x3c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002114:	4c11      	ldr	r4, [pc, #68]	; (800215c <TIM_Base_SetConfig+0x7c>)
 8002116:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002118:	68cc      	ldr	r4, [r1, #12]
 800211a:	4323      	orrs	r3, r4
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800211c:	2480      	movs	r4, #128	; 0x80
 800211e:	43a3      	bics	r3, r4
 8002120:	694c      	ldr	r4, [r1, #20]
 8002122:	4323      	orrs	r3, r4

  TIMx->CR1 = tmpcr1;
 8002124:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002126:	688b      	ldr	r3, [r1, #8]
 8002128:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800212a:	680b      	ldr	r3, [r1, #0]
 800212c:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800212e:	4290      	cmp	r0, r2
 8002130:	d005      	beq.n	800213e <TIM_Base_SetConfig+0x5e>
 8002132:	4b08      	ldr	r3, [pc, #32]	; (8002154 <TIM_Base_SetConfig+0x74>)
 8002134:	4298      	cmp	r0, r3
 8002136:	d002      	beq.n	800213e <TIM_Base_SetConfig+0x5e>
 8002138:	4b07      	ldr	r3, [pc, #28]	; (8002158 <TIM_Base_SetConfig+0x78>)
 800213a:	4298      	cmp	r0, r3
 800213c:	d101      	bne.n	8002142 <TIM_Base_SetConfig+0x62>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800213e:	690b      	ldr	r3, [r1, #16]
 8002140:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8002142:	2301      	movs	r3, #1
 8002144:	6143      	str	r3, [r0, #20]
}
 8002146:	bd10      	pop	{r4, pc}
 8002148:	40012c00 	.word	0x40012c00
 800214c:	40000400 	.word	0x40000400
 8002150:	40002000 	.word	0x40002000
 8002154:	40014400 	.word	0x40014400
 8002158:	40014800 	.word	0x40014800
 800215c:	fffffcff 	.word	0xfffffcff

08002160 <HAL_TIM_Base_Init>:
{
 8002160:	b570      	push	{r4, r5, r6, lr}
 8002162:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002164:	2001      	movs	r0, #1
  if(htim == NULL)
 8002166:	2c00      	cmp	r4, #0
 8002168:	d014      	beq.n	8002194 <HAL_TIM_Base_Init+0x34>
  if(htim->State == HAL_TIM_STATE_RESET)
 800216a:	0025      	movs	r5, r4
 800216c:	353d      	adds	r5, #61	; 0x3d
 800216e:	782b      	ldrb	r3, [r5, #0]
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b00      	cmp	r3, #0
 8002174:	d105      	bne.n	8002182 <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8002176:	0022      	movs	r2, r4
 8002178:	323c      	adds	r2, #60	; 0x3c
 800217a:	7013      	strb	r3, [r2, #0]
    HAL_TIM_Base_MspInit(htim);
 800217c:	0020      	movs	r0, r4
 800217e:	f000 ff01 	bl	8002f84 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002182:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002184:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8002186:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002188:	1d21      	adds	r1, r4, #4
 800218a:	f7ff ffa9 	bl	80020e0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800218e:	2301      	movs	r3, #1
  return HAL_OK;
 8002190:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8002192:	702b      	strb	r3, [r5, #0]
}
 8002194:	bd70      	pop	{r4, r5, r6, pc}
	...

08002198 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002198:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 800219a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800219c:	4d03      	ldr	r5, [pc, #12]	; (80021ac <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800219e:	430a      	orrs	r2, r1
 80021a0:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021a2:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021a4:	4313      	orrs	r3, r2
 80021a6:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021a8:	6083      	str	r3, [r0, #8]
}
 80021aa:	bd30      	pop	{r4, r5, pc}
 80021ac:	ffff00ff 	.word	0xffff00ff

080021b0 <HAL_TIM_ConfigClockSource>:
{
 80021b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80021b2:	0005      	movs	r5, r0
 80021b4:	2302      	movs	r3, #2
 80021b6:	353c      	adds	r5, #60	; 0x3c
 80021b8:	782a      	ldrb	r2, [r5, #0]
{
 80021ba:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 80021bc:	0018      	movs	r0, r3
 80021be:	2a01      	cmp	r2, #1
 80021c0:	d019      	beq.n	80021f6 <HAL_TIM_ConfigClockSource+0x46>
  htim->State = HAL_TIM_STATE_BUSY;
 80021c2:	0026      	movs	r6, r4
  __HAL_LOCK(htim);
 80021c4:	2701      	movs	r7, #1
  tmpsmcr = htim->Instance->SMCR;
 80021c6:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80021c8:	363d      	adds	r6, #61	; 0x3d
  __HAL_LOCK(htim);
 80021ca:	702f      	strb	r7, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80021cc:	7033      	strb	r3, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 80021ce:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021d0:	4a4f      	ldr	r2, [pc, #316]	; (8002310 <HAL_TIM_ConfigClockSource+0x160>)
 80021d2:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 80021d4:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80021d6:	680b      	ldr	r3, [r1, #0]
 80021d8:	2b40      	cmp	r3, #64	; 0x40
 80021da:	d100      	bne.n	80021de <HAL_TIM_ConfigClockSource+0x2e>
 80021dc:	e06f      	b.n	80022be <HAL_TIM_ConfigClockSource+0x10e>
 80021de:	d816      	bhi.n	800220e <HAL_TIM_ConfigClockSource+0x5e>
 80021e0:	2b10      	cmp	r3, #16
 80021e2:	d100      	bne.n	80021e6 <HAL_TIM_ConfigClockSource+0x36>
 80021e4:	e087      	b.n	80022f6 <HAL_TIM_ConfigClockSource+0x146>
 80021e6:	d807      	bhi.n	80021f8 <HAL_TIM_ConfigClockSource+0x48>
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d100      	bne.n	80021ee <HAL_TIM_ConfigClockSource+0x3e>
 80021ec:	e07d      	b.n	80022ea <HAL_TIM_ConfigClockSource+0x13a>
  htim->State = HAL_TIM_STATE_READY;
 80021ee:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80021f0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80021f2:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 80021f4:	7028      	strb	r0, [r5, #0]
}
 80021f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 80021f8:	2b20      	cmp	r3, #32
 80021fa:	d100      	bne.n	80021fe <HAL_TIM_ConfigClockSource+0x4e>
 80021fc:	e081      	b.n	8002302 <HAL_TIM_ConfigClockSource+0x152>
 80021fe:	2b30      	cmp	r3, #48	; 0x30
 8002200:	d1f5      	bne.n	80021ee <HAL_TIM_ConfigClockSource+0x3e>
   tmpsmcr &= ~TIM_SMCR_TS;
 8002202:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8002204:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002206:	4393      	bics	r3, r2
 8002208:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800220a:	2337      	movs	r3, #55	; 0x37
 800220c:	e055      	b.n	80022ba <HAL_TIM_ConfigClockSource+0x10a>
  switch (sClockSourceConfig->ClockSource)
 800220e:	2b70      	cmp	r3, #112	; 0x70
 8002210:	d033      	beq.n	800227a <HAL_TIM_ConfigClockSource+0xca>
 8002212:	d81b      	bhi.n	800224c <HAL_TIM_ConfigClockSource+0x9c>
 8002214:	2b50      	cmp	r3, #80	; 0x50
 8002216:	d03b      	beq.n	8002290 <HAL_TIM_ConfigClockSource+0xe0>
 8002218:	2b60      	cmp	r3, #96	; 0x60
 800221a:	d1e8      	bne.n	80021ee <HAL_TIM_ConfigClockSource+0x3e>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800221c:	2410      	movs	r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 800221e:	684b      	ldr	r3, [r1, #4]
 8002220:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002222:	6a01      	ldr	r1, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002224:	4f3b      	ldr	r7, [pc, #236]	; (8002314 <HAL_TIM_ConfigClockSource+0x164>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002226:	43a1      	bics	r1, r4
 8002228:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800222a:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800222c:	0312      	lsls	r2, r2, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800222e:	403c      	ands	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002230:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002232:	24a0      	movs	r4, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8002234:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8002236:	6182      	str	r2, [r0, #24]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002238:	2270      	movs	r2, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800223a:	43a1      	bics	r1, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 800223c:	011b      	lsls	r3, r3, #4
 800223e:	430b      	orrs	r3, r1
  TIMx->CCER = tmpccer;
 8002240:	6203      	str	r3, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8002242:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002244:	4393      	bics	r3, r2
 8002246:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002248:	2367      	movs	r3, #103	; 0x67
 800224a:	e036      	b.n	80022ba <HAL_TIM_ConfigClockSource+0x10a>
  switch (sClockSourceConfig->ClockSource)
 800224c:	2280      	movs	r2, #128	; 0x80
 800224e:	0152      	lsls	r2, r2, #5
 8002250:	4293      	cmp	r3, r2
 8002252:	d00d      	beq.n	8002270 <HAL_TIM_ConfigClockSource+0xc0>
 8002254:	2280      	movs	r2, #128	; 0x80
 8002256:	0192      	lsls	r2, r2, #6
 8002258:	4293      	cmp	r3, r2
 800225a:	d1c8      	bne.n	80021ee <HAL_TIM_ConfigClockSource+0x3e>
      TIM_ETR_SetConfig(htim->Instance,
 800225c:	68cb      	ldr	r3, [r1, #12]
 800225e:	684a      	ldr	r2, [r1, #4]
 8002260:	6889      	ldr	r1, [r1, #8]
 8002262:	f7ff ff99 	bl	8002198 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002266:	2380      	movs	r3, #128	; 0x80
 8002268:	6822      	ldr	r2, [r4, #0]
 800226a:	01db      	lsls	r3, r3, #7
 800226c:	6891      	ldr	r1, [r2, #8]
 800226e:	e00c      	b.n	800228a <HAL_TIM_ConfigClockSource+0xda>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002270:	2207      	movs	r2, #7
 8002272:	6883      	ldr	r3, [r0, #8]
 8002274:	4393      	bics	r3, r2
   TIMx->SMCR = tmpsmcr;
 8002276:	6083      	str	r3, [r0, #8]
 8002278:	e7b9      	b.n	80021ee <HAL_TIM_ConfigClockSource+0x3e>
      TIM_ETR_SetConfig(htim->Instance,
 800227a:	68cb      	ldr	r3, [r1, #12]
 800227c:	684a      	ldr	r2, [r1, #4]
 800227e:	6889      	ldr	r1, [r1, #8]
 8002280:	f7ff ff8a 	bl	8002198 <TIM_ETR_SetConfig>
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002284:	2177      	movs	r1, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 8002286:	6822      	ldr	r2, [r4, #0]
 8002288:	6893      	ldr	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800228a:	430b      	orrs	r3, r1
 800228c:	6093      	str	r3, [r2, #8]
    break;
 800228e:	e7ae      	b.n	80021ee <HAL_TIM_ConfigClockSource+0x3e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002290:	684a      	ldr	r2, [r1, #4]
 8002292:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8002294:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002296:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002298:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800229a:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800229c:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800229e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022a0:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80022a2:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80022a4:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80022a6:	240a      	movs	r4, #10
 80022a8:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 80022aa:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80022ac:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80022ae:	6202      	str	r2, [r0, #32]
   tmpsmcr &= ~TIM_SMCR_TS;
 80022b0:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 80022b2:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80022b4:	4393      	bics	r3, r2
 80022b6:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80022b8:	2357      	movs	r3, #87	; 0x57
 80022ba:	4313      	orrs	r3, r2
 80022bc:	e7db      	b.n	8002276 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022be:	684a      	ldr	r2, [r1, #4]
 80022c0:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 80022c2:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022c4:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80022c6:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022c8:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80022ca:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022cc:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022ce:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80022d0:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80022d2:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80022d4:	240a      	movs	r4, #10
 80022d6:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 80022d8:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80022da:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80022dc:	6202      	str	r2, [r0, #32]
   tmpsmcr &= ~TIM_SMCR_TS;
 80022de:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 80022e0:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80022e2:	4393      	bics	r3, r2
 80022e4:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80022e6:	2347      	movs	r3, #71	; 0x47
 80022e8:	e7e7      	b.n	80022ba <HAL_TIM_ConfigClockSource+0x10a>
   tmpsmcr &= ~TIM_SMCR_TS;
 80022ea:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 80022ec:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80022ee:	4393      	bics	r3, r2
 80022f0:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80022f2:	2307      	movs	r3, #7
 80022f4:	e7e1      	b.n	80022ba <HAL_TIM_ConfigClockSource+0x10a>
   tmpsmcr &= ~TIM_SMCR_TS;
 80022f6:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 80022f8:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80022fa:	4393      	bics	r3, r2
 80022fc:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80022fe:	2317      	movs	r3, #23
 8002300:	e7db      	b.n	80022ba <HAL_TIM_ConfigClockSource+0x10a>
   tmpsmcr &= ~TIM_SMCR_TS;
 8002302:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8002304:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002306:	4393      	bics	r3, r2
 8002308:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800230a:	2327      	movs	r3, #39	; 0x27
 800230c:	e7d5      	b.n	80022ba <HAL_TIM_ConfigClockSource+0x10a>
 800230e:	46c0      	nop			; (mov r8, r8)
 8002310:	ffff0088 	.word	0xffff0088
 8002314:	ffff0fff 	.word	0xffff0fff

08002318 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8002318:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 800231a:	0004      	movs	r4, r0
 800231c:	343c      	adds	r4, #60	; 0x3c
 800231e:	7822      	ldrb	r2, [r4, #0]
{
 8002320:	0003      	movs	r3, r0
 8002322:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8002324:	2a01      	cmp	r2, #1
 8002326:	d017      	beq.n	8002358 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8002328:	001d      	movs	r5, r3

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800232a:	681b      	ldr	r3, [r3, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800232c:	353d      	adds	r5, #61	; 0x3d
 800232e:	7028      	strb	r0, [r5, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002330:	685a      	ldr	r2, [r3, #4]
 8002332:	306e      	adds	r0, #110	; 0x6e
 8002334:	4382      	bics	r2, r0
 8002336:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	6808      	ldr	r0, [r1, #0]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800233c:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800233e:	4302      	orrs	r2, r0
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002340:	2080      	movs	r0, #128	; 0x80
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002342:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002344:	689a      	ldr	r2, [r3, #8]
 8002346:	4382      	bics	r2, r0
 8002348:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800234a:	689a      	ldr	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800234c:	2000      	movs	r0, #0
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800234e:	430a      	orrs	r2, r1
 8002350:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 8002352:	2301      	movs	r3, #1
 8002354:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8002356:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8002358:	bd30      	pop	{r4, r5, pc}
	...

0800235c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800235c:	b570      	push	{r4, r5, r6, lr}
 800235e:	0004      	movs	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002360:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002362:	69c2      	ldr	r2, [r0, #28]
 8002364:	6883      	ldr	r3, [r0, #8]
 8002366:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002368:	6829      	ldr	r1, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800236a:	4303      	orrs	r3, r0
 800236c:	6960      	ldr	r0, [r4, #20]
 800236e:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002370:	4835      	ldr	r0, [pc, #212]	; (8002448 <UART_SetConfig+0xec>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002372:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002374:	4001      	ands	r1, r0
 8002376:	430b      	orrs	r3, r1
 8002378:	602b      	str	r3, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800237a:	686b      	ldr	r3, [r5, #4]
 800237c:	4933      	ldr	r1, [pc, #204]	; (800244c <UART_SetConfig+0xf0>)
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800237e:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002380:	400b      	ands	r3, r1
 8002382:	68e1      	ldr	r1, [r4, #12]
 8002384:	430b      	orrs	r3, r1
 8002386:	606b      	str	r3, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002388:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800238a:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800238c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800238e:	4830      	ldr	r0, [pc, #192]	; (8002450 <UART_SetConfig+0xf4>)
 8002390:	4001      	ands	r1, r0
 8002392:	430b      	orrs	r3, r1

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002394:	2103      	movs	r1, #3
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002396:	60ab      	str	r3, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002398:	4b2e      	ldr	r3, [pc, #184]	; (8002454 <UART_SetConfig+0xf8>)
 800239a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239c:	400b      	ands	r3, r1
 800239e:	492e      	ldr	r1, [pc, #184]	; (8002458 <UART_SetConfig+0xfc>)
 80023a0:	5cc8      	ldrb	r0, [r1, r3]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023a2:	2380      	movs	r3, #128	; 0x80
 80023a4:	021b      	lsls	r3, r3, #8
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d12c      	bne.n	8002404 <UART_SetConfig+0xa8>
  {
    switch (clocksource)
 80023aa:	2808      	cmp	r0, #8
 80023ac:	d827      	bhi.n	80023fe <UART_SetConfig+0xa2>
 80023ae:	f7fd feab 	bl	8000108 <__gnu_thumb1_case_uqi>
 80023b2:	2605      	.short	0x2605
 80023b4:	261e260b 	.word	0x261e260b
 80023b8:	2626      	.short	0x2626
 80023ba:	21          	.byte	0x21
 80023bb:	00          	.byte	0x00
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80023bc:	f7ff fdfc 	bl	8001fb8 <HAL_RCC_GetPCLK1Freq>
        break;
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80023c0:	6863      	ldr	r3, [r4, #4]
 80023c2:	0040      	lsls	r0, r0, #1
 80023c4:	085b      	lsrs	r3, r3, #1
 80023c6:	e002      	b.n	80023ce <UART_SetConfig+0x72>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80023c8:	6863      	ldr	r3, [r4, #4]
 80023ca:	0858      	lsrs	r0, r3, #1
 80023cc:	4b23      	ldr	r3, [pc, #140]	; (800245c <UART_SetConfig+0x100>)
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80023ce:	18c0      	adds	r0, r0, r3
 80023d0:	6861      	ldr	r1, [r4, #4]
 80023d2:	f7fd fea3 	bl	800011c <__udivsi3>
 80023d6:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80023d8:	2000      	movs	r0, #0
      default:
        ret = HAL_ERROR;
        break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 80023da:	220f      	movs	r2, #15
 80023dc:	0019      	movs	r1, r3
 80023de:	4391      	bics	r1, r2
 80023e0:	000a      	movs	r2, r1
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80023e2:	071b      	lsls	r3, r3, #28
    huart->Instance->BRR = brrtemp;
 80023e4:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80023e6:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 80023e8:	4313      	orrs	r3, r2
 80023ea:	60cb      	str	r3, [r1, #12]
    }
  }

  return ret;

}
 80023ec:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80023ee:	f7ff fd15 	bl	8001e1c <HAL_RCC_GetSysClockFreq>
 80023f2:	e7e5      	b.n	80023c0 <UART_SetConfig+0x64>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80023f4:	6863      	ldr	r3, [r4, #4]
 80023f6:	0858      	lsrs	r0, r3, #1
 80023f8:	2380      	movs	r3, #128	; 0x80
 80023fa:	025b      	lsls	r3, r3, #9
 80023fc:	e7e7      	b.n	80023ce <UART_SetConfig+0x72>
        ret = HAL_ERROR;
 80023fe:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8002400:	2300      	movs	r3, #0
 8002402:	e7ea      	b.n	80023da <UART_SetConfig+0x7e>
    switch (clocksource)
 8002404:	2808      	cmp	r0, #8
 8002406:	d81d      	bhi.n	8002444 <UART_SetConfig+0xe8>
 8002408:	f7fd fe7e 	bl	8000108 <__gnu_thumb1_case_uqi>
 800240c:	1c0a1c05 	.word	0x1c0a1c05
 8002410:	1c1c1c14 	.word	0x1c1c1c14
 8002414:	17          	.byte	0x17
 8002415:	00          	.byte	0x00
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002416:	f7ff fdcf 	bl	8001fb8 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800241a:	6861      	ldr	r1, [r4, #4]
 800241c:	084b      	lsrs	r3, r1, #1
 800241e:	e002      	b.n	8002426 <UART_SetConfig+0xca>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002420:	6861      	ldr	r1, [r4, #4]
 8002422:	4b0f      	ldr	r3, [pc, #60]	; (8002460 <UART_SetConfig+0x104>)
 8002424:	0848      	lsrs	r0, r1, #1
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002426:	18c0      	adds	r0, r0, r3
 8002428:	f7fd fe78 	bl	800011c <__udivsi3>
 800242c:	b280      	uxth	r0, r0
 800242e:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002430:	2000      	movs	r0, #0
        break;
 8002432:	e7db      	b.n	80023ec <UART_SetConfig+0x90>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002434:	f7ff fcf2 	bl	8001e1c <HAL_RCC_GetSysClockFreq>
 8002438:	e7ef      	b.n	800241a <UART_SetConfig+0xbe>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800243a:	2380      	movs	r3, #128	; 0x80
 800243c:	6861      	ldr	r1, [r4, #4]
 800243e:	021b      	lsls	r3, r3, #8
 8002440:	0848      	lsrs	r0, r1, #1
 8002442:	e7f0      	b.n	8002426 <UART_SetConfig+0xca>
        ret = HAL_ERROR;
 8002444:	2001      	movs	r0, #1
 8002446:	e7d1      	b.n	80023ec <UART_SetConfig+0x90>
 8002448:	ffff69f3 	.word	0xffff69f3
 800244c:	ffffcfff 	.word	0xffffcfff
 8002450:	fffff4ff 	.word	0xfffff4ff
 8002454:	40021000 	.word	0x40021000
 8002458:	08003214 	.word	0x08003214
 800245c:	00f42400 	.word	0x00f42400
 8002460:	007a1200 	.word	0x007a1200

08002464 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002464:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8002466:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002468:	07da      	lsls	r2, r3, #31
 800246a:	d506      	bpl.n	800247a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800246c:	6801      	ldr	r1, [r0, #0]
 800246e:	4c28      	ldr	r4, [pc, #160]	; (8002510 <UART_AdvFeatureConfig+0xac>)
 8002470:	684a      	ldr	r2, [r1, #4]
 8002472:	4022      	ands	r2, r4
 8002474:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002476:	4322      	orrs	r2, r4
 8002478:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800247a:	079a      	lsls	r2, r3, #30
 800247c:	d506      	bpl.n	800248c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800247e:	6801      	ldr	r1, [r0, #0]
 8002480:	4c24      	ldr	r4, [pc, #144]	; (8002514 <UART_AdvFeatureConfig+0xb0>)
 8002482:	684a      	ldr	r2, [r1, #4]
 8002484:	4022      	ands	r2, r4
 8002486:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002488:	4322      	orrs	r2, r4
 800248a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800248c:	075a      	lsls	r2, r3, #29
 800248e:	d506      	bpl.n	800249e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002490:	6801      	ldr	r1, [r0, #0]
 8002492:	4c21      	ldr	r4, [pc, #132]	; (8002518 <UART_AdvFeatureConfig+0xb4>)
 8002494:	684a      	ldr	r2, [r1, #4]
 8002496:	4022      	ands	r2, r4
 8002498:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800249a:	4322      	orrs	r2, r4
 800249c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800249e:	071a      	lsls	r2, r3, #28
 80024a0:	d506      	bpl.n	80024b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80024a2:	6801      	ldr	r1, [r0, #0]
 80024a4:	4c1d      	ldr	r4, [pc, #116]	; (800251c <UART_AdvFeatureConfig+0xb8>)
 80024a6:	684a      	ldr	r2, [r1, #4]
 80024a8:	4022      	ands	r2, r4
 80024aa:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80024ac:	4322      	orrs	r2, r4
 80024ae:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80024b0:	06da      	lsls	r2, r3, #27
 80024b2:	d506      	bpl.n	80024c2 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80024b4:	6801      	ldr	r1, [r0, #0]
 80024b6:	4c1a      	ldr	r4, [pc, #104]	; (8002520 <UART_AdvFeatureConfig+0xbc>)
 80024b8:	688a      	ldr	r2, [r1, #8]
 80024ba:	4022      	ands	r2, r4
 80024bc:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80024be:	4322      	orrs	r2, r4
 80024c0:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80024c2:	069a      	lsls	r2, r3, #26
 80024c4:	d506      	bpl.n	80024d4 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80024c6:	6801      	ldr	r1, [r0, #0]
 80024c8:	4c16      	ldr	r4, [pc, #88]	; (8002524 <UART_AdvFeatureConfig+0xc0>)
 80024ca:	688a      	ldr	r2, [r1, #8]
 80024cc:	4022      	ands	r2, r4
 80024ce:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80024d0:	4322      	orrs	r2, r4
 80024d2:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80024d4:	065a      	lsls	r2, r3, #25
 80024d6:	d510      	bpl.n	80024fa <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80024d8:	6801      	ldr	r1, [r0, #0]
 80024da:	4d13      	ldr	r5, [pc, #76]	; (8002528 <UART_AdvFeatureConfig+0xc4>)
 80024dc:	684a      	ldr	r2, [r1, #4]
 80024de:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80024e0:	402a      	ands	r2, r5
 80024e2:	4322      	orrs	r2, r4
 80024e4:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80024e6:	2280      	movs	r2, #128	; 0x80
 80024e8:	0352      	lsls	r2, r2, #13
 80024ea:	4294      	cmp	r4, r2
 80024ec:	d105      	bne.n	80024fa <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80024ee:	684a      	ldr	r2, [r1, #4]
 80024f0:	4c0e      	ldr	r4, [pc, #56]	; (800252c <UART_AdvFeatureConfig+0xc8>)
 80024f2:	4022      	ands	r2, r4
 80024f4:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80024f6:	4322      	orrs	r2, r4
 80024f8:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80024fa:	061b      	lsls	r3, r3, #24
 80024fc:	d506      	bpl.n	800250c <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80024fe:	6802      	ldr	r2, [r0, #0]
 8002500:	490b      	ldr	r1, [pc, #44]	; (8002530 <UART_AdvFeatureConfig+0xcc>)
 8002502:	6853      	ldr	r3, [r2, #4]
 8002504:	400b      	ands	r3, r1
 8002506:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002508:	430b      	orrs	r3, r1
 800250a:	6053      	str	r3, [r2, #4]
  }
}
 800250c:	bd30      	pop	{r4, r5, pc}
 800250e:	46c0      	nop			; (mov r8, r8)
 8002510:	fffdffff 	.word	0xfffdffff
 8002514:	fffeffff 	.word	0xfffeffff
 8002518:	fffbffff 	.word	0xfffbffff
 800251c:	ffff7fff 	.word	0xffff7fff
 8002520:	ffffefff 	.word	0xffffefff
 8002524:	ffffdfff 	.word	0xffffdfff
 8002528:	ffefffff 	.word	0xffefffff
 800252c:	ff9fffff 	.word	0xff9fffff
 8002530:	fff7ffff 	.word	0xfff7ffff

08002534 <HAL_UART_Init>:
{
 8002534:	b570      	push	{r4, r5, r6, lr}
 8002536:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8002538:	d101      	bne.n	800253e <HAL_UART_Init+0xa>
    return HAL_ERROR;
 800253a:	2001      	movs	r0, #1
}
 800253c:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->gState == HAL_UART_STATE_RESET)
 800253e:	0005      	movs	r5, r0
 8002540:	3569      	adds	r5, #105	; 0x69
 8002542:	782b      	ldrb	r3, [r5, #0]
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d104      	bne.n	8002554 <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 800254a:	0002      	movs	r2, r0
 800254c:	3268      	adds	r2, #104	; 0x68
 800254e:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8002550:	f000 fd2e 	bl	8002fb0 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002554:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002556:	2101      	movs	r1, #1
 8002558:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800255a:	702b      	strb	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 800255c:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800255e:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8002560:	438b      	bics	r3, r1
 8002562:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002564:	f7ff fefa 	bl	800235c <UART_SetConfig>
 8002568:	2801      	cmp	r0, #1
 800256a:	d0e6      	beq.n	800253a <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800256c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800256e:	2b00      	cmp	r3, #0
 8002570:	d002      	beq.n	8002578 <HAL_UART_Init+0x44>
    UART_AdvFeatureConfig(huart);
 8002572:	0020      	movs	r0, r4
 8002574:	f7ff ff76 	bl	8002464 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002578:	6823      	ldr	r3, [r4, #0]
 800257a:	490b      	ldr	r1, [pc, #44]	; (80025a8 <HAL_UART_Init+0x74>)
 800257c:	685a      	ldr	r2, [r3, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800257e:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002580:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002582:	2108      	movs	r1, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002584:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002586:	689a      	ldr	r2, [r3, #8]
 8002588:	438a      	bics	r2, r1
 800258a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800258c:	2201      	movs	r2, #1
 800258e:	6819      	ldr	r1, [r3, #0]
 8002590:	430a      	orrs	r2, r1
 8002592:	601a      	str	r2, [r3, #0]
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
  huart->RxState = HAL_UART_STATE_READY;
 8002594:	0022      	movs	r2, r4
  huart->gState  = HAL_UART_STATE_READY;
 8002596:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002598:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxState = HAL_UART_STATE_READY;
 800259a:	326a      	adds	r2, #106	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800259c:	3468      	adds	r4, #104	; 0x68
  huart->gState  = HAL_UART_STATE_READY;
 800259e:	702b      	strb	r3, [r5, #0]
  huart->RxState = HAL_UART_STATE_READY;
 80025a0:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 80025a2:	7020      	strb	r0, [r4, #0]
  return (UART_CheckIdleState(huart));
 80025a4:	e7ca      	b.n	800253c <HAL_UART_Init+0x8>
 80025a6:	46c0      	nop			; (mov r8, r8)
 80025a8:	fffff7ff 	.word	0xfffff7ff

080025ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80025ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ae:	0004      	movs	r4, r0
 80025b0:	000e      	movs	r6, r1
 80025b2:	0015      	movs	r5, r2
 80025b4:	001f      	movs	r7, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025b6:	6822      	ldr	r2, [r4, #0]
 80025b8:	69d3      	ldr	r3, [r2, #28]
 80025ba:	4033      	ands	r3, r6
 80025bc:	1b9b      	subs	r3, r3, r6
 80025be:	4259      	negs	r1, r3
 80025c0:	414b      	adcs	r3, r1
 80025c2:	42ab      	cmp	r3, r5
 80025c4:	d001      	beq.n	80025ca <UART_WaitOnFlagUntilTimeout+0x1e>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80025c6:	2000      	movs	r0, #0
 80025c8:	e018      	b.n	80025fc <UART_WaitOnFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 80025ca:	9b06      	ldr	r3, [sp, #24]
 80025cc:	3301      	adds	r3, #1
 80025ce:	d0f3      	beq.n	80025b8 <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80025d0:	9b06      	ldr	r3, [sp, #24]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d113      	bne.n	80025fe <UART_WaitOnFlagUntilTimeout+0x52>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025d6:	6823      	ldr	r3, [r4, #0]
 80025d8:	490c      	ldr	r1, [pc, #48]	; (800260c <UART_WaitOnFlagUntilTimeout+0x60>)
 80025da:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 80025dc:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025de:	400a      	ands	r2, r1
 80025e0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	31a3      	adds	r1, #163	; 0xa3
 80025e6:	31ff      	adds	r1, #255	; 0xff
 80025e8:	438a      	bics	r2, r1
 80025ea:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 80025ec:	0022      	movs	r2, r4
 80025ee:	2320      	movs	r3, #32
 80025f0:	3269      	adds	r2, #105	; 0x69
 80025f2:	7013      	strb	r3, [r2, #0]
        huart->RxState = HAL_UART_STATE_READY;
 80025f4:	7053      	strb	r3, [r2, #1]
        __HAL_UNLOCK(huart);
 80025f6:	2300      	movs	r3, #0
 80025f8:	3468      	adds	r4, #104	; 0x68
 80025fa:	7023      	strb	r3, [r4, #0]
}
 80025fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80025fe:	f7fe fd4f 	bl	80010a0 <HAL_GetTick>
 8002602:	9b06      	ldr	r3, [sp, #24]
 8002604:	1bc0      	subs	r0, r0, r7
 8002606:	4283      	cmp	r3, r0
 8002608:	d2d5      	bcs.n	80025b6 <UART_WaitOnFlagUntilTimeout+0xa>
 800260a:	e7e4      	b.n	80025d6 <UART_WaitOnFlagUntilTimeout+0x2a>
 800260c:	fffffe5f 	.word	0xfffffe5f

08002610 <HAL_UART_Transmit>:
{
 8002610:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(huart->gState == HAL_UART_STATE_READY)
 8002612:	0007      	movs	r7, r0
{
 8002614:	b085      	sub	sp, #20
 8002616:	9303      	str	r3, [sp, #12]
  if(huart->gState == HAL_UART_STATE_READY)
 8002618:	3769      	adds	r7, #105	; 0x69
 800261a:	783b      	ldrb	r3, [r7, #0]
{
 800261c:	0004      	movs	r4, r0
 800261e:	000d      	movs	r5, r1
 8002620:	0016      	movs	r6, r2
    return HAL_BUSY;
 8002622:	2002      	movs	r0, #2
  if(huart->gState == HAL_UART_STATE_READY)
 8002624:	2b20      	cmp	r3, #32
 8002626:	d146      	bne.n	80026b6 <HAL_UART_Transmit+0xa6>
      return  HAL_ERROR;
 8002628:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 800262a:	2900      	cmp	r1, #0
 800262c:	d043      	beq.n	80026b6 <HAL_UART_Transmit+0xa6>
 800262e:	2a00      	cmp	r2, #0
 8002630:	d041      	beq.n	80026b6 <HAL_UART_Transmit+0xa6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002632:	2380      	movs	r3, #128	; 0x80
 8002634:	68a2      	ldr	r2, [r4, #8]
 8002636:	015b      	lsls	r3, r3, #5
 8002638:	429a      	cmp	r2, r3
 800263a:	d104      	bne.n	8002646 <HAL_UART_Transmit+0x36>
 800263c:	6923      	ldr	r3, [r4, #16]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_UART_Transmit+0x36>
      if((((uint32_t)pData)&1U) != 0U)
 8002642:	4201      	tst	r1, r0
 8002644:	d137      	bne.n	80026b6 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 8002646:	0023      	movs	r3, r4
 8002648:	3368      	adds	r3, #104	; 0x68
 800264a:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 800264c:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 800264e:	2a01      	cmp	r2, #1
 8002650:	d031      	beq.n	80026b6 <HAL_UART_Transmit+0xa6>
 8002652:	2201      	movs	r2, #1
 8002654:	701a      	strb	r2, [r3, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002656:	2300      	movs	r3, #0
 8002658:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800265a:	3321      	adds	r3, #33	; 0x21
 800265c:	703b      	strb	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800265e:	f7fe fd1f 	bl	80010a0 <HAL_GetTick>
    huart->TxXferSize = Size;
 8002662:	0023      	movs	r3, r4
 8002664:	3350      	adds	r3, #80	; 0x50
 8002666:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 8002668:	805e      	strh	r6, [r3, #2]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800266a:	2680      	movs	r6, #128	; 0x80
    tickstart = HAL_GetTick();
 800266c:	9002      	str	r0, [sp, #8]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800266e:	0176      	lsls	r6, r6, #5
    while(huart->TxXferCount > 0)
 8002670:	0021      	movs	r1, r4
 8002672:	3152      	adds	r1, #82	; 0x52
 8002674:	880a      	ldrh	r2, [r1, #0]
 8002676:	b292      	uxth	r2, r2
 8002678:	2a00      	cmp	r2, #0
 800267a:	d10d      	bne.n	8002698 <HAL_UART_Transmit+0x88>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800267c:	9b03      	ldr	r3, [sp, #12]
 800267e:	2140      	movs	r1, #64	; 0x40
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	0020      	movs	r0, r4
 8002684:	9b02      	ldr	r3, [sp, #8]
 8002686:	f7ff ff91 	bl	80025ac <UART_WaitOnFlagUntilTimeout>
 800268a:	2800      	cmp	r0, #0
 800268c:	d112      	bne.n	80026b4 <HAL_UART_Transmit+0xa4>
    huart->gState = HAL_UART_STATE_READY;
 800268e:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8002690:	3468      	adds	r4, #104	; 0x68
    huart->gState = HAL_UART_STATE_READY;
 8002692:	703b      	strb	r3, [r7, #0]
    __HAL_UNLOCK(huart);
 8002694:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8002696:	e00e      	b.n	80026b6 <HAL_UART_Transmit+0xa6>
      huart->TxXferCount--;
 8002698:	880b      	ldrh	r3, [r1, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800269a:	2200      	movs	r2, #0
      huart->TxXferCount--;
 800269c:	3b01      	subs	r3, #1
 800269e:	b29b      	uxth	r3, r3
 80026a0:	800b      	strh	r3, [r1, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026a2:	9b03      	ldr	r3, [sp, #12]
 80026a4:	2180      	movs	r1, #128	; 0x80
 80026a6:	9300      	str	r3, [sp, #0]
 80026a8:	0020      	movs	r0, r4
 80026aa:	9b02      	ldr	r3, [sp, #8]
 80026ac:	f7ff ff7e 	bl	80025ac <UART_WaitOnFlagUntilTimeout>
 80026b0:	2800      	cmp	r0, #0
 80026b2:	d002      	beq.n	80026ba <HAL_UART_Transmit+0xaa>
        return HAL_TIMEOUT;
 80026b4:	2003      	movs	r0, #3
}
 80026b6:	b005      	add	sp, #20
 80026b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026ba:	68a3      	ldr	r3, [r4, #8]
 80026bc:	6822      	ldr	r2, [r4, #0]
 80026be:	42b3      	cmp	r3, r6
 80026c0:	d108      	bne.n	80026d4 <HAL_UART_Transmit+0xc4>
 80026c2:	6923      	ldr	r3, [r4, #16]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d105      	bne.n	80026d4 <HAL_UART_Transmit+0xc4>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80026c8:	882b      	ldrh	r3, [r5, #0]
        pData += 2;
 80026ca:	3502      	adds	r5, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80026cc:	05db      	lsls	r3, r3, #23
 80026ce:	0ddb      	lsrs	r3, r3, #23
 80026d0:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 80026d2:	e7cd      	b.n	8002670 <HAL_UART_Transmit+0x60>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80026d4:	782b      	ldrb	r3, [r5, #0]
 80026d6:	3501      	adds	r5, #1
 80026d8:	8513      	strh	r3, [r2, #40]	; 0x28
 80026da:	e7c9      	b.n	8002670 <HAL_UART_Transmit+0x60>

080026dc <HAL_UART_Receive>:
{
 80026dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026de:	001f      	movs	r7, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 80026e0:	0003      	movs	r3, r0
 80026e2:	336a      	adds	r3, #106	; 0x6a
{
 80026e4:	0016      	movs	r6, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 80026e6:	781a      	ldrb	r2, [r3, #0]
{
 80026e8:	0004      	movs	r4, r0
 80026ea:	b085      	sub	sp, #20
 80026ec:	000d      	movs	r5, r1
    return HAL_BUSY;
 80026ee:	2002      	movs	r0, #2
  if(huart->RxState == HAL_UART_STATE_READY)
 80026f0:	2a20      	cmp	r2, #32
 80026f2:	d139      	bne.n	8002768 <HAL_UART_Receive+0x8c>
      return  HAL_ERROR;
 80026f4:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 80026f6:	2900      	cmp	r1, #0
 80026f8:	d036      	beq.n	8002768 <HAL_UART_Receive+0x8c>
 80026fa:	2e00      	cmp	r6, #0
 80026fc:	d034      	beq.n	8002768 <HAL_UART_Receive+0x8c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026fe:	2280      	movs	r2, #128	; 0x80
 8002700:	68a1      	ldr	r1, [r4, #8]
 8002702:	0152      	lsls	r2, r2, #5
 8002704:	4291      	cmp	r1, r2
 8002706:	d104      	bne.n	8002712 <HAL_UART_Receive+0x36>
 8002708:	6922      	ldr	r2, [r4, #16]
 800270a:	2a00      	cmp	r2, #0
 800270c:	d101      	bne.n	8002712 <HAL_UART_Receive+0x36>
      if((((uint32_t)pData)&1U) != 0U)
 800270e:	4205      	tst	r5, r0
 8002710:	d12a      	bne.n	8002768 <HAL_UART_Receive+0x8c>
    __HAL_LOCK(huart);
 8002712:	0022      	movs	r2, r4
 8002714:	3268      	adds	r2, #104	; 0x68
 8002716:	7811      	ldrb	r1, [r2, #0]
    return HAL_BUSY;
 8002718:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 800271a:	2901      	cmp	r1, #1
 800271c:	d024      	beq.n	8002768 <HAL_UART_Receive+0x8c>
 800271e:	2101      	movs	r1, #1
 8002720:	7011      	strb	r1, [r2, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002722:	2200      	movs	r2, #0
 8002724:	66e2      	str	r2, [r4, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002726:	3222      	adds	r2, #34	; 0x22
 8002728:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800272a:	f7fe fcb9 	bl	80010a0 <HAL_GetTick>
    huart->RxXferSize = Size;
 800272e:	0023      	movs	r3, r4
    UART_MASK_COMPUTATION(huart);
 8002730:	2180      	movs	r1, #128	; 0x80
 8002732:	68a2      	ldr	r2, [r4, #8]
    huart->RxXferSize = Size;
 8002734:	3358      	adds	r3, #88	; 0x58
 8002736:	801e      	strh	r6, [r3, #0]
    huart->RxXferCount = Size;
 8002738:	805e      	strh	r6, [r3, #2]
    tickstart = HAL_GetTick();
 800273a:	9003      	str	r0, [sp, #12]
    UART_MASK_COMPUTATION(huart);
 800273c:	0149      	lsls	r1, r1, #5
 800273e:	3304      	adds	r3, #4
 8002740:	428a      	cmp	r2, r1
 8002742:	d115      	bne.n	8002770 <HAL_UART_Receive+0x94>
 8002744:	6922      	ldr	r2, [r4, #16]
 8002746:	2a00      	cmp	r2, #0
 8002748:	d110      	bne.n	800276c <HAL_UART_Receive+0x90>
 800274a:	4a1e      	ldr	r2, [pc, #120]	; (80027c4 <HAL_UART_Receive+0xe8>)
 800274c:	801a      	strh	r2, [r3, #0]
    uhMask = huart->Mask;
 800274e:	881e      	ldrh	r6, [r3, #0]
    while(huart->RxXferCount > 0U)
 8002750:	0022      	movs	r2, r4
 8002752:	325a      	adds	r2, #90	; 0x5a
 8002754:	8810      	ldrh	r0, [r2, #0]
 8002756:	b280      	uxth	r0, r0
 8002758:	2800      	cmp	r0, #0
 800275a:	d110      	bne.n	800277e <HAL_UART_Receive+0xa2>
    huart->RxState = HAL_UART_STATE_READY;
 800275c:	0023      	movs	r3, r4
 800275e:	2220      	movs	r2, #32
 8002760:	336a      	adds	r3, #106	; 0x6a
    __HAL_UNLOCK(huart);
 8002762:	3468      	adds	r4, #104	; 0x68
    huart->RxState = HAL_UART_STATE_READY;
 8002764:	701a      	strb	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 8002766:	7020      	strb	r0, [r4, #0]
}
 8002768:	b005      	add	sp, #20
 800276a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    UART_MASK_COMPUTATION(huart);
 800276c:	22ff      	movs	r2, #255	; 0xff
 800276e:	e7ed      	b.n	800274c <HAL_UART_Receive+0x70>
 8002770:	2a00      	cmp	r2, #0
 8002772:	d1ec      	bne.n	800274e <HAL_UART_Receive+0x72>
 8002774:	6922      	ldr	r2, [r4, #16]
 8002776:	2a00      	cmp	r2, #0
 8002778:	d0f8      	beq.n	800276c <HAL_UART_Receive+0x90>
 800277a:	227f      	movs	r2, #127	; 0x7f
 800277c:	e7e6      	b.n	800274c <HAL_UART_Receive+0x70>
      huart->RxXferCount--;
 800277e:	8813      	ldrh	r3, [r2, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002780:	2120      	movs	r1, #32
      huart->RxXferCount--;
 8002782:	3b01      	subs	r3, #1
 8002784:	b29b      	uxth	r3, r3
 8002786:	8013      	strh	r3, [r2, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002788:	0020      	movs	r0, r4
 800278a:	9700      	str	r7, [sp, #0]
 800278c:	9b03      	ldr	r3, [sp, #12]
 800278e:	2200      	movs	r2, #0
 8002790:	f7ff ff0c 	bl	80025ac <UART_WaitOnFlagUntilTimeout>
 8002794:	2800      	cmp	r0, #0
 8002796:	d113      	bne.n	80027c0 <HAL_UART_Receive+0xe4>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002798:	68a2      	ldr	r2, [r4, #8]
 800279a:	6823      	ldr	r3, [r4, #0]
 800279c:	0011      	movs	r1, r2
 800279e:	2280      	movs	r2, #128	; 0x80
 80027a0:	0152      	lsls	r2, r2, #5
 80027a2:	4291      	cmp	r1, r2
 80027a4:	d107      	bne.n	80027b6 <HAL_UART_Receive+0xda>
 80027a6:	6922      	ldr	r2, [r4, #16]
 80027a8:	2a00      	cmp	r2, #0
 80027aa:	d104      	bne.n	80027b6 <HAL_UART_Receive+0xda>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80027ac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80027ae:	4033      	ands	r3, r6
 80027b0:	802b      	strh	r3, [r5, #0]
        pData +=2U;
 80027b2:	3502      	adds	r5, #2
 80027b4:	e7cc      	b.n	8002750 <HAL_UART_Receive+0x74>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80027b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80027b8:	4033      	ands	r3, r6
 80027ba:	702b      	strb	r3, [r5, #0]
 80027bc:	3501      	adds	r5, #1
 80027be:	e7c7      	b.n	8002750 <HAL_UART_Receive+0x74>
        return HAL_TIMEOUT;
 80027c0:	2003      	movs	r0, #3
 80027c2:	e7d1      	b.n	8002768 <HAL_UART_Receive+0x8c>
 80027c4:	000001ff 	.word	0x000001ff

080027c8 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80027c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80027ca:	230f      	movs	r3, #15
 80027cc:	0004      	movs	r4, r0
	data_l = ((cmd<<4)&0xf0);
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80027ce:	210c      	movs	r1, #12
	data_u = (cmd&0xf0);
 80027d0:	439c      	bics	r4, r3
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80027d2:	000b      	movs	r3, r1
 80027d4:	aa03      	add	r2, sp, #12
 80027d6:	4323      	orrs	r3, r4
 80027d8:	7013      	strb	r3, [r2, #0]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80027da:	2308      	movs	r3, #8
	data_l = ((cmd<<4)&0xf0);
 80027dc:	0100      	lsls	r0, r0, #4
 80027de:	b2c0      	uxtb	r0, r0
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80027e0:	431c      	orrs	r4, r3
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80027e2:	4301      	orrs	r1, r0
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80027e4:	4318      	orrs	r0, r3
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80027e6:	335c      	adds	r3, #92	; 0x5c
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80027e8:	7091      	strb	r1, [r2, #2]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80027ea:	70d0      	strb	r0, [r2, #3]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80027ec:	7054      	strb	r4, [r2, #1]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80027ee:	214e      	movs	r1, #78	; 0x4e
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	4802      	ldr	r0, [pc, #8]	; (80027fc <lcd_send_cmd+0x34>)
 80027f4:	3b60      	subs	r3, #96	; 0x60
 80027f6:	f7ff f84d 	bl	8001894 <HAL_I2C_Master_Transmit>
}
 80027fa:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
 80027fc:	20000028 	.word	0x20000028

08002800 <lcd_send_data>:

void lcd_send_data (char data)
{
 8002800:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8002802:	230f      	movs	r3, #15
 8002804:	0004      	movs	r4, r0
	data_l = ((data<<4)&0xf0);
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002806:	210d      	movs	r1, #13
	data_u = (data&0xf0);
 8002808:	439c      	bics	r4, r3
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800280a:	000b      	movs	r3, r1
 800280c:	aa03      	add	r2, sp, #12
 800280e:	4323      	orrs	r3, r4
 8002810:	7013      	strb	r3, [r2, #0]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002812:	2309      	movs	r3, #9
	data_l = ((data<<4)&0xf0);
 8002814:	0100      	lsls	r0, r0, #4
 8002816:	b2c0      	uxtb	r0, r0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002818:	431c      	orrs	r4, r3
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800281a:	4301      	orrs	r1, r0
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800281c:	4318      	orrs	r0, r3
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800281e:	335b      	adds	r3, #91	; 0x5b
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002820:	7091      	strb	r1, [r2, #2]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8002822:	70d0      	strb	r0, [r2, #3]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8002824:	7054      	strb	r4, [r2, #1]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002826:	214e      	movs	r1, #78	; 0x4e
 8002828:	9300      	str	r3, [sp, #0]
 800282a:	4802      	ldr	r0, [pc, #8]	; (8002834 <lcd_send_data+0x34>)
 800282c:	3b60      	subs	r3, #96	; 0x60
 800282e:	f7ff f831 	bl	8001894 <HAL_I2C_Master_Transmit>
}
 8002832:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
 8002834:	20000028 	.word	0x20000028

08002838 <lcd_init>:

void lcd_init (void)
{
 8002838:	b510      	push	{r4, lr}
	lcd_send_cmd (0x02);
 800283a:	2002      	movs	r0, #2
 800283c:	f7ff ffc4 	bl	80027c8 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8002840:	2028      	movs	r0, #40	; 0x28
 8002842:	f7ff ffc1 	bl	80027c8 <lcd_send_cmd>
	lcd_send_cmd (0x0C);
 8002846:	200c      	movs	r0, #12
 8002848:	f7ff ffbe 	bl	80027c8 <lcd_send_cmd>
	//lcd_send_cmd (0x80);
}
 800284c:	bd10      	pop	{r4, pc}

0800284e <lcd_send_string>:

void lcd_send_string (char *str)
{
 800284e:	b510      	push	{r4, lr}
 8002850:	0004      	movs	r4, r0
	while (*str) lcd_send_data (*str++);
 8002852:	7820      	ldrb	r0, [r4, #0]
 8002854:	2800      	cmp	r0, #0
 8002856:	d100      	bne.n	800285a <lcd_send_string+0xc>
}
 8002858:	bd10      	pop	{r4, pc}
	while (*str) lcd_send_data (*str++);
 800285a:	3401      	adds	r4, #1
 800285c:	f7ff ffd0 	bl	8002800 <lcd_send_data>
 8002860:	e7f7      	b.n	8002852 <lcd_send_string+0x4>

08002862 <reverse>:

volatile uint32_t counter = 0;
void reverse(char *str, int len)
{
	int i=0, j=len-1, temp;
	while (i<j)
 8002862:	0003      	movs	r3, r0
{
 8002864:	b510      	push	{r4, lr}
	int i=0, j=len-1, temp;
 8002866:	3901      	subs	r1, #1
	while (i<j)
 8002868:	1a1a      	subs	r2, r3, r0
 800286a:	4291      	cmp	r1, r2
 800286c:	dc00      	bgt.n	8002870 <reverse+0xe>
    	temp = str[i];
    	str[i] = str[j];
    	str[j] = temp;
    	i++; j--;
	}
}
 800286e:	bd10      	pop	{r4, pc}
    	temp = str[i];
 8002870:	781a      	ldrb	r2, [r3, #0]
    	str[i] = str[j];
 8002872:	5c44      	ldrb	r4, [r0, r1]
 8002874:	701c      	strb	r4, [r3, #0]
    	str[j] = temp;
 8002876:	5442      	strb	r2, [r0, r1]
 8002878:	3301      	adds	r3, #1
    	i++; j--;
 800287a:	3901      	subs	r1, #1
 800287c:	e7f4      	b.n	8002868 <reverse+0x6>

0800287e <intToStr>:

int intToStr(int x, char str[], int d)
{
 800287e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002880:	0006      	movs	r6, r0
 8002882:	000d      	movs	r5, r1
	int i = 0;
	while (x)
 8002884:	000f      	movs	r7, r1
{
 8002886:	9201      	str	r2, [sp, #4]
 8002888:	1b7c      	subs	r4, r7, r5
	while (x)
 800288a:	2e00      	cmp	r6, #0
 800288c:	d10b      	bne.n	80028a6 <intToStr+0x28>
	}

	// If number of digits required is more, then
	// add 0s at the beginning
	while (i < d)
    	str[i++] = '0';
 800288e:	2330      	movs	r3, #48	; 0x30
	while (i < d)
 8002890:	9a01      	ldr	r2, [sp, #4]
 8002892:	4294      	cmp	r4, r2
 8002894:	db14      	blt.n	80028c0 <intToStr+0x42>

	reverse(str, i);
 8002896:	0028      	movs	r0, r5
 8002898:	0021      	movs	r1, r4
 800289a:	f7ff ffe2 	bl	8002862 <reverse>
	str[i] = '\0';
 800289e:	2300      	movs	r3, #0
	return i;
}
 80028a0:	0020      	movs	r0, r4
	str[i] = '\0';
 80028a2:	552b      	strb	r3, [r5, r4]
}
 80028a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    	str[i++] = (x%10) + '0';
 80028a6:	0030      	movs	r0, r6
 80028a8:	210a      	movs	r1, #10
 80028aa:	f7fd fda7 	bl	80003fc <__aeabi_idivmod>
 80028ae:	3130      	adds	r1, #48	; 0x30
 80028b0:	7039      	strb	r1, [r7, #0]
    	x = x/10;
 80028b2:	0030      	movs	r0, r6
 80028b4:	210a      	movs	r1, #10
 80028b6:	f7fd fcbb 	bl	8000230 <__divsi3>
 80028ba:	3701      	adds	r7, #1
 80028bc:	0006      	movs	r6, r0
 80028be:	e7e3      	b.n	8002888 <intToStr+0xa>
    	str[i++] = '0';
 80028c0:	552b      	strb	r3, [r5, r4]
 80028c2:	3401      	adds	r4, #1
 80028c4:	e7e4      	b.n	8002890 <intToStr+0x12>
	...

080028c8 <ftoa>:

// Converts a floating point number to string.
void ftoa(float n, char *res)
{
 80028c8:	b570      	push	{r4, r5, r6, lr}
 80028ca:	000c      	movs	r4, r1
 80028cc:	1c05      	adds	r5, r0, #0
	// Extract integer part
	int ipart = (int)n;
 80028ce:	f7fe f9dd 	bl	8000c8c <__aeabi_f2iz>
 80028d2:	0006      	movs	r6, r0

	// Extract floating part
	float fpart = n - (float)ipart;
 80028d4:	f7fe f9fa 	bl	8000ccc <__aeabi_i2f>
 80028d8:	1c01      	adds	r1, r0, #0
 80028da:	1c28      	adds	r0, r5, #0
 80028dc:	f7fe f83a 	bl	8000954 <__aeabi_fsub>

	// convert integer part to string
	int i = intToStr(ipart, res,0);
 80028e0:	2200      	movs	r2, #0
	float fpart = n - (float)ipart;
 80028e2:	1c05      	adds	r5, r0, #0
	int i = intToStr(ipart, res,0);
 80028e4:	0021      	movs	r1, r4
 80028e6:	0030      	movs	r0, r6
 80028e8:	f7ff ffc9 	bl	800287e <intToStr>

	// check for display option after point
	//if (afterpoint != 0)
	//{
    	res[i] = '.';  // add dot
 80028ec:	232e      	movs	r3, #46	; 0x2e
 80028ee:	5423      	strb	r3, [r4, r0]
    	// Get the value of fraction part upto given no.
    	// of points after dot. The third parameter is needed
    	// to handle cases like 233.007
     	fpart = fpart * 100.0 ; // pow(10, afterpoint);

    	intToStr((int)fpart, res + i + 1,2);
 80028f0:	3001      	adds	r0, #1
 80028f2:	1824      	adds	r4, r4, r0
     	fpart = fpart * 100.0 ; // pow(10, afterpoint);
 80028f4:	4905      	ldr	r1, [pc, #20]	; (800290c <ftoa+0x44>)
 80028f6:	1c28      	adds	r0, r5, #0
 80028f8:	f7fd ff0c 	bl	8000714 <__aeabi_fmul>
    	intToStr((int)fpart, res + i + 1,2);
 80028fc:	f7fe f9c6 	bl	8000c8c <__aeabi_f2iz>
 8002900:	2202      	movs	r2, #2
 8002902:	0021      	movs	r1, r4
 8002904:	f7ff ffbb 	bl	800287e <intToStr>
	//}
}
 8002908:	bd70      	pop	{r4, r5, r6, pc}
 800290a:	46c0      	nop			; (mov r8, r8)
 800290c:	42c80000 	.word	0x42c80000

08002910 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8002910:	2312      	movs	r3, #18
{
 8002912:	b510      	push	{r4, lr}
 8002914:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8002916:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002918:	3b11      	subs	r3, #17
 800291a:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800291c:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800291e:	330f      	adds	r3, #15
 8002920:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8002922:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002924:	2300      	movs	r3, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002926:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002928:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800292a:	f7ff f895 	bl	8001a58 <HAL_RCC_OscConfig>
 800292e:	1e01      	subs	r1, r0, #0
 8002930:	d000      	beq.n	8002934 <SystemClock_Config+0x24>
 8002932:	e7fe      	b.n	8002932 <SystemClock_Config+0x22>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002934:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002936:	9001      	str	r0, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002938:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800293a:	9003      	str	r0, [sp, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800293c:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800293e:	9300      	str	r3, [sp, #0]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002940:	f7ff fa9e 	bl	8001e80 <HAL_RCC_ClockConfig>
 8002944:	2800      	cmp	r0, #0
 8002946:	d000      	beq.n	800294a <SystemClock_Config+0x3a>
 8002948:	e7fe      	b.n	8002948 <SystemClock_Config+0x38>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 800294a:	2321      	movs	r3, #33	; 0x21
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800294c:	9006      	str	r0, [sp, #24]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800294e:	9007      	str	r0, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002950:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8002952:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002954:	f7ff fb40 	bl	8001fd8 <HAL_RCCEx_PeriphCLKConfig>
 8002958:	1e04      	subs	r4, r0, #0
 800295a:	d000      	beq.n	800295e <SystemClock_Config+0x4e>
 800295c:	e7fe      	b.n	800295c <SystemClock_Config+0x4c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800295e:	f7ff fb25 	bl	8001fac <HAL_RCC_GetHCLKFreq>
 8002962:	21fa      	movs	r1, #250	; 0xfa
 8002964:	0089      	lsls	r1, r1, #2
 8002966:	f7fd fbd9 	bl	800011c <__udivsi3>
 800296a:	f7fe fd77 	bl	800145c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800296e:	2004      	movs	r0, #4
 8002970:	f7fe fd8e 	bl	8001490 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002974:	2001      	movs	r0, #1
 8002976:	0022      	movs	r2, r4
 8002978:	0021      	movs	r1, r4
 800297a:	4240      	negs	r0, r0
 800297c:	f7fe fd3e 	bl	80013fc <HAL_NVIC_SetPriority>
}
 8002980:	b014      	add	sp, #80	; 0x50
 8002982:	bd10      	pop	{r4, pc}

08002984 <main>:
{
 8002984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002986:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 8002988:	f7fe fb72 	bl	8001070 <HAL_Init>
  SystemClock_Config();
 800298c:	f7ff ffc0 	bl	8002910 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002990:	2080      	movs	r0, #128	; 0x80
 8002992:	4ad4      	ldr	r2, [pc, #848]	; (8002ce4 <main+0x360>)
 8002994:	0280      	lsls	r0, r0, #10
 8002996:	6951      	ldr	r1, [r2, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002998:	2600      	movs	r6, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800299a:	4301      	orrs	r1, r0
 800299c:	6151      	str	r1, [r2, #20]
 800299e:	6953      	ldr	r3, [r2, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80029a0:	2110      	movs	r1, #16
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a2:	4003      	ands	r3, r0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80029a4:	2090      	movs	r0, #144	; 0x90
 80029a6:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a8:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80029aa:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ac:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80029ae:	f7fe fe37 	bl	8001620 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b2:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80029b4:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029b6:	2701      	movs	r7, #1
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80029b8:	ac05      	add	r4, sp, #20
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ba:	0021      	movs	r1, r4
 80029bc:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80029be:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029c0:	6067      	str	r7, [r4, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c2:	60a6      	str	r6, [r4, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c4:	60e6      	str	r6, [r4, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029c6:	f7fe fd75 	bl	80014b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80029ca:	23e0      	movs	r3, #224	; 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029cc:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80029ce:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029d0:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80029d2:	3bde      	subs	r3, #222	; 0xde
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029d4:	0021      	movs	r1, r4
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80029d6:	60a3      	str	r3, [r4, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029d8:	6066      	str	r6, [r4, #4]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029da:	f7fe fd6b 	bl	80014b4 <HAL_GPIO_Init>
  hadc.Instance = ADC1;
 80029de:	4dc2      	ldr	r5, [pc, #776]	; (8002ce8 <main+0x364>)
 80029e0:	4bc2      	ldr	r3, [pc, #776]	; (8002cec <main+0x368>)
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80029e2:	0028      	movs	r0, r5
  hadc.Instance = ADC1;
 80029e4:	602b      	str	r3, [r5, #0]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80029e6:	2304      	movs	r3, #4
 80029e8:	616b      	str	r3, [r5, #20]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80029ea:	23c2      	movs	r3, #194	; 0xc2
 80029ec:	33ff      	adds	r3, #255	; 0xff
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80029ee:	606e      	str	r6, [r5, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80029f0:	60ae      	str	r6, [r5, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80029f2:	60ee      	str	r6, [r5, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80029f4:	612f      	str	r7, [r5, #16]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80029f6:	61ae      	str	r6, [r5, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80029f8:	61ee      	str	r6, [r5, #28]
  hadc.Init.ContinuousConvMode = DISABLE;
 80029fa:	622e      	str	r6, [r5, #32]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80029fc:	626e      	str	r6, [r5, #36]	; 0x24
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80029fe:	62ab      	str	r3, [r5, #40]	; 0x28
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002a00:	62ee      	str	r6, [r5, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002a02:	632e      	str	r6, [r5, #48]	; 0x30
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002a04:	636f      	str	r7, [r5, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002a06:	f7fe fbad 	bl	8001164 <HAL_ADC_Init>
 8002a0a:	42b0      	cmp	r0, r6
 8002a0c:	d000      	beq.n	8002a10 <main+0x8c>
 8002a0e:	e7fe      	b.n	8002a0e <main+0x8a>
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002a10:	2380      	movs	r3, #128	; 0x80
 8002a12:	015b      	lsls	r3, r3, #5
 8002a14:	6063      	str	r3, [r4, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002a16:	2380      	movs	r3, #128	; 0x80
  sConfig.Channel = ADC_CHANNEL_0;
 8002a18:	9005      	str	r0, [sp, #20]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002a1a:	055b      	lsls	r3, r3, #21
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002a1c:	0021      	movs	r1, r4
 8002a1e:	0028      	movs	r0, r5
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002a20:	60a3      	str	r3, [r4, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002a22:	f7fe fc75 	bl	8001310 <HAL_ADC_ConfigChannel>
 8002a26:	2800      	cmp	r0, #0
 8002a28:	d000      	beq.n	8002a2c <main+0xa8>
 8002a2a:	e7fe      	b.n	8002a2a <main+0xa6>
  hi2c1.Instance = I2C1;
 8002a2c:	4db0      	ldr	r5, [pc, #704]	; (8002cf0 <main+0x36c>)
 8002a2e:	4bb1      	ldr	r3, [pc, #708]	; (8002cf4 <main+0x370>)
  hi2c1.Init.OwnAddress1 = 0;
 8002a30:	60a8      	str	r0, [r5, #8]
  hi2c1.Instance = I2C1;
 8002a32:	602b      	str	r3, [r5, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8002a34:	4bb0      	ldr	r3, [pc, #704]	; (8002cf8 <main+0x374>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a36:	6128      	str	r0, [r5, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002a38:	6168      	str	r0, [r5, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002a3a:	61a8      	str	r0, [r5, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a3c:	61e8      	str	r0, [r5, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a3e:	6228      	str	r0, [r5, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002a40:	0028      	movs	r0, r5
  hi2c1.Init.Timing = 0x2000090E;
 8002a42:	606b      	str	r3, [r5, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a44:	60ef      	str	r7, [r5, #12]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002a46:	f7fe fecf 	bl	80017e8 <HAL_I2C_Init>
 8002a4a:	1e01      	subs	r1, r0, #0
 8002a4c:	d000      	beq.n	8002a50 <main+0xcc>
 8002a4e:	e7fe      	b.n	8002a4e <main+0xca>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002a50:	0028      	movs	r0, r5
 8002a52:	f7fe ffb7 	bl	80019c4 <HAL_I2CEx_ConfigAnalogFilter>
 8002a56:	1e01      	subs	r1, r0, #0
 8002a58:	d000      	beq.n	8002a5c <main+0xd8>
 8002a5a:	e7fe      	b.n	8002a5a <main+0xd6>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002a5c:	0028      	movs	r0, r5
 8002a5e:	f7fe ffd7 	bl	8001a10 <HAL_I2CEx_ConfigDigitalFilter>
 8002a62:	2800      	cmp	r0, #0
 8002a64:	d000      	beq.n	8002a68 <main+0xe4>
 8002a66:	e7fe      	b.n	8002a66 <main+0xe2>
  huart1.Instance = USART1;
 8002a68:	4da4      	ldr	r5, [pc, #656]	; (8002cfc <main+0x378>)
 8002a6a:	4ba5      	ldr	r3, [pc, #660]	; (8002d00 <main+0x37c>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a6c:	60a8      	str	r0, [r5, #8]
  huart1.Instance = USART1;
 8002a6e:	602b      	str	r3, [r5, #0]
  huart1.Init.BaudRate = 9600;
 8002a70:	2396      	movs	r3, #150	; 0x96
 8002a72:	019b      	lsls	r3, r3, #6
 8002a74:	606b      	str	r3, [r5, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a76:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a78:	60e8      	str	r0, [r5, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a7a:	6128      	str	r0, [r5, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a7c:	61a8      	str	r0, [r5, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a7e:	61e8      	str	r0, [r5, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a80:	6228      	str	r0, [r5, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a82:	6268      	str	r0, [r5, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a84:	0028      	movs	r0, r5
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a86:	616b      	str	r3, [r5, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a88:	f7ff fd54 	bl	8002534 <HAL_UART_Init>
 8002a8c:	2800      	cmp	r0, #0
 8002a8e:	d000      	beq.n	8002a92 <main+0x10e>
 8002a90:	e7fe      	b.n	8002a90 <main+0x10c>
  htim1.Instance = TIM1;
 8002a92:	4e9c      	ldr	r6, [pc, #624]	; (8002d04 <main+0x380>)
 8002a94:	4b9c      	ldr	r3, [pc, #624]	; (8002d08 <main+0x384>)
  htim1.Init.Prescaler = 0;
 8002a96:	6070      	str	r0, [r6, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a98:	60b0      	str	r0, [r6, #8]
  htim1.Init.Period = 0;
 8002a9a:	60f0      	str	r0, [r6, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a9c:	6130      	str	r0, [r6, #16]
  htim1.Init.RepetitionCounter = 0;
 8002a9e:	6170      	str	r0, [r6, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002aa0:	61b0      	str	r0, [r6, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002aa2:	0030      	movs	r0, r6
  htim1.Instance = TIM1;
 8002aa4:	6033      	str	r3, [r6, #0]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002aa6:	f7ff fb5b 	bl	8002160 <HAL_TIM_Base_Init>
 8002aaa:	2800      	cmp	r0, #0
 8002aac:	d000      	beq.n	8002ab0 <main+0x12c>
 8002aae:	e7fe      	b.n	8002aae <main+0x12a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ab0:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002ab2:	0021      	movs	r1, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ab4:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002ab6:	0030      	movs	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ab8:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002aba:	f7ff fb79 	bl	80021b0 <HAL_TIM_ConfigClockSource>
 8002abe:	2800      	cmp	r0, #0
 8002ac0:	d000      	beq.n	8002ac4 <main+0x140>
 8002ac2:	e7fe      	b.n	8002ac2 <main+0x13e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ac4:	9003      	str	r0, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ac6:	9004      	str	r0, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002ac8:	a903      	add	r1, sp, #12
 8002aca:	0030      	movs	r0, r6
 8002acc:	f7ff fc24 	bl	8002318 <HAL_TIMEx_MasterConfigSynchronization>
 8002ad0:	2800      	cmp	r0, #0
 8002ad2:	d000      	beq.n	8002ad6 <main+0x152>
 8002ad4:	e7fe      	b.n	8002ad4 <main+0x150>
  	lcd_init ();
 8002ad6:	f7ff feaf 	bl	8002838 <lcd_init>
	lcd_send_cmd(0x01);
 8002ada:	0038      	movs	r0, r7
 8002adc:	f7ff fe74 	bl	80027c8 <lcd_send_cmd>
	HAL_Delay(50);
 8002ae0:	2032      	movs	r0, #50	; 0x32
 8002ae2:	f7fe fae3 	bl	80010ac <HAL_Delay>
	lcd_send_string("Selecione o modo");
 8002ae6:	4889      	ldr	r0, [pc, #548]	; (8002d0c <main+0x388>)
 8002ae8:	f7ff feb1 	bl	800284e <lcd_send_string>
	lcd_send_cmd(0xC0);
 8002aec:	20c0      	movs	r0, #192	; 0xc0
 8002aee:	f7ff fe6b 	bl	80027c8 <lcd_send_cmd>
	  if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_7) == 1){
 8002af2:	2690      	movs	r6, #144	; 0x90
	lcd_send_string("C ou L");
 8002af4:	4886      	ldr	r0, [pc, #536]	; (8002d10 <main+0x38c>)
 8002af6:	f7ff feaa 	bl	800284e <lcd_send_string>
	  if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_7) == 1){
 8002afa:	05f6      	lsls	r6, r6, #23
 8002afc:	2180      	movs	r1, #128	; 0x80
 8002afe:	0030      	movs	r0, r6
 8002b00:	f7fe fd88 	bl	8001614 <HAL_GPIO_ReadPin>
 8002b04:	2801      	cmp	r0, #1
 8002b06:	d100      	bne.n	8002b0a <main+0x186>
 8002b08:	e0b9      	b.n	8002c7e <main+0x2fa>
	  if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_6) == 1){
 8002b0a:	2140      	movs	r1, #64	; 0x40
 8002b0c:	0030      	movs	r0, r6
 8002b0e:	f7fe fd81 	bl	8001614 <HAL_GPIO_ReadPin>
 8002b12:	2801      	cmp	r0, #1
 8002b14:	d1f2      	bne.n	8002afc <main+0x178>
		  a = 1 ;
 8002b16:	0006      	movs	r6, r0
	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_7) == 1 || HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_6) == 1);
 8002b18:	2790      	movs	r7, #144	; 0x90
 8002b1a:	05ff      	lsls	r7, r7, #23
 8002b1c:	2180      	movs	r1, #128	; 0x80
 8002b1e:	0038      	movs	r0, r7
 8002b20:	f7fe fd78 	bl	8001614 <HAL_GPIO_ReadPin>
 8002b24:	2801      	cmp	r0, #1
 8002b26:	d0f9      	beq.n	8002b1c <main+0x198>
 8002b28:	2140      	movs	r1, #64	; 0x40
 8002b2a:	0038      	movs	r0, r7
 8002b2c:	f7fe fd72 	bl	8001614 <HAL_GPIO_ReadPin>
 8002b30:	2801      	cmp	r0, #1
 8002b32:	d0f3      	beq.n	8002b1c <main+0x198>
	HAL_UART_Init(&huart1);
 8002b34:	0028      	movs	r0, r5
 8002b36:	f7ff fcfd 	bl	8002534 <HAL_UART_Init>
		  lcd_send_cmd(0x01);
 8002b3a:	2001      	movs	r0, #1
	  if(a == 0){
 8002b3c:	2e00      	cmp	r6, #0
 8002b3e:	d000      	beq.n	8002b42 <main+0x1be>
 8002b40:	e106      	b.n	8002d50 <main+0x3cc>
		  lcd_send_cmd(0x01);
 8002b42:	f7ff fe41 	bl	80027c8 <lcd_send_cmd>
		  HAL_Delay(50);
 8002b46:	2032      	movs	r0, #50	; 0x32
 8002b48:	f7fe fab0 	bl	80010ac <HAL_Delay>
		  lcd_send_cmd(0x80);
 8002b4c:	2080      	movs	r0, #128	; 0x80
 8002b4e:	f7ff fe3b 	bl	80027c8 <lcd_send_cmd>
			  if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_7) == 1){
 8002b52:	2590      	movs	r5, #144	; 0x90
		  lcd_send_string("Insira o cap.");
 8002b54:	486f      	ldr	r0, [pc, #444]	; (8002d14 <main+0x390>)
 8002b56:	f7ff fe7a 	bl	800284e <lcd_send_string>
			  if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_7) == 1){
 8002b5a:	05ed      	lsls	r5, r5, #23
 8002b5c:	2180      	movs	r1, #128	; 0x80
 8002b5e:	0028      	movs	r0, r5
 8002b60:	f7fe fd58 	bl	8001614 <HAL_GPIO_ReadPin>
 8002b64:	2801      	cmp	r0, #1
 8002b66:	d1f9      	bne.n	8002b5c <main+0x1d8>
		  while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_7) == 1);
 8002b68:	2590      	movs	r5, #144	; 0x90
 8002b6a:	05ed      	lsls	r5, r5, #23
 8002b6c:	2180      	movs	r1, #128	; 0x80
 8002b6e:	0028      	movs	r0, r5
 8002b70:	f7fe fd50 	bl	8001614 <HAL_GPIO_ReadPin>
 8002b74:	2801      	cmp	r0, #1
 8002b76:	d0f9      	beq.n	8002b6c <main+0x1e8>
			  lcd_send_cmd(0x01);
 8002b78:	2001      	movs	r0, #1
 8002b7a:	f7ff fe25 	bl	80027c8 <lcd_send_cmd>
			  HAL_Delay(50);
 8002b7e:	2032      	movs	r0, #50	; 0x32
 8002b80:	f7fe fa94 	bl	80010ac <HAL_Delay>
			  lcd_send_cmd(0x80);
 8002b84:	2080      	movs	r0, #128	; 0x80
 8002b86:	f7ff fe1f 	bl	80027c8 <lcd_send_cmd>
			  lcd_send_string("Medindo C...");
 8002b8a:	4863      	ldr	r0, [pc, #396]	; (8002d18 <main+0x394>)
 8002b8c:	f7ff fe5f 	bl	800284e <lcd_send_string>
			  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,1);
 8002b90:	2090      	movs	r0, #144	; 0x90
 8002b92:	2201      	movs	r2, #1
 8002b94:	2110      	movs	r1, #16
 8002b96:	05c0      	lsls	r0, r0, #23
 8002b98:	f7fe fd42 	bl	8001620 <HAL_GPIO_WritePin>
			  HAL_ADC_Start(&hadc);
 8002b9c:	4d52      	ldr	r5, [pc, #328]	; (8002ce8 <main+0x364>)
					  HAL_ADC_Start(&hadc);
 8002b9e:	0028      	movs	r0, r5
 8002ba0:	f7fe fb86 	bl	80012b0 <HAL_ADC_Start>
			  while(HAL_ADC_GetValue(&hadc) < 2482 ){
 8002ba4:	0028      	movs	r0, r5
 8002ba6:	f7fe fbaf 	bl	8001308 <HAL_ADC_GetValue>
 8002baa:	4b5c      	ldr	r3, [pc, #368]	; (8002d1c <main+0x398>)
 8002bac:	4298      	cmp	r0, r3
 8002bae:	d9f6      	bls.n	8002b9e <main+0x21a>
			  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,0);
 8002bb0:	2090      	movs	r0, #144	; 0x90
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	2110      	movs	r1, #16
 8002bb6:	05c0      	lsls	r0, r0, #23
 8002bb8:	f7fe fd32 	bl	8001620 <HAL_GPIO_WritePin>
			  HAL_ADC_Start(&hadc);
 8002bbc:	0028      	movs	r0, r5
 8002bbe:	f7fe fb77 	bl	80012b0 <HAL_ADC_Start>
	return counter;
 8002bc2:	4f57      	ldr	r7, [pc, #348]	; (8002d20 <main+0x39c>)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	9300      	str	r3, [sp, #0]
			  while(HAL_ADC_GetValue(&hadc) > 914){
 8002bc8:	0028      	movs	r0, r5
 8002bca:	f7fe fb9d 	bl	8001308 <HAL_ADC_GetValue>
 8002bce:	4b55      	ldr	r3, [pc, #340]	; (8002d24 <main+0x3a0>)
 8002bd0:	4298      	cmp	r0, r3
 8002bd2:	d856      	bhi.n	8002c82 <main+0x2fe>
			  float rc = finTime - iniTime;
 8002bd4:	9b00      	ldr	r3, [sp, #0]
	return counter;
 8002bd6:	6838      	ldr	r0, [r7, #0]
			  float rc = finTime - iniTime;
 8002bd8:	1ac0      	subs	r0, r0, r3
 8002bda:	f7fe f877 	bl	8000ccc <__aeabi_i2f>
			  rc  =  rc/1000;
 8002bde:	4952      	ldr	r1, [pc, #328]	; (8002d28 <main+0x3a4>)
 8002be0:	f7fd fc50 	bl	8000484 <__aeabi_fdiv>
			  float C = rc/r;
 8002be4:	4951      	ldr	r1, [pc, #324]	; (8002d2c <main+0x3a8>)
 8002be6:	f7fd fc4d 	bl	8000484 <__aeabi_fdiv>
 8002bea:	1c05      	adds	r5, r0, #0
			  if (C <= 0.000001 && C >= 0.000000001 ){
 8002bec:	f7fe f9be 	bl	8000f6c <__aeabi_f2d>
 8002bf0:	4a4f      	ldr	r2, [pc, #316]	; (8002d30 <main+0x3ac>)
 8002bf2:	4b50      	ldr	r3, [pc, #320]	; (8002d34 <main+0x3b0>)
 8002bf4:	9000      	str	r0, [sp, #0]
 8002bf6:	9101      	str	r1, [sp, #4]
 8002bf8:	f7fd fc26 	bl	8000448 <__aeabi_dcmple>
 8002bfc:	2800      	cmp	r0, #0
 8002bfe:	d00c      	beq.n	8002c1a <main+0x296>
 8002c00:	9800      	ldr	r0, [sp, #0]
 8002c02:	9901      	ldr	r1, [sp, #4]
 8002c04:	4a4c      	ldr	r2, [pc, #304]	; (8002d38 <main+0x3b4>)
 8002c06:	4b4d      	ldr	r3, [pc, #308]	; (8002d3c <main+0x3b8>)
 8002c08:	f7fd fc32 	bl	8000470 <__aeabi_dcmpge>
 8002c0c:	2800      	cmp	r0, #0
 8002c0e:	d004      	beq.n	8002c1a <main+0x296>
				  C = C*1000000000.0;
 8002c10:	1c28      	adds	r0, r5, #0
 8002c12:	494b      	ldr	r1, [pc, #300]	; (8002d40 <main+0x3bc>)
 8002c14:	f7fd fd7e 	bl	8000714 <__aeabi_fmul>
 8002c18:	1c05      	adds	r5, r0, #0
			  if (C <= 0.001 && C > 0.000001){
 8002c1a:	1c28      	adds	r0, r5, #0
 8002c1c:	f7fe f9a6 	bl	8000f6c <__aeabi_f2d>
 8002c20:	4a48      	ldr	r2, [pc, #288]	; (8002d44 <main+0x3c0>)
 8002c22:	4b49      	ldr	r3, [pc, #292]	; (8002d48 <main+0x3c4>)
 8002c24:	9000      	str	r0, [sp, #0]
 8002c26:	9101      	str	r1, [sp, #4]
 8002c28:	f7fd fc0e 	bl	8000448 <__aeabi_dcmple>
 8002c2c:	2800      	cmp	r0, #0
 8002c2e:	d02c      	beq.n	8002c8a <main+0x306>
 8002c30:	9800      	ldr	r0, [sp, #0]
 8002c32:	9901      	ldr	r1, [sp, #4]
 8002c34:	4a3e      	ldr	r2, [pc, #248]	; (8002d30 <main+0x3ac>)
 8002c36:	4b3f      	ldr	r3, [pc, #252]	; (8002d34 <main+0x3b0>)
 8002c38:	f7fd fc10 	bl	800045c <__aeabi_dcmpgt>
 8002c3c:	2800      	cmp	r0, #0
 8002c3e:	d024      	beq.n	8002c8a <main+0x306>
				  C = C*1000000;
 8002c40:	1c28      	adds	r0, r5, #0
 8002c42:	4942      	ldr	r1, [pc, #264]	; (8002d4c <main+0x3c8>)
 8002c44:	f7fd fd66 	bl	8000714 <__aeabi_fmul>
				  i = 1;
 8002c48:	2701      	movs	r7, #1
				  C = C*1000000;
 8002c4a:	1c05      	adds	r5, r0, #0
			  ftoa(C,str);
 8002c4c:	0021      	movs	r1, r4
 8002c4e:	1c28      	adds	r0, r5, #0
 8002c50:	f7ff fe3a 	bl	80028c8 <ftoa>
			  lcd_send_cmd(0x01);
 8002c54:	2001      	movs	r0, #1
 8002c56:	f7ff fdb7 	bl	80027c8 <lcd_send_cmd>
			  HAL_Delay(50);
 8002c5a:	2032      	movs	r0, #50	; 0x32
 8002c5c:	f7fe fa26 	bl	80010ac <HAL_Delay>
			  lcd_send_cmd(0x80);
 8002c60:	2080      	movs	r0, #128	; 0x80
 8002c62:	f7ff fdb1 	bl	80027c8 <lcd_send_cmd>
			  if (i == 0){
 8002c66:	2f00      	cmp	r7, #0
 8002c68:	d012      	beq.n	8002c90 <main+0x30c>
				  while(str[j] != '\0'){
 8002c6a:	5da3      	ldrb	r3, [r4, r6]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d136      	bne.n	8002cde <main+0x35a>
				  str[j] = ' ';
 8002c70:	3320      	adds	r3, #32
 8002c72:	55a3      	strb	r3, [r4, r6]
				  str[j+1] = 'u';
 8002c74:	3355      	adds	r3, #85	; 0x55
 8002c76:	19a6      	adds	r6, r4, r6
 8002c78:	7073      	strb	r3, [r6, #1]
				  str[j+2] = 'F';
 8002c7a:	3b2f      	subs	r3, #47	; 0x2f
 8002c7c:	e011      	b.n	8002ca2 <main+0x31e>
	int a = 0;
 8002c7e:	2600      	movs	r6, #0
 8002c80:	e74a      	b.n	8002b18 <main+0x194>
				  HAL_ADC_Start(&hadc);
 8002c82:	0028      	movs	r0, r5
 8002c84:	f7fe fb14 	bl	80012b0 <HAL_ADC_Start>
 8002c88:	e79e      	b.n	8002bc8 <main+0x244>
			  char i = 0;
 8002c8a:	0007      	movs	r7, r0
 8002c8c:	e7de      	b.n	8002c4c <main+0x2c8>
					  j++;
 8002c8e:	3601      	adds	r6, #1
				  while(str[j] != '\0'){
 8002c90:	5da3      	ldrb	r3, [r4, r6]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1fb      	bne.n	8002c8e <main+0x30a>
				  str[j] = ' ';
 8002c96:	3320      	adds	r3, #32
 8002c98:	55a3      	strb	r3, [r4, r6]
				  str[j+1] = 'n';
 8002c9a:	334e      	adds	r3, #78	; 0x4e
 8002c9c:	19a6      	adds	r6, r4, r6
 8002c9e:	7073      	strb	r3, [r6, #1]
				  str[j+2] = 'F';
 8002ca0:	3b28      	subs	r3, #40	; 0x28
			  lcd_send_string(str);
 8002ca2:	0020      	movs	r0, r4
					  HAL_UART_Transmit(&huart1,(uint8_t *) str,10,HAL_MAX_DELAY);
 8002ca4:	2501      	movs	r5, #1
				  str[j+2] = 'F';
 8002ca6:	70b3      	strb	r3, [r6, #2]
			  lcd_send_string(str);
 8002ca8:	f7ff fdd1 	bl	800284e <lcd_send_string>
					  HAL_UART_Transmit(&huart1,(uint8_t *) str,10,HAL_MAX_DELAY);
 8002cac:	426d      	negs	r5, r5
				  HAL_UART_Receive(&huart1,(uint8_t *) dado,4,100);
 8002cae:	4c13      	ldr	r4, [pc, #76]	; (8002cfc <main+0x378>)
 8002cb0:	ae03      	add	r6, sp, #12
 8002cb2:	2364      	movs	r3, #100	; 0x64
 8002cb4:	2204      	movs	r2, #4
 8002cb6:	0031      	movs	r1, r6
 8002cb8:	0020      	movs	r0, r4
 8002cba:	f7ff fd0f 	bl	80026dc <HAL_UART_Receive>
				  if(dado[0] != '\0'){
 8002cbe:	7833      	ldrb	r3, [r6, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0f4      	beq.n	8002cae <main+0x32a>
					  HAL_UART_Transmit(&huart1,(uint8_t *) str,10,HAL_MAX_DELAY);
 8002cc4:	002b      	movs	r3, r5
 8002cc6:	a905      	add	r1, sp, #20
 8002cc8:	220a      	movs	r2, #10
 8002cca:	0020      	movs	r0, r4
 8002ccc:	f7ff fca0 	bl	8002610 <HAL_UART_Transmit>
					  HAL_UART_Transmit(&huart1,(uint8_t *) 'r',1,HAL_MAX_DELAY);
 8002cd0:	002b      	movs	r3, r5
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	2172      	movs	r1, #114	; 0x72
 8002cd6:	0020      	movs	r0, r4
 8002cd8:	f7ff fc9a 	bl	8002610 <HAL_UART_Transmit>
 8002cdc:	e7e7      	b.n	8002cae <main+0x32a>
				  	  j++;
 8002cde:	3601      	adds	r6, #1
 8002ce0:	e7c3      	b.n	8002c6a <main+0x2e6>
 8002ce2:	46c0      	nop			; (mov r8, r8)
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	20000124 	.word	0x20000124
 8002cec:	40012400 	.word	0x40012400
 8002cf0:	20000028 	.word	0x20000028
 8002cf4:	40005400 	.word	0x40005400
 8002cf8:	2000090e 	.word	0x2000090e
 8002cfc:	20000074 	.word	0x20000074
 8002d00:	40013800 	.word	0x40013800
 8002d04:	200000e4 	.word	0x200000e4
 8002d08:	40012c00 	.word	0x40012c00
 8002d0c:	08003218 	.word	0x08003218
 8002d10:	08003229 	.word	0x08003229
 8002d14:	08003230 	.word	0x08003230
 8002d18:	0800323e 	.word	0x0800323e
 8002d1c:	000009b1 	.word	0x000009b1
 8002d20:	20000020 	.word	0x20000020
 8002d24:	00000392 	.word	0x00000392
 8002d28:	447a0000 	.word	0x447a0000
 8002d2c:	4877a800 	.word	0x4877a800
 8002d30:	a0b5ed8d 	.word	0xa0b5ed8d
 8002d34:	3eb0c6f7 	.word	0x3eb0c6f7
 8002d38:	e826d695 	.word	0xe826d695
 8002d3c:	3e112e0b 	.word	0x3e112e0b
 8002d40:	4e6e6b28 	.word	0x4e6e6b28
 8002d44:	d2f1a9fc 	.word	0xd2f1a9fc
 8002d48:	3f50624d 	.word	0x3f50624d
 8002d4c:	49742400 	.word	0x49742400
	  		lcd_send_cmd(0x01);
 8002d50:	f7ff fd3a 	bl	80027c8 <lcd_send_cmd>
			  HAL_Delay(50);
 8002d54:	2032      	movs	r0, #50	; 0x32
 8002d56:	f7fe f9a9 	bl	80010ac <HAL_Delay>
			  lcd_send_cmd(0x80);
 8002d5a:	2080      	movs	r0, #128	; 0x80
 8002d5c:	f7ff fd34 	bl	80027c8 <lcd_send_cmd>
				  if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_6) == 1){
 8002d60:	2590      	movs	r5, #144	; 0x90
			  lcd_send_string("Insira o ind...");
 8002d62:	4843      	ldr	r0, [pc, #268]	; (8002e70 <main+0x4ec>)
 8002d64:	f7ff fd73 	bl	800284e <lcd_send_string>
				  if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_6) == 1){
 8002d68:	05ed      	lsls	r5, r5, #23
 8002d6a:	2140      	movs	r1, #64	; 0x40
 8002d6c:	0028      	movs	r0, r5
 8002d6e:	f7fe fc51 	bl	8001614 <HAL_GPIO_ReadPin>
 8002d72:	2801      	cmp	r0, #1
 8002d74:	d1f9      	bne.n	8002d6a <main+0x3e6>
			  while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_6) == 1);
 8002d76:	2590      	movs	r5, #144	; 0x90
 8002d78:	05ed      	lsls	r5, r5, #23
 8002d7a:	2140      	movs	r1, #64	; 0x40
 8002d7c:	0028      	movs	r0, r5
 8002d7e:	f7fe fc49 	bl	8001614 <HAL_GPIO_ReadPin>
 8002d82:	2801      	cmp	r0, #1
 8002d84:	d0f9      	beq.n	8002d7a <main+0x3f6>
				  lcd_send_cmd(0x01);
 8002d86:	2001      	movs	r0, #1
 8002d88:	f7ff fd1e 	bl	80027c8 <lcd_send_cmd>
				  HAL_Delay(50);
 8002d8c:	2032      	movs	r0, #50	; 0x32
 8002d8e:	f7fe f98d 	bl	80010ac <HAL_Delay>
				  lcd_send_cmd(0x80);
 8002d92:	2080      	movs	r0, #128	; 0x80
 8002d94:	f7ff fd18 	bl	80027c8 <lcd_send_cmd>
				  lcd_send_string("Medindo L...");
 8002d98:	4836      	ldr	r0, [pc, #216]	; (8002e74 <main+0x4f0>)
 8002d9a:	f7ff fd58 	bl	800284e <lcd_send_string>
				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,1);
 8002d9e:	2090      	movs	r0, #144	; 0x90
 8002da0:	2201      	movs	r2, #1
 8002da2:	2110      	movs	r1, #16
 8002da4:	05c0      	lsls	r0, r0, #23
 8002da6:	f7fe fc3b 	bl	8001620 <HAL_GPIO_WritePin>
				  HAL_ADC_Start(&hadc);
 8002daa:	4d33      	ldr	r5, [pc, #204]	; (8002e78 <main+0x4f4>)
 8002dac:	0028      	movs	r0, r5
 8002dae:	f7fe fa7f 	bl	80012b0 <HAL_ADC_Start>
	return counter;
 8002db2:	4f32      	ldr	r7, [pc, #200]	; (8002e7c <main+0x4f8>)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	9300      	str	r3, [sp, #0]
				  while(HAL_ADC_GetValue(&hadc) > 1507){
 8002db8:	0028      	movs	r0, r5
 8002dba:	f7fe faa5 	bl	8001308 <HAL_ADC_GetValue>
 8002dbe:	4b30      	ldr	r3, [pc, #192]	; (8002e80 <main+0x4fc>)
 8002dc0:	4298      	cmp	r0, r3
 8002dc2:	d844      	bhi.n	8002e4e <main+0x4ca>
				  float LdivR = finTime - iniTime;
 8002dc4:	9b00      	ldr	r3, [sp, #0]
	return counter;
 8002dc6:	6838      	ldr	r0, [r7, #0]
				  float LdivR = finTime - iniTime;
 8002dc8:	1ac0      	subs	r0, r0, r3
 8002dca:	f7fd ff7f 	bl	8000ccc <__aeabi_i2f>
				  l = LdivR*r2;
 8002dce:	492d      	ldr	r1, [pc, #180]	; (8002e84 <main+0x500>)
 8002dd0:	f7fd fca0 	bl	8000714 <__aeabi_fmul>
 8002dd4:	1c05      	adds	r5, r0, #0
				  lcd_send_cmd(0x01);
 8002dd6:	2001      	movs	r0, #1
 8002dd8:	f7ff fcf6 	bl	80027c8 <lcd_send_cmd>
				  HAL_Delay(50);
 8002ddc:	2032      	movs	r0, #50	; 0x32
 8002dde:	f7fe f965 	bl	80010ac <HAL_Delay>
				  lcd_send_cmd(0x80);
 8002de2:	2080      	movs	r0, #128	; 0x80
 8002de4:	f7ff fcf0 	bl	80027c8 <lcd_send_cmd>
				  if(l >= 0.001){
 8002de8:	1c28      	adds	r0, r5, #0
 8002dea:	f7fe f8bf 	bl	8000f6c <__aeabi_f2d>
 8002dee:	4a26      	ldr	r2, [pc, #152]	; (8002e88 <main+0x504>)
 8002df0:	4b26      	ldr	r3, [pc, #152]	; (8002e8c <main+0x508>)
 8002df2:	9000      	str	r0, [sp, #0]
 8002df4:	9101      	str	r1, [sp, #4]
 8002df6:	f7fd fb3b 	bl	8000470 <__aeabi_dcmpge>
 8002dfa:	2800      	cmp	r0, #0
 8002dfc:	d02b      	beq.n	8002e56 <main+0x4d2>
					  l*= 1000;
 8002dfe:	4924      	ldr	r1, [pc, #144]	; (8002e90 <main+0x50c>)
					  l*= 1000000;
 8002e00:	1c28      	adds	r0, r5, #0
 8002e02:	f7fd fc87 	bl	8000714 <__aeabi_fmul>
 8002e06:	1c05      	adds	r5, r0, #0
				  ftoa(l,str);
 8002e08:	0021      	movs	r1, r4
 8002e0a:	1c28      	adds	r0, r5, #0
 8002e0c:	f7ff fd5c 	bl	80028c8 <ftoa>
					  int j = 0;
 8002e10:	2300      	movs	r3, #0
					  while(str[j] != '\0'){
 8002e12:	5ce2      	ldrb	r2, [r4, r3]
 8002e14:	2a00      	cmp	r2, #0
 8002e16:	d128      	bne.n	8002e6a <main+0x4e6>
					  str[j] = ' ';
 8002e18:	3220      	adds	r2, #32
 8002e1a:	54e2      	strb	r2, [r4, r3]
					  str[j+1] = 'm';
 8002e1c:	18e3      	adds	r3, r4, r3
 8002e1e:	324d      	adds	r2, #77	; 0x4d
 8002e20:	705a      	strb	r2, [r3, #1]
				  lcd_send_string(str);
 8002e22:	0020      	movs	r0, r4
					  str[j+2] = 'H';
 8002e24:	3a25      	subs	r2, #37	; 0x25
							if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_6) == 1){
 8002e26:	2590      	movs	r5, #144	; 0x90
					  str[j+2] = 'H';
 8002e28:	709a      	strb	r2, [r3, #2]
				  lcd_send_string(str);
 8002e2a:	f7ff fd10 	bl	800284e <lcd_send_string>
							if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_6) == 1){
 8002e2e:	05ed      	lsls	r5, r5, #23
 8002e30:	2140      	movs	r1, #64	; 0x40
 8002e32:	0028      	movs	r0, r5
 8002e34:	f7fe fbee 	bl	8001614 <HAL_GPIO_ReadPin>
 8002e38:	2801      	cmp	r0, #1
 8002e3a:	d1f9      	bne.n	8002e30 <main+0x4ac>
				  while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_6) == 1);
 8002e3c:	2590      	movs	r5, #144	; 0x90
 8002e3e:	05ed      	lsls	r5, r5, #23
 8002e40:	2140      	movs	r1, #64	; 0x40
 8002e42:	0028      	movs	r0, r5
 8002e44:	f7fe fbe6 	bl	8001614 <HAL_GPIO_ReadPin>
 8002e48:	2801      	cmp	r0, #1
 8002e4a:	d0f9      	beq.n	8002e40 <main+0x4bc>
 8002e4c:	e675      	b.n	8002b3a <main+0x1b6>
					  HAL_ADC_Start(&hadc);
 8002e4e:	0028      	movs	r0, r5
 8002e50:	f7fe fa2e 	bl	80012b0 <HAL_ADC_Start>
 8002e54:	e7b0      	b.n	8002db8 <main+0x434>
				  }else if (l < 0.001){
 8002e56:	4a0c      	ldr	r2, [pc, #48]	; (8002e88 <main+0x504>)
 8002e58:	4b0c      	ldr	r3, [pc, #48]	; (8002e8c <main+0x508>)
 8002e5a:	9800      	ldr	r0, [sp, #0]
 8002e5c:	9901      	ldr	r1, [sp, #4]
 8002e5e:	f7fd fae9 	bl	8000434 <__aeabi_dcmplt>
 8002e62:	2800      	cmp	r0, #0
 8002e64:	d0d0      	beq.n	8002e08 <main+0x484>
					  l*= 1000000;
 8002e66:	490b      	ldr	r1, [pc, #44]	; (8002e94 <main+0x510>)
 8002e68:	e7ca      	b.n	8002e00 <main+0x47c>
						  j++;
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	e7d1      	b.n	8002e12 <main+0x48e>
 8002e6e:	46c0      	nop			; (mov r8, r8)
 8002e70:	0800324b 	.word	0x0800324b
 8002e74:	0800325b 	.word	0x0800325b
 8002e78:	20000124 	.word	0x20000124
 8002e7c:	20000020 	.word	0x20000020
 8002e80:	000005e3 	.word	0x000005e3
 8002e84:	459ab000 	.word	0x459ab000
 8002e88:	d2f1a9fc 	.word	0xd2f1a9fc
 8002e8c:	3f50624d 	.word	0x3f50624d
 8002e90:	447a0000 	.word	0x447a0000
 8002e94:	49742400 	.word	0x49742400

08002e98 <HAL_SYSTICK_Callback>:
	counter++;
 8002e98:	4a02      	ldr	r2, [pc, #8]	; (8002ea4 <HAL_SYSTICK_Callback+0xc>)
 8002e9a:	6813      	ldr	r3, [r2, #0]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	6013      	str	r3, [r2, #0]
}
 8002ea0:	4770      	bx	lr
 8002ea2:	46c0      	nop			; (mov r8, r8)
 8002ea4:	20000020 	.word	0x20000020

08002ea8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ea8:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eaa:	2001      	movs	r0, #1
 8002eac:	4b11      	ldr	r3, [pc, #68]	; (8002ef4 <HAL_MspInit+0x4c>)
 8002eae:	6999      	ldr	r1, [r3, #24]
 8002eb0:	4301      	orrs	r1, r0
 8002eb2:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002eb4:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eb6:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002eb8:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eba:	4002      	ands	r2, r0
 8002ebc:	9200      	str	r2, [sp, #0]
 8002ebe:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ec0:	69da      	ldr	r2, [r3, #28]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8002ec2:	3806      	subs	r0, #6
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	61da      	str	r2, [r3, #28]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8002ec8:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8002eca:	69db      	ldr	r3, [r3, #28]
 8002ecc:	400b      	ands	r3, r1
 8002ece:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8002ed0:	0011      	movs	r1, r2
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ed2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8002ed4:	f7fe fa92 	bl	80013fc <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002ed8:	2200      	movs	r2, #0
 8002eda:	2002      	movs	r0, #2
 8002edc:	0011      	movs	r1, r2
 8002ede:	4240      	negs	r0, r0
 8002ee0:	f7fe fa8c 	bl	80013fc <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	2001      	movs	r0, #1
 8002ee8:	0011      	movs	r1, r2
 8002eea:	4240      	negs	r0, r0
 8002eec:	f7fe fa86 	bl	80013fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ef0:	bd07      	pop	{r0, r1, r2, pc}
 8002ef2:	46c0      	nop			; (mov r8, r8)
 8002ef4:	40021000 	.word	0x40021000

08002ef8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ef8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8002efa:	4b0d      	ldr	r3, [pc, #52]	; (8002f30 <HAL_ADC_MspInit+0x38>)
 8002efc:	6802      	ldr	r2, [r0, #0]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d114      	bne.n	8002f2c <HAL_ADC_MspInit+0x34>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002f02:	2080      	movs	r0, #128	; 0x80
 8002f04:	4a0b      	ldr	r2, [pc, #44]	; (8002f34 <HAL_ADC_MspInit+0x3c>)
 8002f06:	0080      	lsls	r0, r0, #2
 8002f08:	6991      	ldr	r1, [r2, #24]
 8002f0a:	4301      	orrs	r1, r0
 8002f0c:	6191      	str	r1, [r2, #24]
 8002f0e:	6993      	ldr	r3, [r2, #24]
    PA0     ------> ADC_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f10:	a901      	add	r1, sp, #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002f12:	4003      	ands	r3, r0
 8002f14:	9300      	str	r3, [sp, #0]
 8002f16:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002f18:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f1a:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002f1c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f1e:	3302      	adds	r3, #2
 8002f20:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f22:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f24:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f26:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f28:	f7fe fac4 	bl	80014b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002f2c:	b007      	add	sp, #28
 8002f2e:	bd00      	pop	{pc}
 8002f30:	40012400 	.word	0x40012400
 8002f34:	40021000 	.word	0x40021000

08002f38 <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f38:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8002f3a:	4b10      	ldr	r3, [pc, #64]	; (8002f7c <HAL_I2C_MspInit+0x44>)
 8002f3c:	6802      	ldr	r2, [r0, #0]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d119      	bne.n	8002f76 <HAL_I2C_MspInit+0x3e>
  
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002f42:	23c0      	movs	r3, #192	; 0xc0
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f48:	2312      	movs	r3, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f4a:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f4c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f4e:	3b11      	subs	r3, #17
 8002f50:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f52:	3302      	adds	r3, #2
 8002f54:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f56:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002f58:	3301      	adds	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f5a:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002f5c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f5e:	f7fe faa9 	bl	80014b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f62:	2080      	movs	r0, #128	; 0x80
 8002f64:	4a06      	ldr	r2, [pc, #24]	; (8002f80 <HAL_I2C_MspInit+0x48>)
 8002f66:	0380      	lsls	r0, r0, #14
 8002f68:	69d1      	ldr	r1, [r2, #28]
 8002f6a:	4301      	orrs	r1, r0
 8002f6c:	61d1      	str	r1, [r2, #28]
 8002f6e:	69d3      	ldr	r3, [r2, #28]
 8002f70:	4003      	ands	r3, r0
 8002f72:	9300      	str	r3, [sp, #0]
 8002f74:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002f76:	b007      	add	sp, #28
 8002f78:	bd00      	pop	{pc}
 8002f7a:	46c0      	nop			; (mov r8, r8)
 8002f7c:	40005400 	.word	0x40005400
 8002f80:	40021000 	.word	0x40021000

08002f84 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM1)
 8002f84:	4b08      	ldr	r3, [pc, #32]	; (8002fa8 <HAL_TIM_Base_MspInit+0x24>)
 8002f86:	6802      	ldr	r2, [r0, #0]
{
 8002f88:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM1)
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d109      	bne.n	8002fa2 <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f8e:	2080      	movs	r0, #128	; 0x80
 8002f90:	4a06      	ldr	r2, [pc, #24]	; (8002fac <HAL_TIM_Base_MspInit+0x28>)
 8002f92:	0100      	lsls	r0, r0, #4
 8002f94:	6991      	ldr	r1, [r2, #24]
 8002f96:	4301      	orrs	r1, r0
 8002f98:	6191      	str	r1, [r2, #24]
 8002f9a:	6993      	ldr	r3, [r2, #24]
 8002f9c:	4003      	ands	r3, r0
 8002f9e:	9301      	str	r3, [sp, #4]
 8002fa0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002fa2:	b002      	add	sp, #8
 8002fa4:	4770      	bx	lr
 8002fa6:	46c0      	nop			; (mov r8, r8)
 8002fa8:	40012c00 	.word	0x40012c00
 8002fac:	40021000 	.word	0x40021000

08002fb0 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002fb0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8002fb2:	4b0f      	ldr	r3, [pc, #60]	; (8002ff0 <HAL_UART_MspInit+0x40>)
 8002fb4:	6802      	ldr	r2, [r0, #0]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d118      	bne.n	8002fec <HAL_UART_MspInit+0x3c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002fba:	2080      	movs	r0, #128	; 0x80
 8002fbc:	4a0d      	ldr	r2, [pc, #52]	; (8002ff4 <HAL_UART_MspInit+0x44>)
 8002fbe:	01c0      	lsls	r0, r0, #7
 8002fc0:	6991      	ldr	r1, [r2, #24]
 8002fc2:	4301      	orrs	r1, r0
 8002fc4:	6191      	str	r1, [r2, #24]
 8002fc6:	6993      	ldr	r3, [r2, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fc8:	a901      	add	r1, sp, #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8002fca:	4003      	ands	r3, r0
 8002fcc:	9300      	str	r3, [sp, #0]
 8002fce:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002fd0:	230c      	movs	r3, #12
 8002fd2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd4:	3b0a      	subs	r3, #10
 8002fd6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd8:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fda:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fdc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fde:	3303      	adds	r3, #3
 8002fe0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fe2:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002fe4:	3b02      	subs	r3, #2
 8002fe6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fe8:	f7fe fa64 	bl	80014b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002fec:	b007      	add	sp, #28
 8002fee:	bd00      	pop	{pc}
 8002ff0:	40013800 	.word	0x40013800
 8002ff4:	40021000 	.word	0x40021000

08002ff8 <NMI_Handler>:
 8002ff8:	4770      	bx	lr

08002ffa <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002ffa:	e7fe      	b.n	8002ffa <HardFault_Handler>

08002ffc <SVC_Handler>:
 8002ffc:	4770      	bx	lr

08002ffe <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ffe:	4770      	bx	lr

08003000 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003000:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003002:	f7fe f845 	bl	8001090 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8003006:	f7fe fa51 	bl	80014ac <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800300a:	bd10      	pop	{r4, pc}

0800300c <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 800300c:	2101      	movs	r1, #1
 800300e:	4b11      	ldr	r3, [pc, #68]	; (8003054 <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8003010:	4811      	ldr	r0, [pc, #68]	; (8003058 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	430a      	orrs	r2, r1
 8003016:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8003018:	685a      	ldr	r2, [r3, #4]
 800301a:	4002      	ands	r2, r0
 800301c:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	480e      	ldr	r0, [pc, #56]	; (800305c <SystemInit+0x50>)
 8003022:	4002      	ands	r2, r0
 8003024:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	480d      	ldr	r0, [pc, #52]	; (8003060 <SystemInit+0x54>)
 800302a:	4002      	ands	r2, r0
 800302c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	480c      	ldr	r0, [pc, #48]	; (8003064 <SystemInit+0x58>)
 8003032:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8003034:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8003036:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8003038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800303a:	4382      	bics	r2, r0
 800303c:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 800303e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003040:	4809      	ldr	r0, [pc, #36]	; (8003068 <SystemInit+0x5c>)
 8003042:	4002      	ands	r2, r0
 8003044:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8003046:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003048:	438a      	bics	r2, r1
 800304a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800304c:	2200      	movs	r2, #0
 800304e:	609a      	str	r2, [r3, #8]

}
 8003050:	4770      	bx	lr
 8003052:	46c0      	nop			; (mov r8, r8)
 8003054:	40021000 	.word	0x40021000
 8003058:	08ffb80c 	.word	0x08ffb80c
 800305c:	fef6ffff 	.word	0xfef6ffff
 8003060:	fffbffff 	.word	0xfffbffff
 8003064:	ffc0ffff 	.word	0xffc0ffff
 8003068:	fffffeec 	.word	0xfffffeec

0800306c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800306c:	480d      	ldr	r0, [pc, #52]	; (80030a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800306e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003070:	480d      	ldr	r0, [pc, #52]	; (80030a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003072:	490e      	ldr	r1, [pc, #56]	; (80030ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8003074:	4a0e      	ldr	r2, [pc, #56]	; (80030b0 <LoopForever+0xe>)
  movs r3, #0
 8003076:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003078:	e002      	b.n	8003080 <LoopCopyDataInit>

0800307a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800307a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800307c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800307e:	3304      	adds	r3, #4

08003080 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003080:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003082:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003084:	d3f9      	bcc.n	800307a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003086:	4a0b      	ldr	r2, [pc, #44]	; (80030b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003088:	4c0b      	ldr	r4, [pc, #44]	; (80030b8 <LoopForever+0x16>)
  movs r3, #0
 800308a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800308c:	e001      	b.n	8003092 <LoopFillZerobss>

0800308e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800308e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003090:	3204      	adds	r2, #4

08003092 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003092:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003094:	d3fb      	bcc.n	800308e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003096:	f7ff ffb9 	bl	800300c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800309a:	f000 f811 	bl	80030c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800309e:	f7ff fc71 	bl	8002984 <main>

080030a2 <LoopForever>:

LoopForever:
    b LoopForever
 80030a2:	e7fe      	b.n	80030a2 <LoopForever>
  ldr   r0, =_estack
 80030a4:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80030a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030ac:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80030b0:	08003288 	.word	0x08003288
  ldr r2, =_sbss
 80030b4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80030b8:	20000170 	.word	0x20000170

080030bc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80030bc:	e7fe      	b.n	80030bc <ADC1_IRQHandler>
	...

080030c0 <__libc_init_array>:
 80030c0:	b570      	push	{r4, r5, r6, lr}
 80030c2:	2600      	movs	r6, #0
 80030c4:	4d0c      	ldr	r5, [pc, #48]	; (80030f8 <__libc_init_array+0x38>)
 80030c6:	4c0d      	ldr	r4, [pc, #52]	; (80030fc <__libc_init_array+0x3c>)
 80030c8:	1b64      	subs	r4, r4, r5
 80030ca:	10a4      	asrs	r4, r4, #2
 80030cc:	42a6      	cmp	r6, r4
 80030ce:	d109      	bne.n	80030e4 <__libc_init_array+0x24>
 80030d0:	2600      	movs	r6, #0
 80030d2:	f000 f823 	bl	800311c <_init>
 80030d6:	4d0a      	ldr	r5, [pc, #40]	; (8003100 <__libc_init_array+0x40>)
 80030d8:	4c0a      	ldr	r4, [pc, #40]	; (8003104 <__libc_init_array+0x44>)
 80030da:	1b64      	subs	r4, r4, r5
 80030dc:	10a4      	asrs	r4, r4, #2
 80030de:	42a6      	cmp	r6, r4
 80030e0:	d105      	bne.n	80030ee <__libc_init_array+0x2e>
 80030e2:	bd70      	pop	{r4, r5, r6, pc}
 80030e4:	00b3      	lsls	r3, r6, #2
 80030e6:	58eb      	ldr	r3, [r5, r3]
 80030e8:	4798      	blx	r3
 80030ea:	3601      	adds	r6, #1
 80030ec:	e7ee      	b.n	80030cc <__libc_init_array+0xc>
 80030ee:	00b3      	lsls	r3, r6, #2
 80030f0:	58eb      	ldr	r3, [r5, r3]
 80030f2:	4798      	blx	r3
 80030f4:	3601      	adds	r6, #1
 80030f6:	e7f2      	b.n	80030de <__libc_init_array+0x1e>
 80030f8:	08003280 	.word	0x08003280
 80030fc:	08003280 	.word	0x08003280
 8003100:	08003280 	.word	0x08003280
 8003104:	08003284 	.word	0x08003284

08003108 <memcpy>:
 8003108:	2300      	movs	r3, #0
 800310a:	b510      	push	{r4, lr}
 800310c:	429a      	cmp	r2, r3
 800310e:	d100      	bne.n	8003112 <memcpy+0xa>
 8003110:	bd10      	pop	{r4, pc}
 8003112:	5ccc      	ldrb	r4, [r1, r3]
 8003114:	54c4      	strb	r4, [r0, r3]
 8003116:	3301      	adds	r3, #1
 8003118:	e7f8      	b.n	800310c <memcpy+0x4>
	...

0800311c <_init>:
 800311c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800311e:	46c0      	nop			; (mov r8, r8)
 8003120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003122:	bc08      	pop	{r3}
 8003124:	469e      	mov	lr, r3
 8003126:	4770      	bx	lr

08003128 <_fini>:
 8003128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800312a:	46c0      	nop			; (mov r8, r8)
 800312c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800312e:	bc08      	pop	{r3}
 8003130:	469e      	mov	lr, r3
 8003132:	4770      	bx	lr
